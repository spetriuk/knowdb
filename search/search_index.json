{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site represents my knowledge base for personal use. For notes that I take from the Internet, I place a link to the source at the bottom of the page. I use Joplin for note keeping, Joplin Web clipper to save web pages from the browser in .md format. For generating this site I use MkDocs , and Github Pages for hosting. The theme I use is Material for MkDocs","title":"Welcome"},{"location":"#welcome","text":"This site represents my knowledge base for personal use. For notes that I take from the Internet, I place a link to the source at the bottom of the page. I use Joplin for note keeping, Joplin Web clipper to save web pages from the browser in .md format. For generating this site I use MkDocs , and Github Pages for hosting. The theme I use is Material for MkDocs","title":"Welcome"},{"location":"algorithms/B-Tree.%201.%20Introduction/","text":"B-Tree. 1. Introduction Introduction: B-Tree is a self-balancing search tree. In most of the other self-balancing search trees (like AVL and Red-Black Trees), it is assumed that everything is in main memory. To understand the use of B-Trees, we must think of the huge amount of data that cannot fit in main memory. When the number of keys is high, the data is read from disk in the form of blocks. Disk access time is very high compared to the main memory access time. The main idea of using B-Trees is to reduce the number of disk accesses. Most of the tree operations (search, insert, delete, max, min, ..etc ) require O(h) disk accesses where h is the height of the tree. B-tree is a fat tree. The height of B-Trees is kept low by putting maximum possible keys in a B-Tree node. Generally, the B-Tree node size is kept equal to the disk block size. Since the height of the B-tree is low so total disk accesses for most of the operations are reduced significantly compared to balanced Binary Search Trees like AVL Tree, Red-Black Tree, ..etc. Time Complexity of B-Tree: Sr. No. Algorithm Time Complexity 1. Search O(log n) 2. Insert O(log n) 3. Delete O(log n) \u201cn\u201d is the total number of elements in the B-tree. Properties of B-Tree: All leaves are at the same level. A B-Tree is defined by the term minimum degree \u2018t\u2019. The value of t depends upon disk block size. Every node except root must contain at least (ceiling)([t-1]/2) keys. The root may contain minimum 1 key. All nodes (including root) may contain at most t \u2013 1 keys. Number of children of a node is equal to the number of keys in it plus 1. All keys of a node are sorted in increasing order. The child between two keys k1 and k2 contains all keys in the range from k1 and k2. B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from downward. Like other balanced Binary Search Trees, time complexity to search, insert and delete is O(log n). Following is an example of B-Tree of minimum order 5. Note that in practical B-Trees, the value of the minimum order is much more than 5. We can see in the above diagram that all the leaf nodes are at the same level and all non-leaf have no empty sub-tree and have keys one less than the number of their children. Interesting Facts: The minimum height of the B-Tree that can exist with n number of nodes and m is the maximum number of children of a node can have is: 2. The maximum height of the B-Tree that can exist with n number of nodes and d is the minimum number of children that a non-root node can have is: and Traversel in B-Tree: Traversal is also similar to Inorder traversal of Binary Tree. We start from the leftmost child, recursively print the leftmost child, then repeat the same process for remaining children and keys. In the end, recursively print the rightmost child. Search Operation in B-Tree: Search is similar to the search in Binary Search Tree. Let the key to be searched be k. We start from the root and recursively traverse down. For every visited non-leaf node, if the node has the key, we simply return the node. Otherwise, we recur down to the appropriate child (The child which is just before the first greater key) of the node. If we reach a leaf node and don\u2019t find k in the leaf node, we return NULL. Logic: Searching a B-Tree is similar to searching a binary tree. The algorithm is similar and goes with recursion. At each level, the search is optimised as if the key value is not present in the range of parent then the key is present in another branch. As these values limit the search they are also known as limiting value or separation value. If we reach a leaf node and don\u2019t find the desired key then it will display NULL. Example: Searching 120 in the given B-Tree. Solution: In this example, we can see that our search was reduced by just limiting the chances where the key containing the value could be present. Similarly if within the above example we\u2019ve to look for 180, then the control will stop at step 2 because the program will find that the key 180 is present within the current node. And similarly, if it\u2019s to seek out 90 then as 90 < 100 so it\u2019ll go to the left subtree automatically and therefore the control flow will go similarly as shown within the above example. // Java program to illustrate the sum of two numbers // A BTree class Btree { public BTreeNode root ; // Pointer to root node public int t ; // Minimum degree // Constructor (Initializes tree as empty) Btree ( int t ) { this . root = null ; this . t = t ; } // function to traverse the tree public void traverse () { if ( this . root != null ) this . root . traverse (); System . out . println (); } // function to search a key in this tree public BTreeNode search ( int k ) { if ( this . root == null ) return null ; else return this . root . search ( k ); } } // A BTree node class BTreeNode { int [] keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode [] C ; // An array of child pointers int n ; // Current number of keys boolean leaf ; // Is true when node is leaf. Otherwise false // Constructor BTreeNode ( int t , boolean leaf ) { this . t = t ; this . leaf = leaf ; this . keys = new int [ 2 * t - 1 ] ; this . C = new BTreeNode [ 2 * t ] ; this . n = 0 ; } // A function to traverse all nodes in a subtree rooted with this node public void traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i = 0 ; for ( i = 0 ; i < this . n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( this . leaf == false ) { C [ i ] . traverse (); } System . out . print ( keys [ i ] + \" \" ); } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] . traverse (); } // A function to search a key in the subtree rooted with this node. BTreeNode search ( int k ) { // returns NULL if k is not present. // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ] ) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If the key is not found here and this is a leaf node if ( leaf == true ) return null ; // Go to the appropriate child return C [ i ] . search ( k ); } } The above code doesn\u2019t contain the driver program. We will be covering the complete program in our next post on B-Tree Insertion . There are two conventions to define a B-Tree, one is to define by minimum degree (followed in Cormen book ), second is define by order. We have followed the minimum degree convention and will be following same in coming posts on B-Tree. The variable names used in the above program are also kept same as Cormen book for better readability. Insertion and Deletion B-Tree Insertion B-Tree Deletion References: Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don\u2019t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course . Source","title":"B Tree. 1. Introduction"},{"location":"algorithms/B-Tree.%202.%20Insert%20Operation/","text":"B-Tree. 2. Insert Operation In the previous post , we introduced B-Tree. We also discussed search() and traverse() functions. In this post, insert() operation is discussed. A new key is always inserted at the leaf node. Let the key to be inserted be k. Like BST, we start from the root and traverse down till we reach a leaf node. Once we reach a leaf node, we insert the key in that leaf node. Unlike BSTs, we have a predefined range on the number of keys that a node can contain. So before inserting a key to the node, we make sure that the node has extra space. How to make sure that a node has space available for a key before the key is inserted? We use an operation called splitChild() that is used to split a child of a node. See the following diagram to understand split. In the following diagram, child y of x is being split into two nodes y and z. Note that the splitChild operation moves a key up and this is the reason B-Trees grow up, unlike BSTs which grow down. As discussed above, to insert a new key, we go down from root to leaf. Before traversing down to a node, we first check if the node is full. If the node is full, we split it to create space. Following is the complete algorithm. Insertion 1) Initialize x as root. 2) While x is not leaf, do following .. a) Find the child of x that is going to be traversed next. Let the child be y. .. b) If y is not full, change x to point to y. .. c) If y is full, split it and change x to point to one of the two parts of y. If k is smaller than mid key in y, then set x as the first part of y. Else second part of y. When we split y, we move a key from y to its parent x. 3) The loop in step 2 stops when x is leaf. x must have space for 1 extra key as we have been splitting all nodes in advance. So simply insert k to x. Note that the algorithm follows the Cormen book. It is actually a proactive insertion algorithm where before going down to a node, we split it if it is full. The advantage of splitting before is, we never traverse a node twice. If we don\u2019t split a node before going down to it and split it only if a new key is inserted (reactive), we may end up traversing all nodes again from leaf to root. This happens in cases when all nodes on the path from the root to leaf are full. So when we come to the leaf node, we split it and move a key up. Moving a key up will cause a split in parent node (because the parent was already full). This cascading effect never happens in this proactive insertion algorithm. There is a disadvantage of this proactive insertion though, we may do unnecessary splits. Let us understand the algorithm with an example tree of minimum degree \u2018t\u2019 as 3 and a sequence of integers 10, 20, 30, 40, 50, 60, 70, 80 and 90 in an initially empty B-Tree. Initially root is NULL. Let us first insert 10. Let us now insert 20, 30, 40 and 50. They all will be inserted in root because the maximum number of keys a node can accommodate is 2*t \u2013 1 which is 5. Let us now insert 60. Since root node is full, it will first split into two, then 60 will be inserted into the appropriate child. Let us now insert 70 and 80. These new keys will be inserted into the appropriate leaf without any split. Let us now insert 90. This insertion will cause a split. The middle key will go up to the parent. Following is C++ implementation of the above proactive algorithm. // C++ program for B-Tree insertion #include <iostream> using namespace std ; // A BTree node class BTreeNode { int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false public : BTreeNode ( int _t , bool _leaf ); // Constructor // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void insertNonFull ( int k ); // A utility function to split the child y of this node. i is index of y in // child array C[]. The Child y must be full when this function is called void splitChild ( int i , BTreeNode * y ); // A function to traverse all nodes in a subtree rooted with this node void traverse (); // A function to search a key in the subtree rooted with this node. BTreeNode * search ( int k ); // returns NULL if k is not present. // Make BTree friend of this so that we can access private members of this // class in BTree functions friend class BTree ; }; // A BTree class BTree { BTreeNode * root ; // Pointer to root node int t ; // Minimum degree public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } // function to traverse the tree void traverse () { if ( root != NULL ) root -> traverse (); } // function to search a key in this tree BTreeNode * search ( int k ) { return ( root == NULL ) ? NULL : root -> search ( k ); } // The main function that inserts a new key in this B-Tree void insert ( int k ); }; // Constructor for BTreeNode class BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t -1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: traverse () { // There are n keys and n+1 children, traverse through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> search ( k ); } // The main function that inserts a new key in this B-Tree void BTree :: insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t -1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> splitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> insertNonFull ( k ); // Change root root = s ; } else // If root is not full, call insertNonFull for root root -> insertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: insertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n -1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t -1 ) { // If the child is full, then split it splitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> insertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: splitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t -1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find the location of // new key and move all greater keys one space ahead for ( int j = n -1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t -1 ]; // Increment count of keys in this node n = n + 1 ; } // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . insert ( 10 ); t . insert ( 20 ); t . insert ( 5 ); t . insert ( 6 ); t . insert ( 12 ); t . insert ( 30 ); t . insert ( 7 ); t . insert ( 17 ); cout << \"Traversal of the constucted tree is \" ; t . traverse (); int k = 6 ; ( t . search ( k ) != NULL ) ? cout << \" \\n Present\" : cout << \" \\n Not Present\" ; k = 15 ; ( t . search ( k ) != NULL ) ? cout << \" \\n Present\" : cout << \" \\n Not Present\" ; return 0 ; } Output: Traversal of the constucted tree is 5 6 7 10 12 17 20 30 Present Not Present References: Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest http://www.cs.utexas.edu/users/djimenez/utsa/cs3343/lecture17.html Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don\u2019t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course . Source","title":"B Tree. 2. Insert Operation"},{"location":"algorithms/B-Tree.%203.%20Delete%20Operation/","text":"B-Tree. 3. Delete Operation B-Tree is a type of a multi-way search tree. So, if you are not familiar with multi-way search trees in general, it is better to take a look at this video lecture from IIT-Delhi , before proceeding further. Once you get the basics of a multi-way search tree clear, B-Tree operations will be easier to understand. Source of the following explanation and algorithm is Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Deletion process: Deletion from a B-tree is more complicated than insertion, because we can delete a key from any node-not just a leaf\u2014and when we delete a key from an internal node, we will have to rearrange the node\u2019s children. As in insertion, we must make sure the deletion doesn\u2019t violate the B-tree properties . Just as we had to ensure that a node didn\u2019t get too big due to insertion, we must ensure that a node doesn\u2019t get too small during deletion (except that the root is allowed to have fewer than the minimum number t-1 of keys). Just as a simple insertion algorithm might have to back up if a node on the path to where the key was to be inserted was full, a simple approach to deletion might have to back up if a node (other than the root) along the path to where the key is to be deleted has the minimum number of keys. The deletion procedure deletes the key k from the subtree rooted at x. This procedure guarantees that whenever it calls itself recursively on a node x, the number of keys in x is at least the minimum degree t . Note that this condition requires one more key than the minimum required by the usual B-tree conditions, so that sometimes a key may have to be moved into a child node before recursion descends to that child. This strengthened condition allows us to delete a key from the tree in one downward pass without having to \u201cback up\u201d (with one exception, which we\u2019ll explain). You should interpret the following specification for deletion from a B-tree with the understanding that if the root node x ever becomes an internal node having no keys (this situation can occur in cases 2c and 3b then we delete x, and x\u2019s only child x.c1 becomes the new root of the tree, decreasing the height of the tree by one and preserving the property that the root of the tree contains at least one key (unless the tree is empty). We sketch how deletion works with various cases of deleting keys from a B-tree. 1. If the key k is in node x and x is a leaf, delete the key k from x. 2. If the key k is in node x and x is an internal node, do the following. a) If the child y that precedes k in node x has at least t keys, then find the predecessor k0 of k in the sub-tree rooted at y. Recursively delete k0, and replace k by k0 in x. (We can find k0 and delete it in a single downward pass.) b) If y has fewer than t keys, then, symmetrically, examine the child z that follows k in node x. If z has at least t keys, then find the successor k0 of k in the subtree rooted at z. Recursively delete k0, and replace k by k0 in x. (We can find k0 and delete it in a single downward pass.) c) Otherwise, if both y and z have only t-1 keys, merge k and all of z into y, so that x loses both k and the pointer to z, and y now contains 2t-1 keys. Then free z and recursively delete k from y. 3. If the key k is not present in internal node x, determine the root x.c(i) of the appropriate subtree that must contain k, if k is in the tree at all. If x.c(i) has only t-1 keys, execute step 3a or 3b as necessary to guarantee that we descend to a node containing at least t keys. Then finish by recursing on the appropriate child of x. a) If x.c(i) has only t-1 keys but has an immediate sibling with at least t keys, give x.c(i) an extra key by moving a key from x down into x.c(i), moving a key from x.c(i) \u2019s immediate left or right sibling up into x, and moving the appropriate child pointer from the sibling into x.c(i). b) If x.c(i) and both of x.c(i)\u2019s immediate siblings have t-1 keys, merge x.c(i) with one sibling, which involves moving a key from x down into the new merged node to become the median key for that node. Since most of the keys in a B-tree are in the leaves, deletion operations are most often used to delete keys from leaves. The recursive delete procedure then acts in one downward pass through the tree, without having to back up. When deleting a key in an internal node, however, the procedure makes a downward pass through the tree but may have to return to the node from which the key was deleted to replace the key with its predecessor or successor (cases 2a and 2b). The following figures explain the deletion process. Implementation: Following is C++ implementation of deletion process. /* The following program performs deletion on a B-Tree. It contains functions specific for deletion along with all the other functions provided in the previous articles on B-Trees. See https://www.geeksforgeeks.org/b-tree-set-1-introduction-2/ for previous article. The deletion function has been compartmentalized into 8 functions for ease of understanding and clarity The following functions are exclusive for deletion In class BTreeNode: 1) remove 2) removeFromLeaf 3) removeFromNonLeaf 4) getPred 5) getSucc 6) borrowFromPrev 7) borrowFromNext 8) merge 9) findKey In class BTree: 1) remove The removal of a key from a B-Tree is a fairly complicated process. The program handles all the 6 different cases that might arise while removing a key. Testing: The code has been tested using the B-Tree provided in the CLRS book( included in the main function ) along with other cases. Reference: CLRS3 - Chapter 18 - (499-502) It is advised to read the material in CLRS before taking a look at the code. */ #include <iostream> using namespace std ; // A BTree node class BTreeNode { int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false public : BTreeNode ( int _t , bool _leaf ); // Constructor // A function to traverse all nodes in a subtree rooted with this node void traverse (); // A function to search a key in subtree rooted with this node. BTreeNode * search ( int k ); // returns NULL if k is not present. // A function that returns the index of the first key that is greater // or equal to k int findKey ( int k ); // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void insertNonFull ( int k ); // A utility function to split the child y of this node. i is index // of y in child array C[]. The Child y must be full when this // function is called void splitChild ( int i , BTreeNode * y ); // A wrapper function to remove the key k in subtree rooted with // this node. void remove ( int k ); // A function to remove the key present in idx-th position in // this node which is a leaf void removeFromLeaf ( int idx ); // A function to remove the key present in idx-th position in // this node which is a non-leaf node void removeFromNonLeaf ( int idx ); // A function to get the predecessor of the key- where the key // is present in the idx-th position in the node int getPred ( int idx ); // A function to get the successor of the key- where the key // is present in the idx-th position in the node int getSucc ( int idx ); // A function to fill up the child node present in the idx-th // position in the C[] array if that child has less than t-1 keys void fill ( int idx ); // A function to borrow a key from the C[idx-1]-th node and place // it in C[idx]th node void borrowFromPrev ( int idx ); // A function to borrow a key from the C[idx+1]-th node and place it // in C[idx]th node void borrowFromNext ( int idx ); // A function to merge idx-th child of the node with (idx+1)th child of // the node void merge ( int idx ); // Make BTree friend of this so that we can access private members of // this class in BTree functions friend class BTree ; }; class BTree { BTreeNode * root ; // Pointer to root node int t ; // Minimum degree public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } void traverse () { if ( root != NULL ) root -> traverse (); } // function to search a key in this tree BTreeNode * search ( int k ) { return ( root == NULL ) ? NULL : root -> search ( k ); } // The main function that inserts a new key in this B-Tree void insert ( int k ); // The main function that removes a new key in thie B-Tree void remove ( int k ); }; BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t -1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // A utility function that returns the index of the first key that is // greater than or equal to k int BTreeNode :: findKey ( int k ) { int idx = 0 ; while ( idx < n && keys [ idx ] < k ) ++ idx ; return idx ; } // A function to remove the key k from the sub-tree rooted with this node void BTreeNode :: remove ( int k ) { int idx = findKey ( k ); // The key to be removed is present in this node if ( idx < n && keys [ idx ] == k ) { // If the node is a leaf node - removeFromLeaf is called // Otherwise, removeFromNonLeaf function is called if ( leaf ) removeFromLeaf ( idx ); else removeFromNonLeaf ( idx ); } else { // If this node is a leaf node, then the key is not present in tree if ( leaf ) { cout << \"The key \" << k << \" is does not exist in the tree \\n \" ; return ; } // The key to be removed is present in the sub-tree rooted with this node // The flag indicates whether the key is present in the sub-tree rooted // with the last child of this node bool flag = ( ( idx == n ) ? true : false ); // If the child where the key is supposed to exist has less that t keys, // we fill that child if ( C [ idx ] -> n < t ) fill ( idx ); // If the last child has been merged, it must have merged with the previous // child and so we recurse on the (idx-1)th child. Else, we recurse on the // (idx)th child which now has atleast t keys if ( flag && idx > n ) C [ idx -1 ] -> remove ( k ); else C [ idx ] -> remove ( k ); } return ; } // A function to remove the idx-th key from this node - which is a leaf node void BTreeNode :: removeFromLeaf ( int idx ) { // Move all the keys after the idx-th pos one place backward for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i -1 ] = keys [ i ]; // Reduce the count of keys n -- ; return ; } // A function to remove the idx-th key from this node - which is a non-leaf node void BTreeNode :: removeFromNonLeaf ( int idx ) { int k = keys [ idx ]; // If the child that precedes k (C[idx]) has atleast t keys, // find the predecessor 'pred' of k in the subtree rooted at // C[idx]. Replace k by pred. Recursively delete pred // in C[idx] if ( C [ idx ] -> n >= t ) { int pred = getPred ( idx ); keys [ idx ] = pred ; C [ idx ] -> remove ( pred ); } // If the child C[idx] has less that t keys, examine C[idx+1]. // If C[idx+1] has atleast t keys, find the successor 'succ' of k in // the subtree rooted at C[idx+1] // Replace k by succ // Recursively delete succ in C[idx+1] else if ( C [ idx + 1 ] -> n >= t ) { int succ = getSucc ( idx ); keys [ idx ] = succ ; C [ idx + 1 ] -> remove ( succ ); } // If both C[idx] and C[idx+1] has less that t keys,merge k and all of C[idx+1] // into C[idx] // Now C[idx] contains 2t-1 keys // Free C[idx+1] and recursively delete k from C[idx] else { merge ( idx ); C [ idx ] -> remove ( k ); } return ; } // A function to get predecessor of keys[idx] int BTreeNode :: getPred ( int idx ) { // Keep moving to the right most node until we reach a leaf BTreeNode * cur = C [ idx ]; while ( ! cur -> leaf ) cur = cur -> C [ cur -> n ]; // Return the last key of the leaf return cur -> keys [ cur -> n -1 ]; } int BTreeNode :: getSucc ( int idx ) { // Keep moving the left most node starting from C[idx+1] until we reach a leaf BTreeNode * cur = C [ idx + 1 ]; while ( ! cur -> leaf ) cur = cur -> C [ 0 ]; // Return the first key of the leaf return cur -> keys [ 0 ]; } // A function to fill child C[idx] which has less than t-1 keys void BTreeNode :: fill ( int idx ) { // If the previous child(C[idx-1]) has more than t-1 keys, borrow a key // from that child if ( idx != 0 && C [ idx -1 ] -> n >= t ) borrowFromPrev ( idx ); // If the next child(C[idx+1]) has more than t-1 keys, borrow a key // from that child else if ( idx != n && C [ idx + 1 ] -> n >= t ) borrowFromNext ( idx ); // Merge C[idx] with its sibling // If C[idx] is the last child, merge it with with its previous sibling // Otherwise merge it with its next sibling else { if ( idx != n ) merge ( idx ); else merge ( idx -1 ); } return ; } // A function to borrow a key from C[idx-1] and insert it // into C[idx] void BTreeNode :: borrowFromPrev ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx -1 ]; // The last key from C[idx-1] goes up to the parent and key[idx-1] // from parent is inserted as the first key in C[idx]. Thus, the loses // sibling one key and child gains one key // Moving all key in C[idx] one step ahead for ( int i = child -> n -1 ; i >= 0 ; -- i ) child -> keys [ i + 1 ] = child -> keys [ i ]; // If C[idx] is not a leaf, move all its child pointers one step ahead if ( ! child -> leaf ) { for ( int i = child -> n ; i >= 0 ; -- i ) child -> C [ i + 1 ] = child -> C [ i ]; } // Setting child's first key equal to keys[idx-1] from the current node child -> keys [ 0 ] = keys [ idx -1 ]; // Moving sibling's last child as C[idx]'s first child if ( ! child -> leaf ) child -> C [ 0 ] = sibling -> C [ sibling -> n ]; // Moving the key from the sibling to the parent // This reduces the number of keys in the sibling keys [ idx -1 ] = sibling -> keys [ sibling -> n -1 ]; child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to borrow a key from the C[idx+1] and place // it in C[idx] void BTreeNode :: borrowFromNext ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // keys[idx] is inserted as the last key in C[idx] child -> keys [( child -> n )] = keys [ idx ]; // Sibling's first child is inserted as the last child // into C[idx] if ( ! ( child -> leaf )) child -> C [( child -> n ) + 1 ] = sibling -> C [ 0 ]; //The first key from sibling is inserted into keys[idx] keys [ idx ] = sibling -> keys [ 0 ]; // Moving all keys in sibling one step behind for ( int i = 1 ; i < sibling -> n ; ++ i ) sibling -> keys [ i -1 ] = sibling -> keys [ i ]; // Moving the child pointers one step behind if ( ! sibling -> leaf ) { for ( int i = 1 ; i <= sibling -> n ; ++ i ) sibling -> C [ i -1 ] = sibling -> C [ i ]; } // Increasing and decreasing the key count of C[idx] and C[idx+1] // respectively child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to merge C[idx] with C[idx+1] // C[idx+1] is freed after merging void BTreeNode :: merge ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // Pulling a key from the current node and inserting it into (t-1)th // position of C[idx] child -> keys [ t -1 ] = keys [ idx ]; // Copying the keys from C[idx+1] to C[idx] at the end for ( int i = 0 ; i < sibling -> n ; ++ i ) child -> keys [ i + t ] = sibling -> keys [ i ]; // Copying the child pointers from C[idx+1] to C[idx] if ( ! child -> leaf ) { for ( int i = 0 ; i <= sibling -> n ; ++ i ) child -> C [ i + t ] = sibling -> C [ i ]; } // Moving all keys after idx in the current node one step before - // to fill the gap created by moving keys[idx] to C[idx] for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i -1 ] = keys [ i ]; // Moving the child pointers after (idx+1) in the current node one // step before for ( int i = idx + 2 ; i <= n ; ++ i ) C [ i -1 ] = C [ i ]; // Updating the key count of child and the current node child -> n += sibling -> n + 1 ; n -- ; // Freeing the memory occupied by sibling delete ( sibling ); return ; } // The main function that inserts a new key in this B-Tree void BTree :: insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t -1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> splitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> insertNonFull ( k ); // Change root root = s ; } else // If root is not full, call insertNonFull for root root -> insertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: insertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n -1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t -1 ) { // If the child is full, then split it splitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> insertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: splitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t -1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find location of // new key and move all greater keys one space ahead for ( int j = n -1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t -1 ]; // Increment count of keys in this node n = n + 1 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> search ( k ); } void BTree :: remove ( int k ) { if ( ! root ) { cout << \"The tree is empty \\n \" ; return ; } // Call the remove function for root root -> remove ( k ); // If the root node has 0 keys, make its first child as the new root // if it has a child, otherwise set root as NULL if ( root -> n == 0 ) { BTreeNode * tmp = root ; if ( root -> leaf ) root = NULL ; else root = root -> C [ 0 ]; // Free the old root delete tmp ; } return ; } // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . insert ( 1 ); t . insert ( 3 ); t . insert ( 7 ); t . insert ( 10 ); t . insert ( 11 ); t . insert ( 13 ); t . insert ( 14 ); t . insert ( 15 ); t . insert ( 18 ); t . insert ( 16 ); t . insert ( 19 ); t . insert ( 24 ); t . insert ( 25 ); t . insert ( 26 ); t . insert ( 21 ); t . insert ( 4 ); t . insert ( 5 ); t . insert ( 20 ); t . insert ( 22 ); t . insert ( 2 ); t . insert ( 17 ); t . insert ( 12 ); t . insert ( 6 ); cout << \"Traversal of tree constructed is \\n \" ; t . traverse (); cout << endl ; t . remove ( 6 ); cout << \"Traversal of tree after removing 6 \\n \" ; t . traverse (); cout << endl ; t . remove ( 13 ); cout << \"Traversal of tree after removing 13 \\n \" ; t . traverse (); cout << endl ; t . remove ( 7 ); cout << \"Traversal of tree after removing 7 \\n \" ; t . traverse (); cout << endl ; t . remove ( 4 ); cout << \"Traversal of tree after removing 4 \\n \" ; t . traverse (); cout << endl ; t . remove ( 2 ); cout << \"Traversal of tree after removing 2 \\n \" ; t . traverse (); cout << endl ; t . remove ( 16 ); cout << \"Traversal of tree after removing 16 \\n \" ; t . traverse (); cout << endl ; return 0 ; } Output: Traversal of tree constructed is 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 6 1 2 3 4 5 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 13 1 2 3 4 5 7 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 7 1 2 3 4 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 4 1 2 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 2 1 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 16 1 3 5 10 11 12 14 15 17 18 19 20 21 22 24 25 26 Source","title":"B Tree. 3. Delete Operation"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/","text":"Local PostgreSQL Docker Dev An easy way to set up your local environment for developing SQL with Docker containers Download an image: docker pull postgres After downloading the image you can check that is available to use: docker images >>> REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 2 weeks ago 314MB We will create a local folder and mount it as a data volume for our running container to store all the database files in a known location for you. In the \u201crun\u201d command, we will map also the ports from the host to the running container and a password for the Postgres default user. 1. Create a folder in a known location for you mkdir ${ HOME } /postgres-data/ 2. run the postgres image docker run -d \\ --name dev-postgres \\ -e POSTGRES_PASSWORD = pass \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p 5432 :5432 \\ postgres 3. check that the container is running docker ps >>> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dfa570d6e843 postgres \"docker-entrypoint.s\u2026\" 27 hours ago Up 3 seconds 0.0.0.0:5432->5432/tcp postgres-test Great, you have a running PostgreSQL instance and you should be able to enter the container from your command line and test the database instance: docker exec -it dev-postgres bash Now you are in the container's bash console. Connect to the database psql -h localhost -U postgres Starting the pgAdmin instance pgAdmin is the most popular and feature-rich Open Source administration and development platform for PostgreSQL. You will use it to manage the DB instance as well as to run your queries against the tables of it. You will be using this docker image to deploy it in a container. Get the image and run the instance of the image with the following commands: docker pull dpage/pgadmin4 docker run \\ -p 80 :80 \\ -e 'PGADMIN\\_DEFAULT\\_EMAIL=user@domain.local' \\ -e 'PGADMIN\\_DEFAULT\\_PASSWORD=SuperSecret' \\ --name dev-pgadmin \\ -d dpage/pgadmin4 The parameters that we are passing to the docker run command are: -p 80:80: This parameter tells docker to map the port 80 in the container to port 80 in your computer (Docker host) -e 'PGADMIN_DEFAULT_EMAIL: Environment variable for default user\u2019s email, you will use this to log in the portal afterwards -e 'PGADMIN_DEFAULT_PASSWORD': Environment variable for default user\u2019s password -d: This parameters tells docker to start the container in detached mode dpage/pgadmin4: This parameter tells docker to use the image that we have previously downloaded Let\u2019s check that the container is up and running, you should also see the previous container running: docker ps Accessing the PostgreSQL from the pgAdmin tool We haven\u2019t defined any network for these containers so they should be running on the default one, and if you try to access the database or the web portal through their ports, connecting via \u2018localhost\u2019 or \u2018127.0.0.1\u2019 would work just fine; but if you try connecting from one container to the other, you might encounter some connectivity issues. We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool. The next step is to go to your web browser and type http://localhost:80 . pgAdmin login portal, http://localhost:80. Source: Local You should type the user email and the password you wrote when running the container. Once you are in the portal, you will need to add a new server by clicking on the \u201cAdd New Server\u201d and adding the right information on the pop-up window, make sure you add the IPAdress that you copied previously in the Host name/address under the Connection tab. Welcome page from pgAdmin tool. Source: Local Once you have created the connection you should see the server on the right side of your screen. At this moment you are ready to start building your databases and tables, uploading data and querying for your analysis or applications. Server dashboard on pgAdmin tool. Source: Local Source","title":"Local PostgreSQL Docker Dev"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#an-easy-way-to-set-up-your-local-environment-for-developing-sql-with-docker-containers","text":"Download an image: docker pull postgres After downloading the image you can check that is available to use: docker images >>> REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 2 weeks ago 314MB We will create a local folder and mount it as a data volume for our running container to store all the database files in a known location for you. In the \u201crun\u201d command, we will map also the ports from the host to the running container and a password for the Postgres default user.","title":"An easy way to set up your local environment for developing SQL with Docker containers"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#1-create-a-folder-in-a-known-location-for-you","text":"mkdir ${ HOME } /postgres-data/","title":"1. Create a folder in a known location for you"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#2-run-the-postgres-image","text":"docker run -d \\ --name dev-postgres \\ -e POSTGRES_PASSWORD = pass \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p 5432 :5432 \\ postgres","title":"2. run the postgres image"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#3-check-that-the-container-is-running","text":"docker ps >>> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dfa570d6e843 postgres \"docker-entrypoint.s\u2026\" 27 hours ago Up 3 seconds 0.0.0.0:5432->5432/tcp postgres-test Great, you have a running PostgreSQL instance and you should be able to enter the container from your command line and test the database instance: docker exec -it dev-postgres bash Now you are in the container's bash console. Connect to the database psql -h localhost -U postgres","title":"3. check that the container is running"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#starting-the-pgadmin-instance","text":"pgAdmin is the most popular and feature-rich Open Source administration and development platform for PostgreSQL. You will use it to manage the DB instance as well as to run your queries against the tables of it. You will be using this docker image to deploy it in a container. Get the image and run the instance of the image with the following commands: docker pull dpage/pgadmin4 docker run \\ -p 80 :80 \\ -e 'PGADMIN\\_DEFAULT\\_EMAIL=user@domain.local' \\ -e 'PGADMIN\\_DEFAULT\\_PASSWORD=SuperSecret' \\ --name dev-pgadmin \\ -d dpage/pgadmin4 The parameters that we are passing to the docker run command are: -p 80:80: This parameter tells docker to map the port 80 in the container to port 80 in your computer (Docker host) -e 'PGADMIN_DEFAULT_EMAIL: Environment variable for default user\u2019s email, you will use this to log in the portal afterwards -e 'PGADMIN_DEFAULT_PASSWORD': Environment variable for default user\u2019s password -d: This parameters tells docker to start the container in detached mode dpage/pgadmin4: This parameter tells docker to use the image that we have previously downloaded Let\u2019s check that the container is up and running, you should also see the previous container running: docker ps","title":"Starting the pgAdmin instance"},{"location":"docker/Local%20PostgreSQL%20Docker%20Dev/#accessing-the-postgresql-from-the-pgadmin-tool","text":"We haven\u2019t defined any network for these containers so they should be running on the default one, and if you try to access the database or the web portal through their ports, connecting via \u2018localhost\u2019 or \u2018127.0.0.1\u2019 would work just fine; but if you try connecting from one container to the other, you might encounter some connectivity issues. We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool. The next step is to go to your web browser and type http://localhost:80 . pgAdmin login portal, http://localhost:80. Source: Local You should type the user email and the password you wrote when running the container. Once you are in the portal, you will need to add a new server by clicking on the \u201cAdd New Server\u201d and adding the right information on the pop-up window, make sure you add the IPAdress that you copied previously in the Host name/address under the Connection tab. Welcome page from pgAdmin tool. Source: Local Once you have created the connection you should see the server on the right side of your screen. At this moment you are ready to start building your databases and tables, uploading data and querying for your analysis or applications. Server dashboard on pgAdmin tool. Source: Local Source","title":"Accessing the PostgreSQL from the pgAdmin tool"},{"location":"docker/Mongodb%20Docker/","text":"Mongodb Docker docker run -p 27018 :27017 --name mongo -d mongo docker exec -it mongo bash","title":"Mongodb Docker"},{"location":"docker/PgAdmin%204%20docker/","text":"PgAdmin 4 docker PgAdmin 4 docker PgAdmin 4 docker container has exposed port 80 and 443 by default. You can check the Dockerfile here So the port mapping parameter in the command has to be updated (-p host_port: container_port) Below is the updated command to access pgadmin4 via http (port 80) docker run -p 5050 :80 -e \"PGADMIN_DEFAULT_EMAIL=myemail@gmail.com\" -e \"PGADMIN_DEFAULT_PASSWORD=a12345678\" -d dpage/pgadmin4 After starting the container you should be able to access it via http://localhost:5050 Adding docker db server We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool.","title":"PgAdmin 4 docker"},{"location":"docker/PgAdmin%204%20docker/#pgadmin-4-docker","text":"PgAdmin 4 docker container has exposed port 80 and 443 by default. You can check the Dockerfile here So the port mapping parameter in the command has to be updated (-p host_port: container_port) Below is the updated command to access pgadmin4 via http (port 80) docker run -p 5050 :80 -e \"PGADMIN_DEFAULT_EMAIL=myemail@gmail.com\" -e \"PGADMIN_DEFAULT_PASSWORD=a12345678\" -d dpage/pgadmin4 After starting the container you should be able to access it via http://localhost:5050","title":"PgAdmin 4 docker"},{"location":"docker/PgAdmin%204%20docker/#adding-docker-db-server","text":"We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool.","title":"Adding docker db server"},{"location":"git/Create%20Empty%20Branch%20in%20Git/","text":"Create Empty Branch in Git Create Empty Branch in Git $ git checkout --orphan NEWBRANCH $ git rm -rf . --orphan creates a new branch, but it starts without any commit. After running the above command you are on a new branch \"NEWBRANCH\", and the first commit you create from this state will start a new history without any ancestry. You can then start adding files and commit them and they will live in their own branch. If you take a look at the log, you will see that it is isolated from the original log.","title":"Create Empty Branch in Git"},{"location":"git/Create%20Empty%20Branch%20in%20Git/#create-empty-branch-in-git","text":"$ git checkout --orphan NEWBRANCH $ git rm -rf . --orphan creates a new branch, but it starts without any commit. After running the above command you are on a new branch \"NEWBRANCH\", and the first commit you create from this state will start a new history without any ancestry. You can then start adding files and commit them and they will live in their own branch. If you take a look at the log, you will see that it is isolated from the original log.","title":"Create Empty Branch in Git"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/","text":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!! \u0401\u0431\u0430\u043d\u044b\u0439 Git!!! Git \u0441\u043b\u043e\u0436\u0435\u043d: \u043b\u0435\u0433\u043a\u043e \u0432\u0441\u0451 \u043f\u0440\u043e\u0435\u0431\u0430\u0442\u044c, \u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Git - \u044d\u0442\u043e \u0444\u0438\u043d\u0438\u0448: \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u0434\u043e \u0437\u043d\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0448\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0441\u0451 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f. \u0411\u043b\u044f, \u044f \u043d\u0430\u043a\u043e\u0441\u044f\u0447\u0438\u043b, \u0433\u0434\u0435 \u0443 git \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438!?! git reflog # \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0433\u043e, # \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0432 git, \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0435\u0442\u043a\u0430\u0445! # \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0435\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 HEAD@{\u0438\u043d\u0434\u0435\u043a\u0441} # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u043e\u0441\u044c git reset HEAD@ { index } # \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435 \u0448\u0442\u0443\u043a\u0438, \u0438\u043b\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u043e \u0447\u0435\u043c \u0412\u044b \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u0438, \u0438\u043b\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u0438\u044f\u043d\u0438\u044f, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0442\u0443\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u042f \u041e\u0427\u0415\u041d\u042c \u0427\u0410\u0421\u0422\u041e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e reflog . \u0421\u043d\u0438\u043c\u0430\u044e \u0448\u043b\u044f\u043f\u0443 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e. \u0411\u043b\u044f, \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0438 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043b, \u0447\u0442\u043e \u043a\u043e\u0435-\u0447\u0442\u043e \u0437\u0430\u0431\u044b\u043b! # \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 git commit --amend --no-edit # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435! # \u041f\u0420\u0415\u0414\u0423\u041f\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b! \u041e\u0431\u044b\u0447\u043d\u043e \u044f \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043c\u0438\u0447\u0443, \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e \u0442\u0435\u0441\u0442\u044b/\u0441\u043a\u0430\u043d\u0435\u0440\u044b... \u0438 \u0431\u043b\u0438\u043d, \u044f \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 \u0440\u0430\u0432\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c rebase -i \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u043e\u0431\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435, \u043d\u043e \u0442\u0430\u043a \u0432 \u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0440\u0430\u0437 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443! \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435, \u0438\u043d\u0430\u0447\u0435 \u0412\u0430\u043c \u043d\u0435 \u043f\u043e\u0437\u0434\u043e\u0440\u043e\u0432\u0438\u0442\u0441\u044f. \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! git commit --amend # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0401\u0431\u0430\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e. \u0411\u043b\u044f, \u042f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0447\u0442\u043e-\u0442\u043e \u0432 \u043c\u0430\u0441\u0442\u0435\u0440, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435! # \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git branch \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0443\u0434\u0430\u043b\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git reset HEAD~ --hard git checkout \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0432\u0430\u0448 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0436\u0438\u0432\u0451\u0442 \u0432 \u044d\u0442\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 :) NB: \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a-\u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c git reset HEAD@{\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-\u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432-\u043d\u0430\u0437\u0430\u0434} \u0432\u043c\u0435\u0441\u0442\u043e HEAD~ . \u0401\u0431\u0443\u0448\u043a\u0438-\u0432\u043e\u0440\u043e\u0431\u0443\u0448\u043a\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u043a\u043e\u0440\u043e\u0447\u0435. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c! \u0411\u043b\u044f, \u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u043d\u0435 \u0432 \u0442\u0443 \u0432\u0435\u0442\u043a\u0443! # \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043d\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 git reset HEAD~ --soft git stash # \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443 git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 git stash pop git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git commit -m \"\u0432\u0430\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0434\u0435\u0441\u044c\" # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u041c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c cherry-pick \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435, \u0442\u043e \u0447\u0442\u043e \u0432\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f! git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git cherry-pick master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git checkout master git reset HEAD~ --hard \u0411\u043b\u044f, \u044f \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c diff, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?! \u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b, \u043d\u043e diff \u043f\u0443\u0441\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f ( add ) \u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043b\u0430\u0433. git diff --staged \u00af\\ (\u30c4) /\u00af (\u0434\u0430, \u044f \u0437\u043d\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0431\u0430\u0433, \u0430 \u0444\u0438\u0447\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0438\u0445\u0443\u044f \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u0430!) \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b 5 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043d\u0430\u0437\u0430\u0434! # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git revert [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] # git \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043e\u0442\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 # \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 # \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u0437\u0430\u0434 \u0438 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439! \u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b\u0438 \u0445\u0440\u0435\u043d\u044c, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0441 revert . \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b \u0432\u043c\u0435\u0441\u0442\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! \u041d\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e, (\u043a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u0443 git`\u0430) \u044d\u0442\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0451\u0440\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434... \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0435! # \u043d\u0430\u0439\u0442\u0438 \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u0438\u0442\u044c\u0441\u044f git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git checkout [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] -- \u043f\u0443\u0442\u044c/\u043a/\u0444\u0430\u0439\u043b\u0443 # \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 git commit -m \"\u041e\u0433\u043e, \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f!\" \u041a\u043e\u0433\u0434\u0430 \u0434\u043e \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0434\u043e\u0448\u043b\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u041e\u0425\u0423\u0415\u041d\u041d\u041e. \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e, \u0442\u043e \u0441\u0445\u0443\u044f\u043b\u0438 checkout -- \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f? :\u0443\u0433\u0440\u043e\u0436\u0430\u0435\u0442-\u043b\u0438\u043d\u0443\u0441\u0443-\u0442\u043e\u0440\u0432\u0430\u043b\u044c\u0434\u0441\u0443: \u041d\u0430\u0445\u0443\u0439 \u0432\u0441\u0451, \u044f \u0441\u0434\u0430\u044e\u0441\u044c. cd .. sudo rm -r \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git git clone https://some.github.url/\u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git.git cd \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git \u0421\u043f\u0430\u0441\u0438\u0431\u043e Eric V. \u0437\u0430 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. \u0412\u0441\u0435 \u0436\u0430\u043b\u043e\u0431\u044b \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e sudo \u0432 \u044d\u0442\u043e\u0439 \u0448\u0443\u0442\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0440\u0430\u0437\u0443 \u0435\u043c\u0443. \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0432\u0435\u0442\u043a\u0430 \u043d\u0430\u0441\u0442\u043e\u043e\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u0430\u0436\u0435\u043d\u0430, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0432 \"git-\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435\" \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0440\u0430\u0442\u0438\u043c\u043e! # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 origin git fetch origin git checkout master git reset --hard origin/master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git clean -d --force # \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c checkout/reset/clean \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0441\u043f\u043e\u0440\u0447\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438 *\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u042d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0438\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c. \u0414\u0430, \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u044f \u043f\u0440\u0438\u0448\u0451\u043b \u043a \u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a, \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u044e\u0441\u044c \u044d\u0442\u0438\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043e\u0437\u043e\u0439 \u043b\u0435\u0433\u043a\u043e\u043c\u044b\u0441\u043b\u0438\u044f \u0438 \u0440\u0443\u0433\u0430\u043d\u0438. \u041f\u0440\u0438\u043c\u0438\u0442\u0435 \u044d\u0442\u043e \u0438\u043b\u0438 \u0443\u0439\u0434\u0438\u0442\u0435! Source","title":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#git","text":"Git \u0441\u043b\u043e\u0436\u0435\u043d: \u043b\u0435\u0433\u043a\u043e \u0432\u0441\u0451 \u043f\u0440\u043e\u0435\u0431\u0430\u0442\u044c, \u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Git - \u044d\u0442\u043e \u0444\u0438\u043d\u0438\u0448: \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u0434\u043e \u0437\u043d\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0448\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0441\u0451 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f.","title":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#git_1","text":"git reflog # \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0433\u043e, # \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0432 git, \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0435\u0442\u043a\u0430\u0445! # \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0435\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 HEAD@{\u0438\u043d\u0434\u0435\u043a\u0441} # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u043e\u0441\u044c git reset HEAD@ { index } # \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435 \u0448\u0442\u0443\u043a\u0438, \u0438\u043b\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u043e \u0447\u0435\u043c \u0412\u044b \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u0438, \u0438\u043b\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u0438\u044f\u043d\u0438\u044f, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0442\u0443\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u042f \u041e\u0427\u0415\u041d\u042c \u0427\u0410\u0421\u0422\u041e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e reflog . \u0421\u043d\u0438\u043c\u0430\u044e \u0448\u043b\u044f\u043f\u0443 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e.","title":"\u0411\u043b\u044f, \u044f \u043d\u0430\u043a\u043e\u0441\u044f\u0447\u0438\u043b, \u0433\u0434\u0435 \u0443 git \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438!?!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#-","text":"# \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 git commit --amend --no-edit # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435! # \u041f\u0420\u0415\u0414\u0423\u041f\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b! \u041e\u0431\u044b\u0447\u043d\u043e \u044f \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043c\u0438\u0447\u0443, \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e \u0442\u0435\u0441\u0442\u044b/\u0441\u043a\u0430\u043d\u0435\u0440\u044b... \u0438 \u0431\u043b\u0438\u043d, \u044f \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 \u0440\u0430\u0432\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c rebase -i \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u043e\u0431\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435, \u043d\u043e \u0442\u0430\u043a \u0432 \u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0440\u0430\u0437 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443! \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435, \u0438\u043d\u0430\u0447\u0435 \u0412\u0430\u043c \u043d\u0435 \u043f\u043e\u0437\u0434\u043e\u0440\u043e\u0432\u0438\u0442\u0441\u044f.","title":"\u0411\u043b\u044f, \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0438 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043b, \u0447\u0442\u043e \u043a\u043e\u0435-\u0447\u0442\u043e \u0437\u0430\u0431\u044b\u043b!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_1","text":"git commit --amend # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0401\u0431\u0430\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e.","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#-_1","text":"# \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git branch \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0443\u0434\u0430\u043b\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git reset HEAD~ --hard git checkout \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0432\u0430\u0448 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0436\u0438\u0432\u0451\u0442 \u0432 \u044d\u0442\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 :) NB: \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a-\u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c git reset HEAD@{\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-\u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432-\u043d\u0430\u0437\u0430\u0434} \u0432\u043c\u0435\u0441\u0442\u043e HEAD~ . \u0401\u0431\u0443\u0448\u043a\u0438-\u0432\u043e\u0440\u043e\u0431\u0443\u0448\u043a\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u043a\u043e\u0440\u043e\u0447\u0435. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c!","title":"\u0411\u043b\u044f, \u042f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0447\u0442\u043e-\u0442\u043e \u0432 \u043c\u0430\u0441\u0442\u0435\u0440, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_2","text":"# \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043d\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 git reset HEAD~ --soft git stash # \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443 git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 git stash pop git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git commit -m \"\u0432\u0430\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0434\u0435\u0441\u044c\" # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u041c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c cherry-pick \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435, \u0442\u043e \u0447\u0442\u043e \u0432\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f! git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git cherry-pick master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git checkout master git reset HEAD~ --hard","title":"\u0411\u043b\u044f, \u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u043d\u0435 \u0432 \u0442\u0443 \u0432\u0435\u0442\u043a\u0443!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#diff","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b, \u043d\u043e diff \u043f\u0443\u0441\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f ( add ) \u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043b\u0430\u0433. git diff --staged \u00af\\ (\u30c4) /\u00af (\u0434\u0430, \u044f \u0437\u043d\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0431\u0430\u0433, \u0430 \u0444\u0438\u0447\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0438\u0445\u0443\u044f \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u0430!)","title":"\u0411\u043b\u044f, \u044f \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c diff, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#5","text":"# \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git revert [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] # git \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043e\u0442\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 # \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 # \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u0437\u0430\u0434 \u0438 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439! \u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b\u0438 \u0445\u0440\u0435\u043d\u044c, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0441 revert . \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b \u0432\u043c\u0435\u0441\u0442\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! \u041d\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e, (\u043a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u0443 git`\u0430) \u044d\u0442\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0451\u0440\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434...","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b 5 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043d\u0430\u0437\u0430\u0434!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_3","text":"# \u043d\u0430\u0439\u0442\u0438 \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u0438\u0442\u044c\u0441\u044f git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git checkout [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] -- \u043f\u0443\u0442\u044c/\u043a/\u0444\u0430\u0439\u043b\u0443 # \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 git commit -m \"\u041e\u0433\u043e, \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f!\" \u041a\u043e\u0433\u0434\u0430 \u0434\u043e \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0434\u043e\u0448\u043b\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u041e\u0425\u0423\u0415\u041d\u041d\u041e. \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e, \u0442\u043e \u0441\u0445\u0443\u044f\u043b\u0438 checkout -- \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f? :\u0443\u0433\u0440\u043e\u0436\u0430\u0435\u0442-\u043b\u0438\u043d\u0443\u0441\u0443-\u0442\u043e\u0440\u0432\u0430\u043b\u044c\u0434\u0441\u0443:","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0435!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_4","text":"cd .. sudo rm -r \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git git clone https://some.github.url/\u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git.git cd \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git \u0421\u043f\u0430\u0441\u0438\u0431\u043e Eric V. \u0437\u0430 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. \u0412\u0441\u0435 \u0436\u0430\u043b\u043e\u0431\u044b \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e sudo \u0432 \u044d\u0442\u043e\u0439 \u0448\u0443\u0442\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0440\u0430\u0437\u0443 \u0435\u043c\u0443. \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0432\u0435\u0442\u043a\u0430 \u043d\u0430\u0441\u0442\u043e\u043e\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u0430\u0436\u0435\u043d\u0430, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0432 \"git-\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435\" \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0440\u0430\u0442\u0438\u043c\u043e! # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 origin git fetch origin git checkout master git reset --hard origin/master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git clean -d --force # \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c checkout/reset/clean \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0441\u043f\u043e\u0440\u0447\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438 *\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u042d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0438\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c. \u0414\u0430, \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u044f \u043f\u0440\u0438\u0448\u0451\u043b \u043a \u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a, \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u044e\u0441\u044c \u044d\u0442\u0438\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043e\u0437\u043e\u0439 \u043b\u0435\u0433\u043a\u043e\u043c\u044b\u0441\u043b\u0438\u044f \u0438 \u0440\u0443\u0433\u0430\u043d\u0438. \u041f\u0440\u0438\u043c\u0438\u0442\u0435 \u044d\u0442\u043e \u0438\u043b\u0438 \u0443\u0439\u0434\u0438\u0442\u0435! Source","title":"\u041d\u0430\u0445\u0443\u0439 \u0432\u0441\u0451, \u044f \u0441\u0434\u0430\u044e\u0441\u044c."},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 Git stash. \u041a\u0430\u043a \u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 Git \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445, \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c git stash \u043f\u0440\u044f\u0447\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0445 \u0432\u0435\u0440\u043d\u0443\u0442\u044c. \u0414\u043b\u044f \u0447\u0435\u0433\u043e \u043d\u0443\u0436\u0435\u043d git stash \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0430\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b git stash \u043c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u2014 \u0432 \u0441\u0442\u0435\u043a, \u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443. \u0412\u0441\u0451, \u0447\u0442\u043e \u0432\u044b \u043f\u0440\u044f\u0447\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e git stash , \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043e\u0442\u0442\u0443\u0434\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0442\u0443\u0434\u0430 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0438 \u2014 \u0432\u0430\u0448\u0438 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb (\u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 git stash Git stash \u0427\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: git stash Git stash save \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash save \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 git stash, \u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. git stash save \"\u041a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" Git stash \u043d\u0435 \u043f\u0440\u044f\u0447\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0427\u0442\u043e\u0431\u044b \u0438\u0445 \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0446\u0438\u044f --include-untracked (\u0438\u043b\u0438 -u): git stash save -u Git stash list \u041a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git stash \u0438\u043b\u0438 git stash save \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432 \u0441\u0442\u0435\u043a). \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash list \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u044f\u0442\u0430\u043d\u0438\u0439: git stash list \u0421\u0430\u043c\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432\u043d\u0438\u0437\u0443 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0430\u043c\u044b\u0435 \u0441\u0432\u0435\u0436\u0438\u0435 \u0441\u0432\u0435\u0440\u0445\u0443. \u041a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 \u0438\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, stash@{0} Git stash apply \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply \u0431\u0435\u0440\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u0441\u0432\u0435\u0436\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}) \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u042d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0432\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u043f\u0430\u0442\u0447, \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0442\u0447\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0430\u0448\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash apply \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: git stash apply stash@ { 1 } Git stash pop \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash pop \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply, \u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. git stash pop \u0411\u044b\u043b\u043e: \u0421\u0442\u0430\u043b\u043e \u043f\u043e\u0441\u043b\u0435 git stash pop : \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash pop stash@ { 1 } Git stash show \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash show \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash show \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f (\u0434\u043b\u044f stash@{0}): \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 diff, \u0442\u043e \u0435\u0441\u0442\u044c \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u044e\u0447 -p: git stash show -p \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u043c: git stash show stash@ { 1 } Git stash branch <\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash branch <\u043d\u043e\u0432\u0430\u044f_\u0432\u0435\u0442\u043a\u0430> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435\u043c, \u0438 \u0437\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (\u043a\u0430\u043a git stash pop ). git stash branch new-branch-name \u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash branch new-branch-name stash@ { 1 } Git stash drop \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash drop \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}). git stash drop \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c: git stash drop stash@ { 1 } Git stash clear \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash clear \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f. \u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. git stash clear Source","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 Git stash. \u041a\u0430\u043a \u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 Git"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash","text":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0430\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b git stash \u043c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u2014 \u0432 \u0441\u0442\u0435\u043a, \u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443. \u0412\u0441\u0451, \u0447\u0442\u043e \u0432\u044b \u043f\u0440\u044f\u0447\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e git stash , \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043e\u0442\u0442\u0443\u0434\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0442\u0443\u0434\u0430 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0438 \u2014 \u0432\u0430\u0448\u0438 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb (\u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 git stash","title":"\u0414\u043b\u044f \u0447\u0435\u0433\u043e \u043d\u0443\u0436\u0435\u043d git stash"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash_1","text":"\u0427\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: git stash","title":"Git stash"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-save","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash save \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 git stash, \u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. git stash save \"\u041a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" Git stash \u043d\u0435 \u043f\u0440\u044f\u0447\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0427\u0442\u043e\u0431\u044b \u0438\u0445 \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0446\u0438\u044f --include-untracked (\u0438\u043b\u0438 -u): git stash save -u","title":"Git stash save"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-list","text":"\u041a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git stash \u0438\u043b\u0438 git stash save \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432 \u0441\u0442\u0435\u043a). \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash list \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u044f\u0442\u0430\u043d\u0438\u0439: git stash list \u0421\u0430\u043c\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432\u043d\u0438\u0437\u0443 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0430\u043c\u044b\u0435 \u0441\u0432\u0435\u0436\u0438\u0435 \u0441\u0432\u0435\u0440\u0445\u0443. \u041a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 \u0438\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, stash@{0}","title":"Git stash list"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-apply","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply \u0431\u0435\u0440\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u0441\u0432\u0435\u0436\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}) \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u042d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0432\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u043f\u0430\u0442\u0447, \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0442\u0447\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0430\u0448\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash apply \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: git stash apply stash@ { 1 }","title":"Git stash apply"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-pop","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash pop \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply, \u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. git stash pop \u0411\u044b\u043b\u043e: \u0421\u0442\u0430\u043b\u043e \u043f\u043e\u0441\u043b\u0435 git stash pop : \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash pop stash@ { 1 }","title":"Git stash pop"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-show","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash show \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash show \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f (\u0434\u043b\u044f stash@{0}): \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 diff, \u0442\u043e \u0435\u0441\u0442\u044c \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u044e\u0447 -p: git stash show -p \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u043c: git stash show stash@ { 1 }","title":"Git stash show"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-branch","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash branch <\u043d\u043e\u0432\u0430\u044f_\u0432\u0435\u0442\u043a\u0430> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435\u043c, \u0438 \u0437\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (\u043a\u0430\u043a git stash pop ). git stash branch new-branch-name \u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash branch new-branch-name stash@ { 1 }","title":"Git stash branch &lt;\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435&gt;"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-drop","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash drop \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}). git stash drop \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c: git stash drop stash@ { 1 }","title":"Git stash drop"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-clear","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash clear \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f. \u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. git stash clear Source","title":"Git stash clear"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/","text":"@Before @BeforeClass @BeforeEach @BeforeAll @Before vs @BeforeClass vs @BeforeEach vs @BeforeAll Learn about the difference between JUnit annotations that can be used to run logic before tests. 1. Introduction In this short tutorial, we're going to explain the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit 4 and 5 \u2013 with practical examples of how to use them. We'll also cover briefly their @After complementary annotations. Let's start with JUnit 4. 2. @Before Methods annotated with the @Before annotation are executed before each test. This is useful when we want to execute some common code before running a test. Let's see an example where we initialize a list and add some values: @RunWith ( JUnit4 . class ) public class BeforeAndAfterAnnotationsUnitTest { private List < String > list ; @Before public void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @After public void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } Notice that we also added another method annotated with @After in order to clear the list after the execution of each test. After that, let's add some tests to check the size of our list: @Test public void whenCheckingListSize_thenSizeEqualsToInit () { LOG . info ( \"executing test\" ); assertEquals ( 2 , list . size ()); list . add ( \"another test\" ); } @Test public void whenCheckingListSizeAgain_thenSizeEqualsToInit () { LOG . info ( \"executing another test\" ); assertEquals ( 2 , list . size ()); list . add ( \"yet another test\" ); } In this case, it's crucial to make sure that test environment is properly set up before running each test since the list is modified during every test execution. If we take a look at the log output we can check that the init and teardown methods were executed once per test: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown 3. @BeforeClass When we want to execute an expensive common operation before each test, it's preferable to execute it only once before running all tests using @BeforeClass . Some examples of common expensive operations are the creation of a database connection or the startup of a server. Let's create a simple test class that simulates the creation of a database connection: @RunWith ( JUnit4 . class ) public class BeforeClassAndAfterClassAnnotationsUnitTest { @BeforeClass public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterClass public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } Notice that these methods have to be static , so they'll be executed before running the tests of the class. As we did before, let's also add some simple tests: @Test public void simpleTest () { LOG . info ( \"simple test\" ); } @Test public void anotherSimpleTest () { LOG . info ( \"another simple test\" ); } This time, if we take a look at the log output we can check that the setup and tearDown methods were executed only once: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection 4. @BeforeEach and @BeforeAll @BeforeEac_h and @BeforeAll_ are the JUnit 5 equivalents of @Before and @BeforeClass . These annotations were renamed with clearer names to avoid confusion. Let's duplicate our previous classes using these new annotations, starting with the @BeforeEach and @AfterEach annotations: @RunWith ( JUnitPlatform . class ) class BeforeEachAndAfterEachAnnotationsUnitTest { private List < String > list ; @BeforeEach void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @AfterEach void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } If we check logs, we can confirm that it works in the same way as with the @Before and @After annotations: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown Finally, let's do the same with the other test class to see the @BeforeAll and @AfterAll annotations in action: @RunWith ( JUnitPlatform . class ) public class BeforeAllAndAfterAllAnnotationsUnitTest { @BeforeAll public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterAll public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } And the output is the same as with the old annotation: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection 5. Conclusion In this article, we showed the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit and when each of them should be used. As always, the full source code of the examples is available over on GitHub . Source","title":"@Before @BeforeClass @BeforeEach @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#before-vs-beforeclass-vs-beforeeach-vs-beforeall","text":"Learn about the difference between JUnit annotations that can be used to run logic before tests.","title":"@Before vs @BeforeClass vs @BeforeEach vs @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#1-introduction","text":"In this short tutorial, we're going to explain the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit 4 and 5 \u2013 with practical examples of how to use them. We'll also cover briefly their @After complementary annotations. Let's start with JUnit 4.","title":"1. Introduction"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#2-before","text":"Methods annotated with the @Before annotation are executed before each test. This is useful when we want to execute some common code before running a test. Let's see an example where we initialize a list and add some values: @RunWith ( JUnit4 . class ) public class BeforeAndAfterAnnotationsUnitTest { private List < String > list ; @Before public void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @After public void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } Notice that we also added another method annotated with @After in order to clear the list after the execution of each test. After that, let's add some tests to check the size of our list: @Test public void whenCheckingListSize_thenSizeEqualsToInit () { LOG . info ( \"executing test\" ); assertEquals ( 2 , list . size ()); list . add ( \"another test\" ); } @Test public void whenCheckingListSizeAgain_thenSizeEqualsToInit () { LOG . info ( \"executing another test\" ); assertEquals ( 2 , list . size ()); list . add ( \"yet another test\" ); } In this case, it's crucial to make sure that test environment is properly set up before running each test since the list is modified during every test execution. If we take a look at the log output we can check that the init and teardown methods were executed once per test: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown","title":"2. @Before"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#3-beforeclass","text":"When we want to execute an expensive common operation before each test, it's preferable to execute it only once before running all tests using @BeforeClass . Some examples of common expensive operations are the creation of a database connection or the startup of a server. Let's create a simple test class that simulates the creation of a database connection: @RunWith ( JUnit4 . class ) public class BeforeClassAndAfterClassAnnotationsUnitTest { @BeforeClass public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterClass public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } Notice that these methods have to be static , so they'll be executed before running the tests of the class. As we did before, let's also add some simple tests: @Test public void simpleTest () { LOG . info ( \"simple test\" ); } @Test public void anotherSimpleTest () { LOG . info ( \"another simple test\" ); } This time, if we take a look at the log output we can check that the setup and tearDown methods were executed only once: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection","title":"3.\u00a0@BeforeClass"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#4-beforeeach-and-beforeall","text":"@BeforeEac_h and @BeforeAll_ are the JUnit 5 equivalents of @Before and @BeforeClass . These annotations were renamed with clearer names to avoid confusion. Let's duplicate our previous classes using these new annotations, starting with the @BeforeEach and @AfterEach annotations: @RunWith ( JUnitPlatform . class ) class BeforeEachAndAfterEachAnnotationsUnitTest { private List < String > list ; @BeforeEach void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @AfterEach void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } If we check logs, we can confirm that it works in the same way as with the @Before and @After annotations: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown Finally, let's do the same with the other test class to see the @BeforeAll and @AfterAll annotations in action: @RunWith ( JUnitPlatform . class ) public class BeforeAllAndAfterAllAnnotationsUnitTest { @BeforeAll public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterAll public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } And the output is the same as with the old annotation: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection","title":"4.\u00a0@BeforeEach and @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#5-conclusion","text":"In this article, we showed the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit and when each of them should be used. As always, the full source code of the examples is available over on GitHub . Source","title":"5. Conclusion"},{"location":"java/Access%20value%20in%20application.properties%20Spring%20Boot/","text":"Access value in application.properties Spring Boot Spring-boot allows us several methods to provide externalized configurations , you can try using application.yml or yaml files instead of the property file and provide different property files setup according to different environments. We can separate out the properties for each environment into separate yml files under separate spring profiles.Then during deployment you can use : java -jar -Drun.profiles=SpringProfileName to specify which spring profile to use.Note that the yml files should be name like application-{environmentName}.yml for them to be automatically taken up by springboot. Reference : https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-profile-specific-properties To read from the application.yml or property file : The easiest way to read a value from the property file or yml is to use the spring @value annotation.Spring automatically loads all values from the yml to the spring environment , so we can directly use those values from the environment like : @Component public class MySampleBean { @Value ( \"${name}\" ) private String sampleName ; } Or another method that spring provides to read strongly typed beans is as follows: ymca: remote-address: 192.168.1.1 security: username: admin Corresponding POJO to read the yml : @ConfigurationProperties ( \"ymca\" ) public class YmcaProperties { private InetAddress remoteAddress ; private final Security security = new Security (); public boolean isEnabled () { ... } public void setEnabled ( boolean enabled ) { ... } public InetAddress getRemoteAddress () { ... } public void setRemoteAddress ( InetAddress remoteAddress ) { ... } public Security getSecurity () { ... } public static class Security { private String username ; private String password ; public String getUsername () { ... } public void setUsername ( String username ) { ... } public String getPassword () { ... } public void setPassword ( String password ) { ... } } } The above method works well with yml files. Reference: https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html","title":"Access value in application.properties Spring Boot"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/","text":"Change the Default Port in Spring Boot 1. Overview Spring Boot provides sensible defaults for many configuration properties. But we sometimes need to customize these with our case-specific values. And a common use case is changing the default port for the embedded server. In this quick tutorial, we'll cover several ways to achieve this. 2. Using Property Files The fastest and easiest way to customize Spring Boot is by overriding the values of the default properties. For the server port, the property we want to change is server.port . By default, the embedded server starts on port 8080. So, let's see how to provide a different value in an application.properties file : server.port=8081 Now the server will start on port 8081. And we can do the same if we're using an application.yml file: server: port : 8081 Both files are loaded automatically by Spring Boot if placed in the src/main/resources directory of a Maven application. 2.1. Environment-Specific Ports If we have an application deployed in different environments, we may want it to run on different ports on each system. We can easily achieve this by combining the property files approach with Spring profiles. Specifically, we can create a property file for each environment. For example, we'll have an application-dev.properties file with this content: server.port=8081 Then we'll add another application-qa.properties file with a different port: server.port=8082 Now, the property files configuration should be sufficient for most cases. However, there are other options for this goal, so let's explore them as well. 3. Programmatic Configuration We can configure the port programmatically either by setting the specific property when starting the application or by customizing the embedded server configuration. First, let's see how to set the property in the main @SpringBootApplication class: @SpringBootApplication public class CustomApplication { public static void main ( String [] args ) { SpringApplication app = new SpringApplication ( CustomApplication . class ); app . setDefaultProperties ( Collections . singletonMap ( \"server.port\" , \"8083\" )); app . run ( args ); } } Next, to customize the server configuration, we have to implement the WebServerFactoryCustomizer interface: @Component public class ServerPortCustomizer implements WebServerFactoryCustomizer < ConfigurableWebServerFactory > { @Override public void customize ( ConfigurableWebServerFactory factory ) { factory . setPort ( 8086 ); } } Note that this applies to the Spring Boot 2.x version. For Spring Boot 1.x, we can similarly implement the EmbeddedServletContainerCustomizer interface. 4. Using Command-Line Arguments When packaging and running our application as a jar, we can set the server.port argument with the java command: java -jar spring-5.jar --server.port=8083 or by using the equivalent syntax: java -jar -Dserver.port=8083 spring-5.jar 5. Order of Evaluation As a final note, let's look at the order in which these approaches are evaluated by Spring Boot. Basically, the configurations priority is embedded server configuration command-line arguments property files main @SpringBootApplication configuration 6. Conclusion In this article, we saw how to configure the server port in a Spring Boot application. As always, the source code for the examples is available over on GitHub . Source","title":"Change the Default Port in Spring Boot"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#1-overview","text":"Spring Boot provides sensible defaults for many configuration properties. But we sometimes need to customize these with our case-specific values. And a common use case is changing the default port for the embedded server. In this quick tutorial, we'll cover several ways to achieve this.","title":"1. Overview"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#2-using-property-files","text":"The fastest and easiest way to customize Spring Boot is by overriding the values of the default properties. For the server port, the property we want to change is server.port . By default, the embedded server starts on port 8080. So, let's see how to provide a different value in an application.properties file : server.port=8081 Now the server will start on port 8081. And we can do the same if we're using an application.yml file: server: port : 8081 Both files are loaded automatically by Spring Boot if placed in the src/main/resources directory of a Maven application.","title":"2. Using Property Files"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#21-environment-specific-ports","text":"If we have an application deployed in different environments, we may want it to run on different ports on each system. We can easily achieve this by combining the property files approach with Spring profiles. Specifically, we can create a property file for each environment. For example, we'll have an application-dev.properties file with this content: server.port=8081 Then we'll add another application-qa.properties file with a different port: server.port=8082 Now, the property files configuration should be sufficient for most cases. However, there are other options for this goal, so let's explore them as well.","title":"2.1. Environment-Specific Ports"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#3-programmatic-configuration","text":"We can configure the port programmatically either by setting the specific property when starting the application or by customizing the embedded server configuration. First, let's see how to set the property in the main @SpringBootApplication class: @SpringBootApplication public class CustomApplication { public static void main ( String [] args ) { SpringApplication app = new SpringApplication ( CustomApplication . class ); app . setDefaultProperties ( Collections . singletonMap ( \"server.port\" , \"8083\" )); app . run ( args ); } } Next, to customize the server configuration, we have to implement the WebServerFactoryCustomizer interface: @Component public class ServerPortCustomizer implements WebServerFactoryCustomizer < ConfigurableWebServerFactory > { @Override public void customize ( ConfigurableWebServerFactory factory ) { factory . setPort ( 8086 ); } } Note that this applies to the Spring Boot 2.x version. For Spring Boot 1.x, we can similarly implement the EmbeddedServletContainerCustomizer interface.","title":"3. Programmatic Configuration"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#4-using-command-line-arguments","text":"When packaging and running our application as a jar, we can set the server.port argument with the java command: java -jar spring-5.jar --server.port=8083 or by using the equivalent syntax: java -jar -Dserver.port=8083 spring-5.jar","title":"4. Using Command-Line Arguments"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#5-order-of-evaluation","text":"As a final note, let's look at the order in which these approaches are evaluated by Spring Boot. Basically, the configurations priority is embedded server configuration command-line arguments property files main @SpringBootApplication configuration","title":"5. Order of Evaluation"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#6-conclusion","text":"In this article, we saw how to configure the server port in a Spring Boot application. As always, the source code for the examples is available over on GitHub . Source","title":"6. Conclusion"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/","text":"Export & Download Data as CSV File in Spring Boot A Comma-Separated Values (CSV) file is just a simple plain text file that uses a comma as a delimiter to separate values. It stores data in a tabular format where each row consists of one or more fields and each column represents a specific field. These fields are separated by commas, one of the reasons why these files are called comma-separated values . CSV is a widely used data exchange format in the industry due to its simplicity and better integration with existing applications. These files are usually used for exporting and importing large data sets. In this tutorial, we will learn how to export and download the data as a CSV file in a Spring Boot project. Data export (JSON, CSV, PDF, etc.) is a very common feature implemented in many Java enterprise applications. Project Dependencies Since Java does not provide native support for creating and parsing CSV files, we will use OpenCSV 3rd-party library for this purpose. Here is how our build.gradle file looks like: build.gradle plugins { id 'org.springframework.boot' version '2.1.3.RELEASE' id 'java' } apply plugin: 'io.spring.dependency-management' group = 'com.attacomsian' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'com.opencsv:opencsv:4.5' } If you are working with a maven project, make sure you include the following maven dependency to the project's pom.xml file: <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 4.5 </version> </dependency> User Model Here is our User model class that will be used to write to a CSV file. User.java package com.attacomsian.exportcsv.data ; import com.opencsv.bean.CsvBindByName ; import com.opencsv.bean.CsvBindByPosition ; public class User { private long id ; private String name ; private String email ; private String country ; private int age ; public User ( long id , String name , String email , String country , int age ) { this . id = id ; this . name = name ; this . email = email ; this . country = country ; this . age = age ; } } Since we want to generate a CSV file from a list of users and then return it back to the client for downloading, let's create a dummy service that acts as a data source and returns a list of users. UserService.java package com.attacomsian.exportcsv.data ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.List ; @Service public class UserService { public List < User > listUsers () { List < User > users = new ArrayList <> (); users . add ( new User ( 1 , \"Jack Lee\" , \"jack@example.com\" , \"Germany\" , 35 )); users . add ( new User ( 2 , \"Jovan Srovoki\" , \"jovan@srovoki.me\" , \"Russia\" , 21 )); users . add ( new User ( 3 , \"Atta\" , \"atta@gmail.com\" , \"Pakistan\" , 29 )); return users ; } } The UserService above is just for demo purposes. You may want to populate a list of users from the database or from any other source. Generate & Download CSV File Finally, below is a Spring MVC controller class that handles the export and download of data as a CSV file. UserController.java package com.attacomsian.exportcsv.controllers ; import com.attacomsian.exportcsv.data.User ; import com.attacomsian.exportcsv.data.UserService ; import com.opencsv.CSVWriter ; import com.opencsv.bean.ColumnPositionMappingStrategy ; import com.opencsv.bean.StatefulBeanToCsv ; import com.opencsv.bean.StatefulBeanToCsvBuilder ; import org.springframework.http.HttpHeaders ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.GetMapping ; import javax.servlet.http.HttpServletResponse ; @Controller public class UserController { private UserService userService ; public UserController ( UserService userService ) { this . userService = userService ; } @GetMapping ( \"/export-users\" ) public void exportCSV ( HttpServletResponse response ) throws Exception { String filename = \"users.csv\" ; response . setContentType ( \"text/csv\" ); response . setHeader ( HttpHeaders . CONTENT_DISPOSITION , \"attachment; filename=\\\"\" + filename + \"\\\"\" ); StatefulBeanToCsv < User > writer = new StatefulBeanToCsvBuilder < User > ( response . getWriter ()) . withQuotechar ( CSVWriter . NO_QUOTE_CHARACTER ) . withSeparator ( CSVWriter . DEFAULT_SEPARATOR ) . withOrderedResults ( false ) . build (); writer . write ( userService . listUsers ()); } } The above UserController class contains an exportCSV() method that is mapped to /export-users HTTP route and returns a CSV file as attachment for browser to download. This method does the following: Set the response's content type to text/csv . Use HttpHeaders.CONTENT_DISPOSITION to add \"Content-Disposition\" response header that indicates file attachment to the browser. It also sets the attachment file name to users.csv Use response writer ( response.writer() returns an object of type PrintWriter ) to build an instance of StatefulBeanToCsv . Use write() method of StatefulBeanToCsv instance to write a list of users to CSV file. Afterwards, the data is pushed to the client where the browser downloads the attached users.csv file. Running the Application Below is the main application class used for running Spring Boot project: Application.java package com.attacomsian.exportcsv ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun After Spring Boot application is started, open http://localhost:8080/export-users link in your favorite browser to generate and download users.csv file. Here is content of the generated CSV file: users.csv age,country,email,id,name 35,Germany,jack@example.com,1,Jack Lee 21,Russia,jovan@srovoki.me,2,Jovan Srovoki 29,Pakistan,atta@gmail.com,3,Atta Notice the first line. OpenCSV automatically generated column headers using User class members. Another important thing to note is the order of the columns in the CSV file. OpenCSV sorts the column names in ascending order before writing into the CSV file. OpenCSV Columns Ordering There is no built-in functionality in OpenCSV that allows writing bean to CSV with custom column names and ordering. However, using @CsvBindByPosition annotation, you can control the column positions in the generated CSV file. But the downside of this annotation is that it removes column headers from the generated CSV file. public class User { @CsvBindByPosition ( position = 0 ) private long id ; @CsvBindByPosition ( position = 1 ) private String name ; @CsvBindByPosition ( position = 2 ) private String email ; @CsvBindByPosition ( position = 3 ) private String country ; @CsvBindByPosition ( position = 4 ) private int age ; } @CsvBindByPosition specifies a binding between a column number of the CSV file and a field in a bean. This column number is zero-based (means position starts from 0 ). Source code: Download the complete source code from GitHub available under MIT license. Conclusion That's all for explaining the usage of the OpenCSV library to generate and download a CSV file in Spring Boot. If you are not comfortable with using a 3rd-party library, you can write your own CSV writer. Writing a CSV file is quite similar to writing a text file with few exceptions. If you have any questions or feedback, please feel free to send me a tweet . Happy learning Spring Boot \ud83d\ude0d Further Reading If you like this article, don't forget to read the below CSV-related articles: Uploading and Parsing CSV File using Spring Boot Reading and writing CSV files using OpenCSV Reading and writing CSV files using core Java Reading and writing CSV files using Apache Commons CSV How to read and parse a CSV file in Java \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Export & Download Data as CSV File in Spring Boot"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#project-dependencies","text":"Since Java does not provide native support for creating and parsing CSV files, we will use OpenCSV 3rd-party library for this purpose. Here is how our build.gradle file looks like: build.gradle plugins { id 'org.springframework.boot' version '2.1.3.RELEASE' id 'java' } apply plugin: 'io.spring.dependency-management' group = 'com.attacomsian' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'com.opencsv:opencsv:4.5' } If you are working with a maven project, make sure you include the following maven dependency to the project's pom.xml file: <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 4.5 </version> </dependency>","title":"Project Dependencies"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#user-model","text":"Here is our User model class that will be used to write to a CSV file. User.java package com.attacomsian.exportcsv.data ; import com.opencsv.bean.CsvBindByName ; import com.opencsv.bean.CsvBindByPosition ; public class User { private long id ; private String name ; private String email ; private String country ; private int age ; public User ( long id , String name , String email , String country , int age ) { this . id = id ; this . name = name ; this . email = email ; this . country = country ; this . age = age ; } } Since we want to generate a CSV file from a list of users and then return it back to the client for downloading, let's create a dummy service that acts as a data source and returns a list of users. UserService.java package com.attacomsian.exportcsv.data ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.List ; @Service public class UserService { public List < User > listUsers () { List < User > users = new ArrayList <> (); users . add ( new User ( 1 , \"Jack Lee\" , \"jack@example.com\" , \"Germany\" , 35 )); users . add ( new User ( 2 , \"Jovan Srovoki\" , \"jovan@srovoki.me\" , \"Russia\" , 21 )); users . add ( new User ( 3 , \"Atta\" , \"atta@gmail.com\" , \"Pakistan\" , 29 )); return users ; } } The UserService above is just for demo purposes. You may want to populate a list of users from the database or from any other source.","title":"User Model"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#generate-download-csv-file","text":"Finally, below is a Spring MVC controller class that handles the export and download of data as a CSV file. UserController.java package com.attacomsian.exportcsv.controllers ; import com.attacomsian.exportcsv.data.User ; import com.attacomsian.exportcsv.data.UserService ; import com.opencsv.CSVWriter ; import com.opencsv.bean.ColumnPositionMappingStrategy ; import com.opencsv.bean.StatefulBeanToCsv ; import com.opencsv.bean.StatefulBeanToCsvBuilder ; import org.springframework.http.HttpHeaders ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.GetMapping ; import javax.servlet.http.HttpServletResponse ; @Controller public class UserController { private UserService userService ; public UserController ( UserService userService ) { this . userService = userService ; } @GetMapping ( \"/export-users\" ) public void exportCSV ( HttpServletResponse response ) throws Exception { String filename = \"users.csv\" ; response . setContentType ( \"text/csv\" ); response . setHeader ( HttpHeaders . CONTENT_DISPOSITION , \"attachment; filename=\\\"\" + filename + \"\\\"\" ); StatefulBeanToCsv < User > writer = new StatefulBeanToCsvBuilder < User > ( response . getWriter ()) . withQuotechar ( CSVWriter . NO_QUOTE_CHARACTER ) . withSeparator ( CSVWriter . DEFAULT_SEPARATOR ) . withOrderedResults ( false ) . build (); writer . write ( userService . listUsers ()); } } The above UserController class contains an exportCSV() method that is mapped to /export-users HTTP route and returns a CSV file as attachment for browser to download. This method does the following: Set the response's content type to text/csv . Use HttpHeaders.CONTENT_DISPOSITION to add \"Content-Disposition\" response header that indicates file attachment to the browser. It also sets the attachment file name to users.csv Use response writer ( response.writer() returns an object of type PrintWriter ) to build an instance of StatefulBeanToCsv . Use write() method of StatefulBeanToCsv instance to write a list of users to CSV file. Afterwards, the data is pushed to the client where the browser downloads the attached users.csv file.","title":"Generate &amp; Download CSV File"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#running-the-application","text":"Below is the main application class used for running Spring Boot project: Application.java package com.attacomsian.exportcsv ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun After Spring Boot application is started, open http://localhost:8080/export-users link in your favorite browser to generate and download users.csv file. Here is content of the generated CSV file: users.csv age,country,email,id,name 35,Germany,jack@example.com,1,Jack Lee 21,Russia,jovan@srovoki.me,2,Jovan Srovoki 29,Pakistan,atta@gmail.com,3,Atta Notice the first line. OpenCSV automatically generated column headers using User class members. Another important thing to note is the order of the columns in the CSV file. OpenCSV sorts the column names in ascending order before writing into the CSV file.","title":"Running the Application"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#opencsv-columns-ordering","text":"There is no built-in functionality in OpenCSV that allows writing bean to CSV with custom column names and ordering. However, using @CsvBindByPosition annotation, you can control the column positions in the generated CSV file. But the downside of this annotation is that it removes column headers from the generated CSV file. public class User { @CsvBindByPosition ( position = 0 ) private long id ; @CsvBindByPosition ( position = 1 ) private String name ; @CsvBindByPosition ( position = 2 ) private String email ; @CsvBindByPosition ( position = 3 ) private String country ; @CsvBindByPosition ( position = 4 ) private int age ; } @CsvBindByPosition specifies a binding between a column number of the CSV file and a field in a bean. This column number is zero-based (means position starts from 0 ). Source code: Download the complete source code from GitHub available under MIT license.","title":"OpenCSV Columns Ordering"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#conclusion","text":"That's all for explaining the usage of the OpenCSV library to generate and download a CSV file in Spring Boot. If you are not comfortable with using a 3rd-party library, you can write your own CSV writer. Writing a CSV file is quite similar to writing a text file with few exceptions. If you have any questions or feedback, please feel free to send me a tweet . Happy learning Spring Boot \ud83d\ude0d","title":"Conclusion"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#further-reading","text":"If you like this article, don't forget to read the below CSV-related articles: Uploading and Parsing CSV File using Spring Boot Reading and writing CSV files using OpenCSV Reading and writing CSV files using core Java Reading and writing CSV files using Apache Commons CSV How to read and parse a CSV file in Java \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Further Reading"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/","text":"Integration Testing in Spring | Baeldung 1. Overview Integration testing plays an important role in the application development cycle by verifying the end-to-end behavior of a system. In this article, we'll see how we can leverage the Spring MVC test framework in order to write and run integration tests that test controllers without explicitly starting a Servlet container. 2. Preparation Several Maven dependencies are required for running the integration tests we'll use in this article. First and foremost, we'll need the latest junit-jupiter-engine , junit-jupiter-api , and Spring test dependencies: <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-engine </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-api </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.3.3 </version> <scope> test </scope> </dependency> For effective asserting of results, we're going to also use Hamcrest and JSON path : <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-library </artifactId> <version> 2.2 </version> <scope> test </scope> </dependency> <dependency> <groupId> com.jayway.jsonpath </groupId> <artifactId> json-path </artifactId> <version> 2.5.0 </version> <scope> test </scope> </dependency> 3. Spring MVC Test Configuration Let's now introduce how to configure and run the Spring enabled tests. 3.1. Enable Spring in Tests with JUnit 5 JUnit 5 defines an extension interface through which classes can integrate with the JUnit test. We can enable this extension by adding the @ExtendWith annotation to our test classes and specifying the extension class to load . To run the Spring test, we use SpringExtension.class. We also need the @ContextConfiguration annotation to load the context configuration and bootstrap the context that our test will use . Let's have a look: @ExtendWith ( SpringExtension . class ) @ContextConfiguration ( classes = { ApplicationConfig . class }) @WebAppConfiguration public class GreetControllerIntegrationTest { .... } Notice how, in @ContextConfiguration, we provide the ApplicationConfig.class config class, which loads the configuration we need for this particular test. We use a Java configuration class here to specify the context configuration. Similarly, we can use the XML-based configuration: @ContextConfiguration ( locations = { \"\" }) Finally, we also annotate the test with @ WebAppConfiguration , which will load the web application context . By default, it looks for the root web application at path src/main/webapp. We can override this location by simply passing the value attribute: @WebAppConfiguration ( value = \"\" ) 3.2. The WebApplicationContext Object WebApplicationContext provides a web application configuration. It loads all the application beans and controllers into the context. We'll now be able to wire the web application context right into the test: @Autowired private WebApplicationContext webApplicationContext ; 3.3. Mocking Web Context Beans MockMvc provides support for Spring MVC testing. It encapsulates all web application beans and makes them available for testing. Let's see how to use it: private MockMvc mockMvc ; @BeforeEach public void setup () throws Exception { this . mockMvc = MockMvcBuilders . webAppContextSetup ( this . webApplicationContext ). build (); } We initialize the mockMvc object in the @BeforeEach annotated method so that we don't have to initialize it inside every test. 3.4. Verify Test Configuration Let's verify that we're loading the WebApplicationContext object ( webApplicationContext ) properly. We'll also check that the right servletContext is being attached: @Test public void givenWac_whenServletContext_thenItProvidesGreetController () { ServletContext servletContext = webApplicationContext . getServletContext (); Assert . assertNotNull ( servletContext ); Assert . assertTrue ( servletContext instanceof MockServletContext ); Assert . assertNotNull ( webApplicationContext . getBean ( \"greetController\" )); } Notice that we're also checking that a GreetController.java bean exists in the web context. This ensures that Spring beans are loaded properly. At this point, the setup of the integration test is done. Now, let's see how we can test resource methods using the MockMvc object. 4. Writing Integration Tests In this section, we'll go over the basic operations available through the test framework. We'll show how to send requests with path variables and parameters. Also, we'll follow with a few examples that show how to assert that the proper view name is resolved, or that the response body is as expected. The snippets that are shown below use static imports from M ockMvcRequestBuilders or MockMvcResultMatchers classes. 4.1. Verify View Name We can invoke the /homePage endpoint from our test as : http://localhost:8080/spring-mvc-test/ or http://localhost:8080/spring-mvc-test/homePage First, let's see the test code: @Test public void givenHomePageURI_whenMockMVC_thenReturnsIndexJSPViewName () { this . mockMvc . perform ( get ( \"/homePage\" )). andDo ( print ()) . andExpect ( view (). name ( \"index\" )); } Let's break it down: perform() method will call a GET request method, which returns the ResultActions . Using this result, we can have assertion expectations about the response, like its content, HTTP status, or header andDo(print()) will print the request and response. This is helpful to get a detailed view in case of an error andExpect() will expect the provided argument. In our case, we're expecting \u201cindex\u201d to be returned via MockMvcResultMatchers.view() 4.2. Verify Response Body We'll invoke the /greet endpoint from our test as: http://localhost:8080/spring-mvc-test/greet The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } Let's see the test code: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () { MvcResult mvcResult = this . mockMvc . perform ( get ( \"/greet\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); Assert . assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } Let's see exactly what's going on: andExpect(MockMvcResultMatchers.status().isOk()) will verify that response HTTP status is Ok ( 200) . This ensures that the request was successfully executed andExpect(MockMvcResultMatchers.jsonPath(\u201c$.message\u201d).value(\u201cHello World!!!\u201d)) will verify that response content matches with the argument \u201c Hello World!!! \u201c. Here, we used jsonPath , which extracts response content and provides the requested value andReturn() will return the MvcResult object, which is used when we have to verify something that isn't directly achievable by the library. In this case, we've added assertEquals to match the content type of the response that is extracted from the MvcResult object 4. 3. Send GET Request With Path Variable We'll invoke the /greetWithPathVariable/{name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPathVariable/John The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John!!!\" } Let's see the test code: @Test public void givenGreetURIWithPathVariable_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithPathVariable/{name}\" , \"John\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John!!!\" )); } MockMvcRequestBuilders.get(\u201c/greetWithPathVariable/{name}\u201d, \u201cJohn\u201d) will send a request as \u201c /greetWithPathVariable/John \u201c. This becomes easier with respect to readability and knowing what parameters are dynamically set in the URL. Note that we can pass as many path parameters as needed. 4.4. Send GET Request With Query Parameters We'll invoke the /greetWithQueryVariable?name={name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithQueryVariable?name=John%20Doe In this case, the expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Now, let's see the test code: @Test public void givenGreetURIWithQueryParameter_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithQueryVariable\" ) . param ( \"name\" , \"John Doe\" )). andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John Doe!!!\" )); } param(\u201cname\u201d, \u201cJohn Doe\u201d) will append the query parameter in the GET request . This is similar to \u201c /greetWithQueryVariable?name=John%20Doe \u201c. The query parameter can also be implemented using the URI template style: this . mockMvc . perform ( get ( \"/greetWithQueryVariable?name={name}\" , \"John Doe\" )); 4.5. Send POST Request We'll invoke the /greetWithPost endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPost We should obtain as output: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } And our test code is: @Test public void givenGreetURIWithPost_whenMockMVC_thenVerifyResponse () { this . mockMvc . perform ( post ( \"/greetWithPost\" )). andDo ( print ()) . andExpect ( status (). isOk ()). andExpect ( content () . contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )); } MockMvcRequestBuilders.post(\u201c/greetWithPost\u201d) will send the POST request . We can set path variables and query parameters in a similar way as before, whereas form data can be set only via the param() method, similar to query parameters as: http://localhost:8080/spring-mvc-test/greetWithPostAndFormData Then, the data will be: id= 1 ; na me=Joh n % 20 Doe So, we should get: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Let's see our test: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () throws Exception { MvcResult mvcResult = this . mockMvc . perform ( MockMvcRequestBuilders . get ( \"/greet\" )) . andDo ( print ()) . andExpect ( MockMvcResultMatchers . status (). isOk ()) . andExpect ( MockMvcResultMatchers . jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } In the above code snippet, we've added two parameters: id as \u201c1\u201d and name as \u201cJohn Doe\u201d. 5. MockMvc Limitations MockMvc provides an elegant and easy-to-use API to call web endpoints and to inspect and assert their response at the same time. Despite all its benefits, it has a few limitations. First of all, it does use a subclass of the DispatcherServlet to handle test requests. To be more specific, the TestDispatcherServlet is responsible for calling controllers and performing all of the familiar Spring magic. The MockMvc class wraps this TestDispatcherServlet internally. So, every time we send a request using the perform() method, MockMvc will use the underlying TestDispatcherServlet directly. Therefore, there are no real network connections made, and consequently, we won't test the whole network stack while using MockMvc . Also, because Spring prepares a fake web application context to mock the HTTP requests and responses, it may not support all features of a full-blown Spring application . For example, this mock setup does not support HTTP redirections . This may not seem that significant at first. However, Spring Boot handles some errors by redirecting the current request to the /error endpoint. So, if we're using the MockMvc, we may not be able to test some API failures. As an alternative to MockMvc, we can set up a more real application contextand then use RestTemplate or even REST-assured to test our application. For instance, this is easy using Spring Boot: @SpringBootTest ( webEnvironment = DEFINED_PORT ) public class GreetControllerRealIntegrationTest { @Before public void setUp () { RestAssured . port = DEFAULT_PORT ; } @Test public void givenGreetURI_whenSendingReq_thenVerifyResponse () { given (). get ( \"/greet\" ) . then () . statusCode ( 200 ); } } Here, we don't even need to add the @ExtendWith(SpringExtension.class) . This way, every test will make a real HTTP request to the application that listens on a random TCP port. 6. Conclusion In this tutorial, we implemented a few simple Spring-enabled integration tests. We also looked at the WebApplicationContext and MockMvc object creation, which played an important role in calling the endpoints of the application. Looking further, we covered how we can send GET and POST requests with variations of parameter passing and how to verify the HTTP response status, header, and content. As a closing remark, we did also evaluate some limitations of MockMvc. Knowing those limitations can guide us to make an informed decision about how we're going to implement our tests. Finally, the implementation of all these examples and code snippets is available over on GitHub . Get started with Spring 5 and Spring Boot 2, through the Learn Spring course: >> THE COURSE Source","title":"Integration Testing in Spring   Baeldung"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#1-overview","text":"Integration testing plays an important role in the application development cycle by verifying the end-to-end behavior of a system. In this article, we'll see how we can leverage the Spring MVC test framework in order to write and run integration tests that test controllers without explicitly starting a Servlet container.","title":"1. Overview"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#2-preparation","text":"Several Maven dependencies are required for running the integration tests we'll use in this article. First and foremost, we'll need the latest junit-jupiter-engine , junit-jupiter-api , and Spring test dependencies: <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-engine </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-api </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.3.3 </version> <scope> test </scope> </dependency> For effective asserting of results, we're going to also use Hamcrest and JSON path : <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-library </artifactId> <version> 2.2 </version> <scope> test </scope> </dependency> <dependency> <groupId> com.jayway.jsonpath </groupId> <artifactId> json-path </artifactId> <version> 2.5.0 </version> <scope> test </scope> </dependency>","title":"2. Preparation"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#3-spring-mvc-test-configuration","text":"Let's now introduce how to configure and run the Spring enabled tests.","title":"3. Spring MVC Test Configuration"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#31-enable-spring-in-tests-with-junit-5","text":"JUnit 5 defines an extension interface through which classes can integrate with the JUnit test. We can enable this extension by adding the @ExtendWith annotation to our test classes and specifying the extension class to load . To run the Spring test, we use SpringExtension.class. We also need the @ContextConfiguration annotation to load the context configuration and bootstrap the context that our test will use . Let's have a look: @ExtendWith ( SpringExtension . class ) @ContextConfiguration ( classes = { ApplicationConfig . class }) @WebAppConfiguration public class GreetControllerIntegrationTest { .... } Notice how, in @ContextConfiguration, we provide the ApplicationConfig.class config class, which loads the configuration we need for this particular test. We use a Java configuration class here to specify the context configuration. Similarly, we can use the XML-based configuration: @ContextConfiguration ( locations = { \"\" }) Finally, we also annotate the test with @ WebAppConfiguration , which will load the web application context . By default, it looks for the root web application at path src/main/webapp. We can override this location by simply passing the value attribute: @WebAppConfiguration ( value = \"\" )","title":"3.1. Enable Spring in Tests with JUnit 5"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#32-the-webapplicationcontext-object","text":"WebApplicationContext provides a web application configuration. It loads all the application beans and controllers into the context. We'll now be able to wire the web application context right into the test: @Autowired private WebApplicationContext webApplicationContext ;","title":"3.2. The WebApplicationContext Object"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#33-mocking-web-context-beans","text":"MockMvc provides support for Spring MVC testing. It encapsulates all web application beans and makes them available for testing. Let's see how to use it: private MockMvc mockMvc ; @BeforeEach public void setup () throws Exception { this . mockMvc = MockMvcBuilders . webAppContextSetup ( this . webApplicationContext ). build (); } We initialize the mockMvc object in the @BeforeEach annotated method so that we don't have to initialize it inside every test.","title":"3.3. Mocking Web Context Beans"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#34-verify-test-configuration","text":"Let's verify that we're loading the WebApplicationContext object ( webApplicationContext ) properly. We'll also check that the right servletContext is being attached: @Test public void givenWac_whenServletContext_thenItProvidesGreetController () { ServletContext servletContext = webApplicationContext . getServletContext (); Assert . assertNotNull ( servletContext ); Assert . assertTrue ( servletContext instanceof MockServletContext ); Assert . assertNotNull ( webApplicationContext . getBean ( \"greetController\" )); } Notice that we're also checking that a GreetController.java bean exists in the web context. This ensures that Spring beans are loaded properly. At this point, the setup of the integration test is done. Now, let's see how we can test resource methods using the MockMvc object.","title":"3.4. Verify Test Configuration"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#4-writing-integration-tests","text":"In this section, we'll go over the basic operations available through the test framework. We'll show how to send requests with path variables and parameters. Also, we'll follow with a few examples that show how to assert that the proper view name is resolved, or that the response body is as expected. The snippets that are shown below use static imports from M ockMvcRequestBuilders or MockMvcResultMatchers classes.","title":"4. Writing Integration Tests"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#41-verify-view-name","text":"We can invoke the /homePage endpoint from our test as : http://localhost:8080/spring-mvc-test/ or http://localhost:8080/spring-mvc-test/homePage First, let's see the test code: @Test public void givenHomePageURI_whenMockMVC_thenReturnsIndexJSPViewName () { this . mockMvc . perform ( get ( \"/homePage\" )). andDo ( print ()) . andExpect ( view (). name ( \"index\" )); } Let's break it down: perform() method will call a GET request method, which returns the ResultActions . Using this result, we can have assertion expectations about the response, like its content, HTTP status, or header andDo(print()) will print the request and response. This is helpful to get a detailed view in case of an error andExpect() will expect the provided argument. In our case, we're expecting \u201cindex\u201d to be returned via MockMvcResultMatchers.view()","title":"4.1. Verify View Name"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#42-verify-response-body","text":"We'll invoke the /greet endpoint from our test as: http://localhost:8080/spring-mvc-test/greet The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } Let's see the test code: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () { MvcResult mvcResult = this . mockMvc . perform ( get ( \"/greet\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); Assert . assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } Let's see exactly what's going on: andExpect(MockMvcResultMatchers.status().isOk()) will verify that response HTTP status is Ok ( 200) . This ensures that the request was successfully executed andExpect(MockMvcResultMatchers.jsonPath(\u201c$.message\u201d).value(\u201cHello World!!!\u201d)) will verify that response content matches with the argument \u201c Hello World!!! \u201c. Here, we used jsonPath , which extracts response content and provides the requested value andReturn() will return the MvcResult object, which is used when we have to verify something that isn't directly achievable by the library. In this case, we've added assertEquals to match the content type of the response that is extracted from the MvcResult object","title":"4.2. Verify Response Body"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#43-send-get-request-with-path-variable","text":"We'll invoke the /greetWithPathVariable/{name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPathVariable/John The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John!!!\" } Let's see the test code: @Test public void givenGreetURIWithPathVariable_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithPathVariable/{name}\" , \"John\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John!!!\" )); } MockMvcRequestBuilders.get(\u201c/greetWithPathVariable/{name}\u201d, \u201cJohn\u201d) will send a request as \u201c /greetWithPathVariable/John \u201c. This becomes easier with respect to readability and knowing what parameters are dynamically set in the URL. Note that we can pass as many path parameters as needed.","title":"4.3. Send GET Request With Path Variable"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#44-send-get-request-with-query-parameters","text":"We'll invoke the /greetWithQueryVariable?name={name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithQueryVariable?name=John%20Doe In this case, the expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Now, let's see the test code: @Test public void givenGreetURIWithQueryParameter_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithQueryVariable\" ) . param ( \"name\" , \"John Doe\" )). andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John Doe!!!\" )); } param(\u201cname\u201d, \u201cJohn Doe\u201d) will append the query parameter in the GET request . This is similar to \u201c /greetWithQueryVariable?name=John%20Doe \u201c. The query parameter can also be implemented using the URI template style: this . mockMvc . perform ( get ( \"/greetWithQueryVariable?name={name}\" , \"John Doe\" ));","title":"4.4. Send GET Request With Query Parameters"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#45-send-post-request","text":"We'll invoke the /greetWithPost endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPost We should obtain as output: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } And our test code is: @Test public void givenGreetURIWithPost_whenMockMVC_thenVerifyResponse () { this . mockMvc . perform ( post ( \"/greetWithPost\" )). andDo ( print ()) . andExpect ( status (). isOk ()). andExpect ( content () . contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )); } MockMvcRequestBuilders.post(\u201c/greetWithPost\u201d) will send the POST request . We can set path variables and query parameters in a similar way as before, whereas form data can be set only via the param() method, similar to query parameters as: http://localhost:8080/spring-mvc-test/greetWithPostAndFormData Then, the data will be: id= 1 ; na me=Joh n % 20 Doe So, we should get: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Let's see our test: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () throws Exception { MvcResult mvcResult = this . mockMvc . perform ( MockMvcRequestBuilders . get ( \"/greet\" )) . andDo ( print ()) . andExpect ( MockMvcResultMatchers . status (). isOk ()) . andExpect ( MockMvcResultMatchers . jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } In the above code snippet, we've added two parameters: id as \u201c1\u201d and name as \u201cJohn Doe\u201d.","title":"4.5. Send POST Request"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#5-mockmvc-limitations","text":"MockMvc provides an elegant and easy-to-use API to call web endpoints and to inspect and assert their response at the same time. Despite all its benefits, it has a few limitations. First of all, it does use a subclass of the DispatcherServlet to handle test requests. To be more specific, the TestDispatcherServlet is responsible for calling controllers and performing all of the familiar Spring magic. The MockMvc class wraps this TestDispatcherServlet internally. So, every time we send a request using the perform() method, MockMvc will use the underlying TestDispatcherServlet directly. Therefore, there are no real network connections made, and consequently, we won't test the whole network stack while using MockMvc . Also, because Spring prepares a fake web application context to mock the HTTP requests and responses, it may not support all features of a full-blown Spring application . For example, this mock setup does not support HTTP redirections . This may not seem that significant at first. However, Spring Boot handles some errors by redirecting the current request to the /error endpoint. So, if we're using the MockMvc, we may not be able to test some API failures. As an alternative to MockMvc, we can set up a more real application contextand then use RestTemplate or even REST-assured to test our application. For instance, this is easy using Spring Boot: @SpringBootTest ( webEnvironment = DEFINED_PORT ) public class GreetControllerRealIntegrationTest { @Before public void setUp () { RestAssured . port = DEFAULT_PORT ; } @Test public void givenGreetURI_whenSendingReq_thenVerifyResponse () { given (). get ( \"/greet\" ) . then () . statusCode ( 200 ); } } Here, we don't even need to add the @ExtendWith(SpringExtension.class) . This way, every test will make a real HTTP request to the application that listens on a random TCP port.","title":"5. MockMvc Limitations"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#6-conclusion","text":"In this tutorial, we implemented a few simple Spring-enabled integration tests. We also looked at the WebApplicationContext and MockMvc object creation, which played an important role in calling the endpoints of the application. Looking further, we covered how we can send GET and POST requests with variations of parameter passing and how to verify the HTTP response status, header, and content. As a closing remark, we did also evaluate some limitations of MockMvc. Knowing those limitations can guide us to make an informed decision about how we're going to implement our tests. Finally, the implementation of all these examples and code snippets is available over on GitHub .","title":"6. Conclusion"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#get-started-with-spring-5-and-spring-boot-2-through-the-learn-spring-course","text":">> THE COURSE Source","title":"Get started with Spring 5 and Spring Boot 2, through the Learn Spring course:"},{"location":"java/Java%20Stream%20API/","text":"Java Stream API \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e Java 8 \u0432\u044b\u0448\u043b\u0430 \u0443\u0436\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u0430\u0432\u043d\u043e, \u0434\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0432\u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0435\u0451 \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0433\u043e-\u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441 Java 7 \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 Java 6, \u043a\u043e\u0433\u043e-\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 GWT, \u043a\u0442\u043e-\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u043e\u0434 Android \u0438 \u043d\u0435 \u0445\u043e\u0447\u0435\u0442 \u0438\u043b\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043b\u044f\u043c\u0431\u0434 \u0438 Stream Api. \u041e\u0434\u043d\u0430\u043a\u043e \u0437\u043d\u0430\u043d\u0438\u0435 \u043b\u044f\u043c\u0431\u0434 \u0438 Stream Api \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 Java \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u043d\u0443 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043d\u0430 \u043f\u0440\u043e\u0435\u043a\u0442 \u0433\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Java 8. \u042f \u0445\u043e\u0442\u0435\u043b \u0431\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0430\u043c \u043a\u0440\u0430\u0442\u043a\u0443\u044e \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0443 \u043f\u043e Stream Api \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441 \u043d\u043e\u0432\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c. \u0417\u043d\u0430\u043d\u0438\u044f \u043b\u044f\u043c\u0431\u0434 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f (\u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u043b\u0441\u044f \u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u0431\u044b\u043b\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e), \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u043d\u0438\u044f Java \u0438 \u0432\u044b\u0448\u0435. \u0422\u0430\u043a\u0436\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430, \u0441\u0442\u0430\u0442\u044c\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430 \u0438\u043b\u0438 \u0438\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c Java Stream Api. \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u0430\u043d\u043e \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0430\u0442\u044c\u0438. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Stream Api Stream API \u044d\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435. \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e stream \u0432 Java 8 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438, \u043d\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. Stream Api \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u0438\u043b\u0435 SQL, \u0442\u043e \u0435\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0435\u0448\u0430\u043b\u0430\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c: Integer sumOddOld = 0; for(Integer i: collection) { if(i % 2 != 0) { sumOddOld += i; } } \u0422\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream Api \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435: Integer sumOdd = collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0); \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, Stream Api \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0448\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043b\u0438\u0448\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0432 stream() \u043d\u0430 parallelStream() \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u043e\u0433\u043e \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u043a\u043e\u0434\u0430, \u0442.\u0435. Integer sumOdd = collection.parallelStream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0); \u0423\u0436\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c, \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u0438\u0445 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u043e\u0432, \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0439, \u0440\u0438\u0441\u043a\u043e\u0432 \u0432\u0437\u0430\u0438\u043c\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a \u0438 \u0442.\u043f. \u041e\u0431\u0449\u0435\u0435 \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435 '\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a' \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u043d\u0430\u0447\u0430\u043b\u0430, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 stream \u0432 Java 8. I. \u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0421\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430 \u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 1. \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection. stream () <br>Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\");<br> Stream<String> streamFromCollection = collection.stream(); <br> 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Stream.of ( \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351 ,\u2026 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435N ) <br>Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); <br> 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Arrays.stream ( \u043c\u0430\u0441\u0441\u0438\u0432 ) <br>String[] array = {\"a1\",\"a2\",\"a3\"}; <br> Stream<String> streamFromArrays = Arrays.stream(array); <br> 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0441\u0442\u0440\u0438\u043c\u0435) Files.lines ( \u043f\u0443\u0442\u044c_\u043a_\u0444\u0430\u0439\u043b\u0443 ) <br>Stream<String> streamFromFiles = Files.lines(Paths.get(\"file.txt\")) <br> 5. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u00ab\u0441\u0442\u0440\u043e\u043a\u0430\u00bb. chars () <br>IntStream streamFromString = \"123\".chars() <br> 6. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.builder Stream. builder (). add (...).... build () <br>Stream.builder().add(\"a1\").add(\"a2\").add(\"a3\").build() <br> 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 collection. parallelStream () <br>Stream<String> stream = collection.parallelStream(); <br> 8. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.iterate Stream.iterate ( \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435_\u0443\u0441\u043b\u043e\u0432\u0438\u0435 , \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 1) <br> 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.generate Stream.generate ( \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\") <br> \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0432\u0441\u0435 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0441\u043b\u0443\u0436\u0430\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432, \u0432 iterate \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e, \u0442\u043e \u0435\u0441\u0442\u044c Stream.iterate(1, n -> n + 1) \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 1, 2, 3, 4,\u2026 N. Stream.generate \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u00aba1\u00bb. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 n -> n + 1, \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Integer func(Integer n) { return n+1;}, \u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 () -> \u00aba1\u00bb \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f String func() { return \u00aba1\u00bb;} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github 'e System.out.println(\"Test buildStream start\"); Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); System.out.println(\"streamFromValues = \" + streamFromValues.collect(Collectors.toList())); String[] array = {\"a1\",\"a2\",\"a3\"}; Stream<String> streamFromArrays = Arrays.stream(array); System.out.println(\"streamFromArrays = \" + streamFromArrays.collect(Collectors.toList())); Stream<String> streamFromArrays1 = Stream.of(array); System.out.println(\"streamFromArrays1 = \" + streamFromArrays1.collect(Collectors.toList())); File file = new File(\"1.tmp\"); file.deleteOnExit(); PrintWriter out = new PrintWriter(file); out.println(\"a1\"); out.println(\"a2\"); out.println(\"a3\"); out.close(); Stream<String> streamFromFiles = Files.lines(Paths.get(file.getAbsolutePath())); System.out.println(\"streamFromFiles = \" + streamFromFiles.collect(Collectors.toList())); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\"); Stream<String> streamFromCollection = collection.stream(); System.out.println(\"streamFromCollection = \" + streamFromCollection.collect(Collectors.toList())); IntStream streamFromString = \"123\".chars(); System.out.print(\"streamFromString = \"); streamFromString.forEach((e)->System.out.print(e + \" , \")); System.out.println(); Stream.Builder<String> builder = Stream.builder(); Stream<String> streamFromBuilder = builder.add(\"a1\").add(\"a2\").add(\"a3\").build(); System.out.println(\"streamFromBuilder = \" + streamFromBuilder.collect((Collectors.toList()))); Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 2); System.out.println(\"streamFromIterate = \" + streamFromIterate.limit(3).collect(Collectors.toList())); Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\"); System.out.println(\"streamFromGenerate = \" + streamFromGenerate.limit(3).collect(Collectors.toList())); Stream<String> streamEmpty = Stream.empty(); System.out.println(\"streamEmpty = \" + streamEmpty.collect(Collectors.toList())); Stream<String> parallelStream = collection.parallelStream(); System.out.println(\"parallelStream = \" + parallelStream.collect(Collectors.toList())); II. \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 Java Stream API \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: 1. \u041a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 stream, \u0442\u043e \u0435\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043a\u0430\u043a builder, 2. \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b, \u043e\u0431\u044a\u0435\u043a\u0442\u044b, Optional \u0438 \u0442.\u0434. \u041e \u0442\u043e\u043c \u0447\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b 2.1 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 filter \u041e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e collection.stream().filter(\u00aba1\u00bb::equals).count() skip \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c N \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().skip(collection.size() \u2014 1).findFirst().orElse(\u00ab1\u00bb) distinct \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0438\u043c \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 (\u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 equals) collection.stream().distinct().collect(Collectors.toList()) map \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) peek \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0440\u0438\u043c, \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(\",\" + e)). collect(Collectors.toList()) limit \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().limit(2).collect(Collectors.toList()) sorted \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043b\u0438\u0431\u043e \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043b\u0438\u0431\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u044f Comparator collection.stream().sorted().collect(Collectors.toList()) mapToInt , mapToDouble , mapToLong \u0410\u043d\u0430\u043b\u043e\u0433 map, \u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c (\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432) collection.stream().mapToInt((s) -> Integer.parseInt(s)).toArray() flatMap , flatMapToInt , flatMapToDouble , flatMapToLong \u041f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 map, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) 2.2 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 findFirst \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findFirst().orElse(\u00ab1\u00bb) findAny \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findAny().orElse(\u00ab1\u00bb) collect \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) count \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 collection.stream().filter(\u00aba1\u00bb::equals).count() anyMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().anyMatch(\u00aba1\u00bb::equals) noneMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().noneMatch(\u00aba8\u00bb::equals) allMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) min \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().min(String::compareTo).get() max \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().max(String::compareTo).get() forEach \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f set.stream().forEach((p) -> p.append(\"_1\")); forEachOrdered \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); toArray \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).toArray(String[]::new); reduce \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b findFirst, findAny, anyMatch \u044d\u0442\u043e short-circuiting \u043c\u0435\u0442\u043e\u0434\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u0430 \u043d\u0435 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c. 2.3 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 sum \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).sum() average \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).average() mapToObj \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0439 intStream.mapToObj((id) -> new Key(id)).toArray() 2.4 \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 isParallel \u0423\u0437\u043d\u0430\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c parallel \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f sequential \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e, \u043c\u0435\u0442\u043e\u0434\u043e\u0432 parallel \u0438 sequential \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438. \u0422\u0430\u043a \u0436\u0435 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0442\u043e \u0435\u0441\u0442\u044c: collection.stream(). peek(...). parallel(). map(...). sequential(). reduce(...) \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0434\u043b\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0434\u043e\u043b\u0433\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b, \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439), \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 c \u043e\u0434\u043d\u0438\u043c \u043f\u0443\u043b\u043e\u043c fork/join \u0438 \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0432 JVM \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043f\u0443\u043b\u0435, \u0442.\u0435. \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u0438\u0434\u0435\u0442 \u043d\u0430 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u044b, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b. III. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438. 3.1 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f filter, findFirst, findAny, skip, limit \u0438 count \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b filter, findFirst, findAny, skip \u0438 count: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u00aba1\u00bb collection.stream().filter(\u00aba1\u00bb::equals).count() 2 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 0, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().findFirst().orElse(\u00ab0\u00bb) a1 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u00abempty\u00bb, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().skip(collection.size() \u2014 1).findAny().orElse(\u00abempty\u00bb) a1 \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u044b\u0439 \u00aba3\u00bb \u0438\u043b\u0438 \u043a\u0438\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 collection.stream().filter(\u00aba3\u00bb::equals).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 collection.stream().skip(2).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e collection.stream().skip(1).limit(2).toArray() [a2, a3] \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) [a1, a1] \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 , \u0447\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b findFirst \u0438 findAny \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f Optional, \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0432 Java 8, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c NullPointerException. \u041c\u0435\u0442\u043e\u0434 filter \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043b\u0438\u0448\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 \u043c\u0435\u0442\u043e\u0434 skip \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u00aba3\u00bb::equals \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return \u00aba3\u00bb.equals(s);}, \u0430 (s) -> s.contains(\u00ab1\u00bb) \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return s.contains(\u00ab1\u00bb);} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0443\u0436\u0447\u0438\u043d-\u0432\u043e\u0435\u043d\u043d\u043e\u043e\u0431\u044f\u0437\u0430\u043d\u043d\u044b\u0445 (\u043e\u0442 18 \u0434\u043e 27 \u043b\u0435\u0442) peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()) [{name='\u041f\u0435\u0442\u044f', age=23, sex=MAN}] \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble() 36.0 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (\u0442.\u0435. \u043e\u0442 18 \u043b\u0435\u0442 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0432\u044b\u0445\u043e\u0434\u044f\u0442 \u0432 55 \u043b\u0435\u0442, \u0430 \u043c\u0443\u0436\u0447\u0438\u043d\u0430 \u0432 60) peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) | (p.getSex() == Sex.MAN && p.getAge() < 60)).count() 2 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e: \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 private static void testFilterAndCount() { System.out.println(); System.out.println(\"Test filter and count start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); long count = collection.stream().filter(\"a1\"::equals).count(); System.out.println(\"count = \" + count); List<String> select = collection.stream().filter((s) -> s.contains(\"1\")).collect(Collectors.toList()); System.out.println(\"select = \" + select); List<People> militaryService = peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()); System.out.println(\"militaryService = \" + militaryService); double manAverageAge = peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble(); System.out.println(\"manAverageAge = \" + manAverageAge); long peopleHowCanWork = peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) || (p.getSex() == Sex.MAN && p.getAge() < 60)).count(); System.out.println(\"peopleHowCanWork = \" + peopleHowCanWork); } private static void testFindFirstSkipCount() { Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.println(\"Test findFirst and skip start\"); String first = collection.stream().findFirst().orElse(\"1\"); System.out.println(\"first = \" + first); String last = collection.stream().skip(collection.size() - 1).findAny().orElse(\"1\"); System.out.println(\"last = \" + last ); String find = collection.stream().filter(\"a3\"::equals).findFirst().get(); System.out.println(\"find = \" + find); String third = collection.stream().skip(2).findFirst().get(); System.out.println(\"third = \" + third); System.out.println(); System.out.println(\"Test collect start\"); List<String> select = collection.stream().filter((s) -> s.contains(\"1\")).collect(Collectors.toList()); System.out.println(\"select = \" + select); } private static void testLimit() { System.out.println(); System.out.println(\"Test limit start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); List<String> limit = collection.stream().limit(2).collect(Collectors.toList()); System.out.println(\"limit = \" + limit); List<String> fromTo = collection.stream().skip(1).limit(2).collect(Collectors.toList()); System.out.println(\"fromTo = \" + fromTo); String last = collection.stream().skip(collection.size() - 1).findAny().orElse(\"1\"); System.out.println(\"last = \" + last ); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } } 3.2 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f distinct \u041c\u0435\u0442\u043e\u0434 distinct \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 stream \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 list) \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u0435\u043d, \u0434\u043b\u044f \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 Collection ordered = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb) \u0438 Collection nonOrdered = new HashSet<>(ordered). \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 nonOrdered.stream().distinct().collect(Collectors.toList()) [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 ordered.stream().distinct().collect(Collectors.toList()); [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: 1. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 distinct \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d equals, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c hashCode \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c equals/hashCode (\u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0447\u0442\u043e\u0431\u044b hashCode \u0434\u043b\u044f \u0432\u0441\u0435\u0445 equals \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435), \u0438\u043d\u0430\u0447\u0435 distinct \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 HashSet/HashMap), 2. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0438 \u0432\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u2014 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0440\u0438\u043c \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c unordered(), \u0430 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c distinct(), \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u0438 distinct() \u043d\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043f\u0440\u0438 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u043c, \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testDistinct() { System.out.println(); System.out.println(\"Test distinct start\"); Collection<String> ordered = Arrays.asList(\"a1\", \"a2\", \"a2\", \"a3\", \"a1\", \"a2\", \"a2\"); Collection<String> nonOrdered = new HashSet<>(ordered); List<String> distinct = nonOrdered.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinct = \" + distinct); List<String> distinctOrdered = ordered.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinctOrdered = \" + distinctOrdered); } 3.3 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (anyMatch, allMatch, noneMatch) \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba1\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba1\u00bb::equals) true \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba8\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba8\u00bb::equals) false \u041d\u0430\u0439\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u00ab1\u00bb \u0443 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) false \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u00aba7\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().noneMatch(\u00aba7\u00bb::equals) true \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMatch() { System.out.println(); System.out.println(\"Test anyMatch, allMatch, noneMatch start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); boolean isAnyOneTrue = collection.stream().anyMatch(\"a1\"::equals); System.out.println(\"anyOneTrue \" + isAnyOneTrue); boolean isAnyOneFalse = collection.stream().anyMatch(\"a8\"::equals); System.out.println(\"anyOneFlase \" + isAnyOneFalse); boolean isAll = collection.stream().allMatch((s) -> s.contains(\"1\")); System.out.println(\"isAll \" + isAll); boolean isNotEquals = collection.stream().noneMatch(\"a7\"::equals); System.out.println(\"isNotEquals \" + isNotEquals); } 3.4 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Map \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (map, mapToInt, FlatMap, FlatMapToInt) \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1 = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb) \u0438 collection2 = Arrays.asList(\u00ab1,2,0\u00bb, \u00ab4,5\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \"_1\" \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) [a1_1, a2_1, a3_1, a1_1] \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b (int[]) collection1.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray() [1, 2, 3, 1] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u0438\u0437 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection2.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) [1, 2, 0, 4, 5] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e collection2.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum() 12 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0432\u0441\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0442\u0438\u043f\u0430 (\u043a\u043b\u0430\u0441\u0441\u0430), \u0442\u043e \u0435\u0441\u0442\u044c map \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u0430\u0442\u044c Stream \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Integer \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u043b\u044e\u0434\u0435\u0439 People, \u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Office, \u0433\u0434\u0435 \u044d\u0442\u0438 \u043b\u044e\u0434\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0438 \u0442.\u043f., flatMap (flatMapToInt \u0438 \u0442.\u043f.) \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0441 \u043e\u0434\u043d\u0438\u043c, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u0441\u043c. \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430). \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMap() { System.out.println(); System.out.println(\"Test map start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); List<String> transform = collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()); System.out.println(\"transform = \" + transform); List<Integer> number = collection.stream().map((s) -> Integer.parseInt(s.substring(1))).collect(Collectors.toList()); System.out.println(\"number = \" + number); } private static void testMapToInt() { System.out.println(); System.out.println(\"Test mapToInt start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); int[] number = collection.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray(); System.out.println(\"number = \" + Arrays.toString(number)); } private static void testFlatMap() { System.out.println(); System.out.println(\"Test flat map start\"); Collection<String> collection = Arrays.asList(\"1,2,0\", \"4,5\"); String[] number = collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new); System.out.println(\"number = \" + Arrays.toString(number)); } private static void testFlatMapToInt() { System.out.println(); System.out.println(\"Test flat map start\"); Collection<String> collection = Arrays.asList(\"1,2,0\", \"4,5\"); int sum = collection.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum(); System.out.println(\"sum = \" + sum); } 3.5 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Sorted \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba4\u00bb, \u00aba3\u00bb, \u00aba2\u00bb, \u00aba1\u00bb, \u00aba4\u00bb) \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043b\u044e\u0434\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0430 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 collection.stream().sorted().collect(Collectors.toList()) [a1, a1, a2, a3, a4, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()) [a4, a4, a3, a2, a1, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted().distinct().collect(Collectors.toList()) [a1, a2, a3, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()) [a4, a3, a2, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()) [{'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}, {'\u0412\u0430\u0441\u044f'}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u043f\u043e\u043b\u0443, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex()? o1.getSex(). compareTo(o2.getSex()): o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()) [{'\u0412\u0430\u0441\u044f'}, {'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}] \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testSorted() { System.out.println(); System.out.println(\"Test sorted start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a4\", \"a3\", \"a2\", \"a1\", \"a4\"); List<String> sorted = collection.stream().sorted().collect(Collectors.toList()); System.out.println(\"sorted = \" + sorted); List<String> sortedDistinct = collection.stream().sorted().distinct().collect(Collectors.toList()); System.out.println(\"sortedDistinct = \" + sortedDistinct); List<String> sortedReverse = collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()); System.out.println(\"sortedReverse = \" + sortedReverse); List<String> distinctReverse = collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()); System.out.println(\"distinctReverse = \" + distinctReverse); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); Collection<People> byName = peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()); System.out.println(\"byName = \" + byName); Collection<People> bySexAndAge = peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex() ? o1.getSex(). compareTo(o2.getSex()) : o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()); System.out.println(\"bySexAndAge = \" + bySexAndAge); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } } 3.6 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Max \u0438 Min \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 Peoples \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u043e Sorted \u0438 Filter \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().max(String::compareTo).get() a3 \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().min(String::compareTo).get() a1 \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447', age=69, sex=MAN} \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0412\u0430\u0441\u044f', age=16, sex=MAN} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMinMax() { System.out.println(); System.out.println(\"Test min and max start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); String max = collection.stream().max(String::compareTo).get(); System.out.println(\"max \" + max); String min = collection.stream().min(String::compareTo).get(); System.out.println(\"min \" + min); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); People older = peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get(); System.out.println(\"older \" + older); People younger = peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get(); System.out.println(\"younger \" + younger); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } } 3.7 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ForEach \u0438 Peek \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041e\u0431\u0435 ForEach \u0438 Peek \u043f\u043e \u0441\u0443\u0442\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435, \u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e ForEach \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043e\u043d\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a Peek \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u0430\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f: Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); \u0418 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \"_new\", \u0442\u043e \u0434\u043b\u044f ForEach \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); \u0430 \u0434\u043b\u044f peek \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 List<StringBuilder> newList = list.stream().peek((p) -> p.append(\"_new\")).collect(Collectors.toList()); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testForEach() { System.out.println(); System.out.println(\"For each start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.print(\"forEach = \"); collection.stream().map(String::toUpperCase).forEach((e) -> System.out.print(e + \",\")); System.out.println(); Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); list.stream().forEachOrdered((p) -> p.append(\"_new\")); System.out.println(\"forEachOrdered = \" + list); } private static void testPeek() { System.out.println(); System.out.println(\"Test peek start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.print(\"peak1 = \"); List<String> peek = collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(e + \",\")). collect(Collectors.toList()); System.out.println(); System.out.println(\"peek2 = \" + peek); Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); List<StringBuilder> newList = list.stream().peek((p) -> p.append(\"_new\")).collect(Collectors.toList()); System.out.println(\"newList = \" + newList); } 3.8 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Reduce \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u041c\u0435\u0442\u043e\u0434 reduce \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 (\u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0443\u043c\u043c\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.), \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0448\u0430\u0433\u0430\u0445 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4, 2) \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f reduce. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c 0 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) 12 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u043b\u0438 -1 collection.stream().reduce(Integer::max).orElse(-1) 4 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 0 collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0) 4 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testReduce() { System.out.println(); System.out.println(\"Test reduce start\"); Collection<Integer> collection = Arrays.asList(1, 2, 3, 4, 2); Integer sum = collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumOld = 0; for(Integer i: collection) { sumOld += i; } System.out.println(\"sum = \" + sum + \" : \" + sumOld); Integer max1 = collection.stream().reduce((s1, s2) -> s1 > s2 ? s1 : s2).orElse(0); Integer max2 = collection.stream().reduce(Integer::max).orElse(0); Integer maxOld = null; for(Integer i: collection) { maxOld = maxOld != null && maxOld > i? maxOld: i; } maxOld = maxOld == null? 0 : maxOld; System.out.println(\"max = \" + max1 + \" : \" + max2 + \" : \" + maxOld); Integer min = collection.stream().reduce((s1, s2) -> s1 < s2 ? s1 : s2).orElse(0); Integer minOld = null; for(Integer i: collection) { minOld = minOld != null && minOld < i? minOld: i; } minOld = minOld == null? 0 : minOld; System.out.println(\"min = \" + min+ \" : \" + minOld); Integer last = collection.stream().reduce((s1, s2) -> s2).orElse(0); Integer lastOld = null; for(Integer i: collection) { lastOld = i; } lastOld = lastOld == null? 0 : lastOld; System.out.println(\"last = \" + last + \" : \" + lastOld); Integer sumMore2 = collection.stream().filter(o -> o > 2).reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumMore2Old = 0; for(Integer i: collection) { if(i > 2) { sumMore2Old += i; } } System.out.println(\"sumMore2 = \" + sumMore2 + \" : \" + sumMore2Old); Integer sumOdd = collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumOddOld = 0; for(Integer i: collection) { if(i % 2 != 0) { sumOddOld += i; } } System.out.println(\"sumOdd = \" + sumOdd + \" : \" + sumOddOld); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); int oldMan = peoples.stream().filter((p) -> p.getSex() == Sex.MAN).map(People::getAge).reduce((s1, s2) -> s1 > s2 ? s1 : s2).get(); System.out.println(\"oldMan = \" + oldMan); int younger = peoples.stream().filter((p) -> p.getName().contains(\"\u0435\")).mapToInt(People::getAge).reduce((s1, s2) -> s1 < s2 ? s1 : s2).orElse(0); System.out.println(\"younger = \" + younger); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } } 3.9 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f toArray \u0438 collect \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0415\u0441\u043b\u0438 \u0441 toArray \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c toArray() \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Object[], \u043b\u0438\u0431\u043e toArray(T[]::new) \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u0438\u043f\u0430 T, \u0442\u043e collect \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, map'\u0443 \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 List \u0431\u0443\u0434\u0435\u0442 stream.collect(Collectors.toList()). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors: \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 toList, toCollection, toSet \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 toConcurrentMap, toMap \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0432 map averagingInt, averagingDouble, averagingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 summingInt, summingDouble, summingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 summarizingInt, summarizingDouble, summarizingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 SummaryStatistics \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 partitioningBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u043a\u0430\u043a Map<Boolean, List> groupingBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Map<N, List mapping \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 Collector'\u043e\u0432 \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 collect \u0438 toArray \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445: \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1? p: 0))) 4 \u0412\u044b\u0447\u0435\u0441\u0442\u044c \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 1 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 numbers.stream().collect(Collectors.averagingInt((p) -> p \u2014 1)) 1.5 \u041f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0447\u0438\u0441\u043b\u0430\u043c 3 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)) IntSummaryStatistics{count=4, sum=22, min=4, average=5.5, max=7} \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u0447\u0435\u0442\u043d\u044b\u0435 \u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)) {false=[1, 3], true=[2, 4]} \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00abb2\u00bb, \u00abc3\u00bb, \u00aba1\u00bb), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 strings.stream().distinct().collect(Collectors.toList()) [a1, b2, c3] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new) {A1, B2, C3} \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c: \u0438 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0433\u0430\u043c\u0438 <b>\u2026 </b> strings.stream().collect(Collectors.joining(\": \", \"<b> \", \" </b>\")) <b> a1: b2: c3: a1 </b> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0433\u0434\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043a\u043b\u044e\u0447, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))) {a=1, b=2, c=3} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))) {a=[a1, a1], b=[b2], c=[c3]} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0447\u0435\u0440\u0435\u0437 : strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))) {a=1:1, b=2, c=3} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testCollect() { System.out.println(); System.out.println(\"Test distinct start\"); Collection<String> strings = Arrays.asList(\"a1\", \"b2\", \"c3\", \"a1\"); List<String> distinct = strings.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinct = \" + distinct); String[] array = strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new); System.out.println(\"array = \" + Arrays.asList(array)); String join = strings.stream().collect(Collectors.joining(\" : \", \"<b> \", \" </b>\")); System.out.println(\"join = \" + join); Map<String, String> map = strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))); System.out.println(\"map = \" + map); Map<String, List<String>> groups = strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))); System.out.println(\"groups = \" + groups); Map<String, String> groupJoin = strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))); System.out.println(\"groupJoin = \" + groupJoin); Collection<Integer> numbers = Arrays.asList(1, 2, 3, 4); long sumOdd = numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1 ? p : 0))); System.out.println(\"sumOdd = \" + sumOdd); double average = numbers.stream().collect(Collectors.averagingInt((p) -> p - 1)); System.out.println(\"average = \" + average); IntSummaryStatistics statistics = numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)); System.out.println(\"statistics = \" + statistics); long sumEven = numbers.stream().collect(Collectors.summarizingInt((p) -> p % 2 == 0 ? p : 0)).getSum(); System.out.println(\"sumEven = \" + sumEven); Map<Boolean, List<Integer>> parts = numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)); System.out.println(\"parts = \" + parts); } 3.10 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e Collector'a \u041a\u0440\u043e\u043c\u0435 Collector'\u043e\u0432 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 Collectors \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 Collector, \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c. \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e Collector'a: Collector<\u0422\u0438\u043f_\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430, \u0422\u0438\u043f_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0422\u0438\u043f_\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430> \u0441ollector = Collector.of( \u043c\u0435\u0442\u043e\u0434_\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u043c\u0435\u0442\u043e\u0434_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u043a\u0430\u0436\u0434\u043e\u0433\u043e_\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432, [\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430] ); \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e Collector'a \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0440\u0438 \u0438\u043b\u0438 \u0447\u0435\u0442\u044b\u0440\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 (\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u0434\u043e Java 8, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438: StringBuilder b = new StringBuilder(); for(String s: strings) { b.append(s).append(\" , \"); } String joinBuilderOld = b.toString(); \u0418 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 Java 8 String joinBuilder = strings.stream().collect( Collector.of( StringBuilder::new, (b ,s) -> b.append(s).append(\" , \"), (b1, b2) -> b1.append(b2).append(\" , \"), StringBuilder::toString ) ); \u0412 \u043e\u0431\u0449\u0435\u043c-\u0442\u043e, \u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0438\u0445 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043d\u043e \u0432\u043e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432? \u042d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Collector'a, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 (\u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0442\u0435\u0439), \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440 StringBuilder \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c, \u0442\u043e \u043a\u043e\u0434 \u0434\u043e Java 8 \u043f\u0440\u0438 2 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c: StringBuilder b1 = new StringBuilder(); for(String s: stringsPart1) { b1.append(s).append(\" , \"); } StringBuilder b2 = new StringBuilder(); for(String s: stringsPart2) { b2.append(s).append(\" , \"); } StringBuilder b = b1.append(b2).append(\" , \"), String joinBuilderOld = b.toString(); \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 Collectors.toList() \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u043e\u043c: Collector<String, List<String>, List<String>> toList = Collector.of( ArrayList::new, List::add, (l1, l2) -> { l1.addAll(l2); return l1; } ); List<String> distinct1 = strings.stream().distinct().collect(toList); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e Collector<String,StringBuilder, String> stringBuilderCollector = Collector.of( StringBuilder::new, (b ,s) -> b.append(s).append(\" , \"), (b1, b2) -> b1.append(b2).append(\" , \"), StringBuilder::toString ); String joinBuilder = strings.stream().collect(stringBuilderCollector); System.out.println(\"joinBuilder = \" + joinBuilder); StringBuilder b = new StringBuilder(); for(String s: strings) { b.append(s).append(\" , \"); } String joinBuilderOld = b.toString(); System.out.println(\"joinBuilderOld = \" + joinBuilderOld); Collector<String, List<String>, List<String>> toList = Collector.of( ArrayList::new, List::add, (l1, l2) -> { l1.addAll(l2); return l1; } ); List<String> distinct1 = strings.stream().distinct().collect(toList); System.out.println(\"distinct1 = \" + distinct1); IV. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412\u043e\u0442 \u0438 \u0432\u0441\u0435. \u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043c\u043e\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e stream api \u0431\u044b\u043b\u0430 \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439. \u0412\u0441\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0435\u0441\u0442\u044c \u043d\u0430 github'\u0435 , \u0443\u0434\u0430\u0447\u0438 \u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043a\u043e\u0434\u0430. P.S. \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0430\u0442\u0435\u0439, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e Stream Api: 1. Processing Data with Java SE 8 Streams, Part 1 \u043e\u0442 Oracle, 2. Processing Data with Java SE 8 Streams, Part 2 \u043e\u0442 Oracle, 3. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java 8 Stream P.P.S. \u0422\u0430\u043a \u0436\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043c\u043e\u0439 opensource \u043f\u0440\u043e\u0435\u043a\u0442 useful-java-links \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0435\u043e. \u0422\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e opensource \u043f\u043e\u0434\u043f\u0440\u043e\u0435\u043a\u0442 Hello world \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0432 \u043e\u0434\u043d\u043e\u043c maven \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u0431\u0443\u0434\u0443 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d \u0437\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u043e\u043c\u043e\u0449\u044c). Source","title":"Java Stream API"},{"location":"java/Java%20Stream%20API/#i","text":"\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0421\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430 \u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 1. \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection. stream () <br>Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\");<br> Stream<String> streamFromCollection = collection.stream(); <br> 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Stream.of ( \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351 ,\u2026 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435N ) <br>Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); <br> 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Arrays.stream ( \u043c\u0430\u0441\u0441\u0438\u0432 ) <br>String[] array = {\"a1\",\"a2\",\"a3\"}; <br> Stream<String> streamFromArrays = Arrays.stream(array); <br> 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0441\u0442\u0440\u0438\u043c\u0435) Files.lines ( \u043f\u0443\u0442\u044c_\u043a_\u0444\u0430\u0439\u043b\u0443 ) <br>Stream<String> streamFromFiles = Files.lines(Paths.get(\"file.txt\")) <br> 5. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u00ab\u0441\u0442\u0440\u043e\u043a\u0430\u00bb. chars () <br>IntStream streamFromString = \"123\".chars() <br> 6. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.builder Stream. builder (). add (...).... build () <br>Stream.builder().add(\"a1\").add(\"a2\").add(\"a3\").build() <br> 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 collection. parallelStream () <br>Stream<String> stream = collection.parallelStream(); <br> 8. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.iterate Stream.iterate ( \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435_\u0443\u0441\u043b\u043e\u0432\u0438\u0435 , \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 1) <br> 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.generate Stream.generate ( \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\") <br> \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0432\u0441\u0435 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0441\u043b\u0443\u0436\u0430\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432, \u0432 iterate \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e, \u0442\u043e \u0435\u0441\u0442\u044c Stream.iterate(1, n -> n + 1) \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 1, 2, 3, 4,\u2026 N. Stream.generate \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u00aba1\u00bb. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 n -> n + 1, \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Integer func(Integer n) { return n+1;}, \u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 () -> \u00aba1\u00bb \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f String func() { return \u00aba1\u00bb;} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github 'e System.out.println(\"Test buildStream start\"); Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); System.out.println(\"streamFromValues = \" + streamFromValues.collect(Collectors.toList())); String[] array = {\"a1\",\"a2\",\"a3\"}; Stream<String> streamFromArrays = Arrays.stream(array); System.out.println(\"streamFromArrays = \" + streamFromArrays.collect(Collectors.toList())); Stream<String> streamFromArrays1 = Stream.of(array); System.out.println(\"streamFromArrays1 = \" + streamFromArrays1.collect(Collectors.toList())); File file = new File(\"1.tmp\"); file.deleteOnExit(); PrintWriter out = new PrintWriter(file); out.println(\"a1\"); out.println(\"a2\"); out.println(\"a3\"); out.close(); Stream<String> streamFromFiles = Files.lines(Paths.get(file.getAbsolutePath())); System.out.println(\"streamFromFiles = \" + streamFromFiles.collect(Collectors.toList())); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\"); Stream<String> streamFromCollection = collection.stream(); System.out.println(\"streamFromCollection = \" + streamFromCollection.collect(Collectors.toList())); IntStream streamFromString = \"123\".chars(); System.out.print(\"streamFromString = \"); streamFromString.forEach((e)->System.out.print(e + \" , \")); System.out.println(); Stream.Builder<String> builder = Stream.builder(); Stream<String> streamFromBuilder = builder.add(\"a1\").add(\"a2\").add(\"a3\").build(); System.out.println(\"streamFromBuilder = \" + streamFromBuilder.collect((Collectors.toList()))); Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 2); System.out.println(\"streamFromIterate = \" + streamFromIterate.limit(3).collect(Collectors.toList())); Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\"); System.out.println(\"streamFromGenerate = \" + streamFromGenerate.limit(3).collect(Collectors.toList())); Stream<String> streamEmpty = Stream.empty(); System.out.println(\"streamEmpty = \" + streamEmpty.collect(Collectors.toList())); Stream<String> parallelStream = collection.parallelStream(); System.out.println(\"parallelStream = \" + parallelStream.collect(Collectors.toList()));","title":"I. \u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#ii","text":"Java Stream API \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: 1. \u041a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 stream, \u0442\u043e \u0435\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043a\u0430\u043a builder, 2. \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b, \u043e\u0431\u044a\u0435\u043a\u0442\u044b, Optional \u0438 \u0442.\u0434. \u041e \u0442\u043e\u043c \u0447\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","title":"II. \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#21","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 filter \u041e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e collection.stream().filter(\u00aba1\u00bb::equals).count() skip \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c N \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().skip(collection.size() \u2014 1).findFirst().orElse(\u00ab1\u00bb) distinct \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0438\u043c \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 (\u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 equals) collection.stream().distinct().collect(Collectors.toList()) map \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) peek \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0440\u0438\u043c, \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(\",\" + e)). collect(Collectors.toList()) limit \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().limit(2).collect(Collectors.toList()) sorted \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043b\u0438\u0431\u043e \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043b\u0438\u0431\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u044f Comparator collection.stream().sorted().collect(Collectors.toList()) mapToInt , mapToDouble , mapToLong \u0410\u043d\u0430\u043b\u043e\u0433 map, \u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c (\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432) collection.stream().mapToInt((s) -> Integer.parseInt(s)).toArray() flatMap , flatMapToInt , flatMapToDouble , flatMapToLong \u041f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 map, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new)","title":"2.1 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#22","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 findFirst \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findFirst().orElse(\u00ab1\u00bb) findAny \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findAny().orElse(\u00ab1\u00bb) collect \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) count \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 collection.stream().filter(\u00aba1\u00bb::equals).count() anyMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().anyMatch(\u00aba1\u00bb::equals) noneMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().noneMatch(\u00aba8\u00bb::equals) allMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) min \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().min(String::compareTo).get() max \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().max(String::compareTo).get() forEach \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f set.stream().forEach((p) -> p.append(\"_1\")); forEachOrdered \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); toArray \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).toArray(String[]::new); reduce \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b findFirst, findAny, anyMatch \u044d\u0442\u043e short-circuiting \u043c\u0435\u0442\u043e\u0434\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u0430 \u043d\u0435 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c.","title":"2.2 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#23","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 sum \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).sum() average \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).average() mapToObj \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0439 intStream.mapToObj((id) -> new Key(id)).toArray()","title":"2.3 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#24","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 isParallel \u0423\u0437\u043d\u0430\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c parallel \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f sequential \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e, \u043c\u0435\u0442\u043e\u0434\u043e\u0432 parallel \u0438 sequential \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438. \u0422\u0430\u043a \u0436\u0435 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0442\u043e \u0435\u0441\u0442\u044c: collection.stream(). peek(...). parallel(). map(...). sequential(). reduce(...) \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0434\u043b\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0434\u043e\u043b\u0433\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b, \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439), \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 c \u043e\u0434\u043d\u0438\u043c \u043f\u0443\u043b\u043e\u043c fork/join \u0438 \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0432 JVM \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043f\u0443\u043b\u0435, \u0442.\u0435. \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u0438\u0434\u0435\u0442 \u043d\u0430 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u044b, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b.","title":"2.4 \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#iii","text":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438.","title":"III. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#31-filter-findfirst-findany-skip-limit-count","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b filter, findFirst, findAny, skip \u0438 count: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u00aba1\u00bb collection.stream().filter(\u00aba1\u00bb::equals).count() 2 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 0, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().findFirst().orElse(\u00ab0\u00bb) a1 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u00abempty\u00bb, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().skip(collection.size() \u2014 1).findAny().orElse(\u00abempty\u00bb) a1 \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u044b\u0439 \u00aba3\u00bb \u0438\u043b\u0438 \u043a\u0438\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 collection.stream().filter(\u00aba3\u00bb::equals).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 collection.stream().skip(2).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e collection.stream().skip(1).limit(2).toArray() [a2, a3] \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) [a1, a1] \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 , \u0447\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b findFirst \u0438 findAny \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f Optional, \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0432 Java 8, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c NullPointerException. \u041c\u0435\u0442\u043e\u0434 filter \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043b\u0438\u0448\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 \u043c\u0435\u0442\u043e\u0434 skip \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u00aba3\u00bb::equals \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return \u00aba3\u00bb.equals(s);}, \u0430 (s) -> s.contains(\u00ab1\u00bb) \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return s.contains(\u00ab1\u00bb);} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0443\u0436\u0447\u0438\u043d-\u0432\u043e\u0435\u043d\u043d\u043e\u043e\u0431\u044f\u0437\u0430\u043d\u043d\u044b\u0445 (\u043e\u0442 18 \u0434\u043e 27 \u043b\u0435\u0442) peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()) [{name='\u041f\u0435\u0442\u044f', age=23, sex=MAN}] \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble() 36.0 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (\u0442.\u0435. \u043e\u0442 18 \u043b\u0435\u0442 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0432\u044b\u0445\u043e\u0434\u044f\u0442 \u0432 55 \u043b\u0435\u0442, \u0430 \u043c\u0443\u0436\u0447\u0438\u043d\u0430 \u0432 60) peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) | (p.getSex() == Sex.MAN && p.getAge() < 60)).count() 2 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e: \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 private static void testFilterAndCount() { System.out.println(); System.out.println(\"Test filter and count start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); long count = collection.stream().filter(\"a1\"::equals).count(); System.out.println(\"count = \" + count); List<String> select = collection.stream().filter((s) -> s.contains(\"1\")).collect(Collectors.toList()); System.out.println(\"select = \" + select); List<People> militaryService = peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()); System.out.println(\"militaryService = \" + militaryService); double manAverageAge = peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble(); System.out.println(\"manAverageAge = \" + manAverageAge); long peopleHowCanWork = peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) || (p.getSex() == Sex.MAN && p.getAge() < 60)).count(); System.out.println(\"peopleHowCanWork = \" + peopleHowCanWork); } private static void testFindFirstSkipCount() { Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.println(\"Test findFirst and skip start\"); String first = collection.stream().findFirst().orElse(\"1\"); System.out.println(\"first = \" + first); String last = collection.stream().skip(collection.size() - 1).findAny().orElse(\"1\"); System.out.println(\"last = \" + last ); String find = collection.stream().filter(\"a3\"::equals).findFirst().get(); System.out.println(\"find = \" + find); String third = collection.stream().skip(2).findFirst().get(); System.out.println(\"third = \" + third); System.out.println(); System.out.println(\"Test collect start\"); List<String> select = collection.stream().filter((s) -> s.contains(\"1\")).collect(Collectors.toList()); System.out.println(\"select = \" + select); } private static void testLimit() { System.out.println(); System.out.println(\"Test limit start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); List<String> limit = collection.stream().limit(2).collect(Collectors.toList()); System.out.println(\"limit = \" + limit); List<String> fromTo = collection.stream().skip(1).limit(2).collect(Collectors.toList()); System.out.println(\"fromTo = \" + fromTo); String last = collection.stream().skip(collection.size() - 1).findAny().orElse(\"1\"); System.out.println(\"last = \" + last ); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } }","title":"3.1 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f filter, findFirst, findAny, skip, limit \u0438 count"},{"location":"java/Java%20Stream%20API/#32-distinct","text":"\u041c\u0435\u0442\u043e\u0434 distinct \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 stream \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 list) \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u0435\u043d, \u0434\u043b\u044f \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 Collection ordered = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb) \u0438 Collection nonOrdered = new HashSet<>(ordered). \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 nonOrdered.stream().distinct().collect(Collectors.toList()) [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 ordered.stream().distinct().collect(Collectors.toList()); [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: 1. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 distinct \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d equals, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c hashCode \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c equals/hashCode (\u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0447\u0442\u043e\u0431\u044b hashCode \u0434\u043b\u044f \u0432\u0441\u0435\u0445 equals \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435), \u0438\u043d\u0430\u0447\u0435 distinct \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 HashSet/HashMap), 2. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0438 \u0432\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u2014 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0440\u0438\u043c \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c unordered(), \u0430 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c distinct(), \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u0438 distinct() \u043d\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043f\u0440\u0438 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u043c, \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testDistinct() { System.out.println(); System.out.println(\"Test distinct start\"); Collection<String> ordered = Arrays.asList(\"a1\", \"a2\", \"a2\", \"a3\", \"a1\", \"a2\", \"a2\"); Collection<String> nonOrdered = new HashSet<>(ordered); List<String> distinct = nonOrdered.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinct = \" + distinct); List<String> distinctOrdered = ordered.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinctOrdered = \" + distinctOrdered); }","title":"3.2 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f distinct"},{"location":"java/Java%20Stream%20API/#33-match-anymatch-allmatch-nonematch","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba1\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba1\u00bb::equals) true \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba8\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba8\u00bb::equals) false \u041d\u0430\u0439\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u00ab1\u00bb \u0443 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) false \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u00aba7\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().noneMatch(\u00aba7\u00bb::equals) true \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMatch() { System.out.println(); System.out.println(\"Test anyMatch, allMatch, noneMatch start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); boolean isAnyOneTrue = collection.stream().anyMatch(\"a1\"::equals); System.out.println(\"anyOneTrue \" + isAnyOneTrue); boolean isAnyOneFalse = collection.stream().anyMatch(\"a8\"::equals); System.out.println(\"anyOneFlase \" + isAnyOneFalse); boolean isAll = collection.stream().allMatch((s) -> s.contains(\"1\")); System.out.println(\"isAll \" + isAll); boolean isNotEquals = collection.stream().noneMatch(\"a7\"::equals); System.out.println(\"isNotEquals \" + isNotEquals); }","title":"3.3 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (anyMatch, allMatch, noneMatch)"},{"location":"java/Java%20Stream%20API/#34-map-map-maptoint-flatmap-flatmaptoint","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1 = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb) \u0438 collection2 = Arrays.asList(\u00ab1,2,0\u00bb, \u00ab4,5\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \"_1\" \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) [a1_1, a2_1, a3_1, a1_1] \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b (int[]) collection1.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray() [1, 2, 3, 1] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u0438\u0437 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection2.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) [1, 2, 0, 4, 5] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e collection2.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum() 12 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0432\u0441\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0442\u0438\u043f\u0430 (\u043a\u043b\u0430\u0441\u0441\u0430), \u0442\u043e \u0435\u0441\u0442\u044c map \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u0430\u0442\u044c Stream \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Integer \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u043b\u044e\u0434\u0435\u0439 People, \u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Office, \u0433\u0434\u0435 \u044d\u0442\u0438 \u043b\u044e\u0434\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0438 \u0442.\u043f., flatMap (flatMapToInt \u0438 \u0442.\u043f.) \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0441 \u043e\u0434\u043d\u0438\u043c, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u0441\u043c. \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430). \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMap() { System.out.println(); System.out.println(\"Test map start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); List<String> transform = collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()); System.out.println(\"transform = \" + transform); List<Integer> number = collection.stream().map((s) -> Integer.parseInt(s.substring(1))).collect(Collectors.toList()); System.out.println(\"number = \" + number); } private static void testMapToInt() { System.out.println(); System.out.println(\"Test mapToInt start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); int[] number = collection.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray(); System.out.println(\"number = \" + Arrays.toString(number)); } private static void testFlatMap() { System.out.println(); System.out.println(\"Test flat map start\"); Collection<String> collection = Arrays.asList(\"1,2,0\", \"4,5\"); String[] number = collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new); System.out.println(\"number = \" + Arrays.toString(number)); } private static void testFlatMapToInt() { System.out.println(); System.out.println(\"Test flat map start\"); Collection<String> collection = Arrays.asList(\"1,2,0\", \"4,5\"); int sum = collection.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum(); System.out.println(\"sum = \" + sum); }","title":"3.4 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Map \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (map, mapToInt, FlatMap, FlatMapToInt)"},{"location":"java/Java%20Stream%20API/#35-sorted","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba4\u00bb, \u00aba3\u00bb, \u00aba2\u00bb, \u00aba1\u00bb, \u00aba4\u00bb) \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043b\u044e\u0434\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0430 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 collection.stream().sorted().collect(Collectors.toList()) [a1, a1, a2, a3, a4, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()) [a4, a4, a3, a2, a1, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted().distinct().collect(Collectors.toList()) [a1, a2, a3, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()) [a4, a3, a2, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()) [{'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}, {'\u0412\u0430\u0441\u044f'}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u043f\u043e\u043b\u0443, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex()? o1.getSex(). compareTo(o2.getSex()): o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()) [{'\u0412\u0430\u0441\u044f'}, {'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}] \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testSorted() { System.out.println(); System.out.println(\"Test sorted start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a4\", \"a3\", \"a2\", \"a1\", \"a4\"); List<String> sorted = collection.stream().sorted().collect(Collectors.toList()); System.out.println(\"sorted = \" + sorted); List<String> sortedDistinct = collection.stream().sorted().distinct().collect(Collectors.toList()); System.out.println(\"sortedDistinct = \" + sortedDistinct); List<String> sortedReverse = collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()); System.out.println(\"sortedReverse = \" + sortedReverse); List<String> distinctReverse = collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()); System.out.println(\"distinctReverse = \" + distinctReverse); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); Collection<People> byName = peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()); System.out.println(\"byName = \" + byName); Collection<People> bySexAndAge = peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex() ? o1.getSex(). compareTo(o2.getSex()) : o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()); System.out.println(\"bySexAndAge = \" + bySexAndAge); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } }","title":"3.5 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Sorted \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#36-max-min","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 Peoples \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u043e Sorted \u0438 Filter \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().max(String::compareTo).get() a3 \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().min(String::compareTo).get() a1 \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447', age=69, sex=MAN} \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0412\u0430\u0441\u044f', age=16, sex=MAN} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMinMax() { System.out.println(); System.out.println(\"Test min and max start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); String max = collection.stream().max(String::compareTo).get(); System.out.println(\"max \" + max); String min = collection.stream().min(String::compareTo).get(); System.out.println(\"min \" + min); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); People older = peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get(); System.out.println(\"older \" + older); People younger = peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get(); System.out.println(\"younger \" + younger); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } }","title":"3.6 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Max \u0438 Min \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"java/Java%20Stream%20API/#37-foreach-peek","text":"\u041e\u0431\u0435 ForEach \u0438 Peek \u043f\u043e \u0441\u0443\u0442\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435, \u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e ForEach \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043e\u043d\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a Peek \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u0430\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f: Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); \u0418 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \"_new\", \u0442\u043e \u0434\u043b\u044f ForEach \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); \u0430 \u0434\u043b\u044f peek \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 List<StringBuilder> newList = list.stream().peek((p) -> p.append(\"_new\")).collect(Collectors.toList()); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testForEach() { System.out.println(); System.out.println(\"For each start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.print(\"forEach = \"); collection.stream().map(String::toUpperCase).forEach((e) -> System.out.print(e + \",\")); System.out.println(); Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); list.stream().forEachOrdered((p) -> p.append(\"_new\")); System.out.println(\"forEachOrdered = \" + list); } private static void testPeek() { System.out.println(); System.out.println(\"Test peek start\"); Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\", \"a1\"); System.out.print(\"peak1 = \"); List<String> peek = collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(e + \",\")). collect(Collectors.toList()); System.out.println(); System.out.println(\"peek2 = \" + peek); Collection<StringBuilder> list = Arrays.asList(new StringBuilder(\"a1\"), new StringBuilder(\"a2\"), new StringBuilder(\"a3\")); List<StringBuilder> newList = list.stream().peek((p) -> p.append(\"_new\")).collect(Collectors.toList()); System.out.println(\"newList = \" + newList); }","title":"3.7 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ForEach \u0438 Peek \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"java/Java%20Stream%20API/#38-reduce","text":"\u041c\u0435\u0442\u043e\u0434 reduce \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 (\u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0443\u043c\u043c\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.), \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0448\u0430\u0433\u0430\u0445 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4, 2) \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f reduce. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c 0 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) 12 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u043b\u0438 -1 collection.stream().reduce(Integer::max).orElse(-1) 4 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 0 collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0) 4 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testReduce() { System.out.println(); System.out.println(\"Test reduce start\"); Collection<Integer> collection = Arrays.asList(1, 2, 3, 4, 2); Integer sum = collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumOld = 0; for(Integer i: collection) { sumOld += i; } System.out.println(\"sum = \" + sum + \" : \" + sumOld); Integer max1 = collection.stream().reduce((s1, s2) -> s1 > s2 ? s1 : s2).orElse(0); Integer max2 = collection.stream().reduce(Integer::max).orElse(0); Integer maxOld = null; for(Integer i: collection) { maxOld = maxOld != null && maxOld > i? maxOld: i; } maxOld = maxOld == null? 0 : maxOld; System.out.println(\"max = \" + max1 + \" : \" + max2 + \" : \" + maxOld); Integer min = collection.stream().reduce((s1, s2) -> s1 < s2 ? s1 : s2).orElse(0); Integer minOld = null; for(Integer i: collection) { minOld = minOld != null && minOld < i? minOld: i; } minOld = minOld == null? 0 : minOld; System.out.println(\"min = \" + min+ \" : \" + minOld); Integer last = collection.stream().reduce((s1, s2) -> s2).orElse(0); Integer lastOld = null; for(Integer i: collection) { lastOld = i; } lastOld = lastOld == null? 0 : lastOld; System.out.println(\"last = \" + last + \" : \" + lastOld); Integer sumMore2 = collection.stream().filter(o -> o > 2).reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumMore2Old = 0; for(Integer i: collection) { if(i > 2) { sumMore2Old += i; } } System.out.println(\"sumMore2 = \" + sumMore2 + \" : \" + sumMore2Old); Integer sumOdd = collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0); Integer sumOddOld = 0; for(Integer i: collection) { if(i % 2 != 0) { sumOddOld += i; } } System.out.println(\"sumOdd = \" + sumOdd + \" : \" + sumOddOld); Collection<People> peoples = Arrays.asList( new People(\"\u0412\u0430\u0441\u044f\", 16, Sex.MAN), new People(\"\u041f\u0435\u0442\u044f\", 23, Sex.MAN), new People(\"\u0415\u043b\u0435\u043d\u0430\", 42, Sex.WOMEN), new People(\"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\", 69, Sex.MAN) ); int oldMan = peoples.stream().filter((p) -> p.getSex() == Sex.MAN).map(People::getAge).reduce((s1, s2) -> s1 > s2 ? s1 : s2).get(); System.out.println(\"oldMan = \" + oldMan); int younger = peoples.stream().filter((p) -> p.getName().contains(\"\u0435\")).mapToInt(People::getAge).reduce((s1, s2) -> s1 < s2 ? s1 : s2).orElse(0); System.out.println(\"younger = \" + younger); } private enum Sex { MAN, WOMEN } private static class People { private final String name; private final Integer age; private final Sex sex; public People(String name, Integer age, Sex sex) { this.name = name; this.age = age; this.sex = sex; } public String getName() { return name; } public Integer getAge() { return age; } public Sex getSex() { return sex; } @Override public String toString() { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}'; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof People)) return false; People people = (People) o; return Objects.equals(name, people.name) && Objects.equals(age, people.age) && Objects.equals(sex, people.sex); } @Override public int hashCode() { return Objects.hash(name, age, sex); } }","title":"3.8 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Reduce \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#39-toarray-collect","text":"\u0415\u0441\u043b\u0438 \u0441 toArray \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c toArray() \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Object[], \u043b\u0438\u0431\u043e toArray(T[]::new) \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u0438\u043f\u0430 T, \u0442\u043e collect \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, map'\u0443 \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 List \u0431\u0443\u0434\u0435\u0442 stream.collect(Collectors.toList()). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors: \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 toList, toCollection, toSet \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 toConcurrentMap, toMap \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0432 map averagingInt, averagingDouble, averagingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 summingInt, summingDouble, summingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 summarizingInt, summarizingDouble, summarizingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 SummaryStatistics \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 partitioningBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u043a\u0430\u043a Map<Boolean, List> groupingBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Map<N, List mapping \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 Collector'\u043e\u0432 \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 collect \u0438 toArray \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445: \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1? p: 0))) 4 \u0412\u044b\u0447\u0435\u0441\u0442\u044c \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 1 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 numbers.stream().collect(Collectors.averagingInt((p) -> p \u2014 1)) 1.5 \u041f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0447\u0438\u0441\u043b\u0430\u043c 3 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)) IntSummaryStatistics{count=4, sum=22, min=4, average=5.5, max=7} \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u0447\u0435\u0442\u043d\u044b\u0435 \u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)) {false=[1, 3], true=[2, 4]} \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00abb2\u00bb, \u00abc3\u00bb, \u00aba1\u00bb), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 strings.stream().distinct().collect(Collectors.toList()) [a1, b2, c3] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new) {A1, B2, C3} \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c: \u0438 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0433\u0430\u043c\u0438 <b>\u2026 </b> strings.stream().collect(Collectors.joining(\": \", \"<b> \", \" </b>\")) <b> a1: b2: c3: a1 </b> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0433\u0434\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043a\u043b\u044e\u0447, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))) {a=1, b=2, c=3} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))) {a=[a1, a1], b=[b2], c=[c3]} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0447\u0435\u0440\u0435\u0437 : strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))) {a=1:1, b=2, c=3} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testCollect() { System.out.println(); System.out.println(\"Test distinct start\"); Collection<String> strings = Arrays.asList(\"a1\", \"b2\", \"c3\", \"a1\"); List<String> distinct = strings.stream().distinct().collect(Collectors.toList()); System.out.println(\"distinct = \" + distinct); String[] array = strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new); System.out.println(\"array = \" + Arrays.asList(array)); String join = strings.stream().collect(Collectors.joining(\" : \", \"<b> \", \" </b>\")); System.out.println(\"join = \" + join); Map<String, String> map = strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))); System.out.println(\"map = \" + map); Map<String, List<String>> groups = strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))); System.out.println(\"groups = \" + groups); Map<String, String> groupJoin = strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))); System.out.println(\"groupJoin = \" + groupJoin); Collection<Integer> numbers = Arrays.asList(1, 2, 3, 4); long sumOdd = numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1 ? p : 0))); System.out.println(\"sumOdd = \" + sumOdd); double average = numbers.stream().collect(Collectors.averagingInt((p) -> p - 1)); System.out.println(\"average = \" + average); IntSummaryStatistics statistics = numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)); System.out.println(\"statistics = \" + statistics); long sumEven = numbers.stream().collect(Collectors.summarizingInt((p) -> p % 2 == 0 ? p : 0)).getSum(); System.out.println(\"sumEven = \" + sumEven); Map<Boolean, List<Integer>> parts = numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)); System.out.println(\"parts = \" + parts); }","title":"3.9 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f toArray \u0438 collect \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#310-collectora","text":"\u041a\u0440\u043e\u043c\u0435 Collector'\u043e\u0432 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 Collectors \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 Collector, \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c. \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e Collector'a: Collector<\u0422\u0438\u043f_\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430, \u0422\u0438\u043f_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0422\u0438\u043f_\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430> \u0441ollector = Collector.of( \u043c\u0435\u0442\u043e\u0434_\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u043c\u0435\u0442\u043e\u0434_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u043a\u0430\u0436\u0434\u043e\u0433\u043e_\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432, [\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430] ); \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e Collector'a \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0440\u0438 \u0438\u043b\u0438 \u0447\u0435\u0442\u044b\u0440\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 (\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u0434\u043e Java 8, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438: StringBuilder b = new StringBuilder(); for(String s: strings) { b.append(s).append(\" , \"); } String joinBuilderOld = b.toString(); \u0418 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 Java 8 String joinBuilder = strings.stream().collect( Collector.of( StringBuilder::new, (b ,s) -> b.append(s).append(\" , \"), (b1, b2) -> b1.append(b2).append(\" , \"), StringBuilder::toString ) ); \u0412 \u043e\u0431\u0449\u0435\u043c-\u0442\u043e, \u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0438\u0445 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043d\u043e \u0432\u043e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432? \u042d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Collector'a, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 (\u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0442\u0435\u0439), \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440 StringBuilder \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c, \u0442\u043e \u043a\u043e\u0434 \u0434\u043e Java 8 \u043f\u0440\u0438 2 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c: StringBuilder b1 = new StringBuilder(); for(String s: stringsPart1) { b1.append(s).append(\" , \"); } StringBuilder b2 = new StringBuilder(); for(String s: stringsPart2) { b2.append(s).append(\" , \"); } StringBuilder b = b1.append(b2).append(\" , \"), String joinBuilderOld = b.toString(); \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 Collectors.toList() \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u043e\u043c: Collector<String, List<String>, List<String>> toList = Collector.of( ArrayList::new, List::add, (l1, l2) -> { l1.addAll(l2); return l1; } ); List<String> distinct1 = strings.stream().distinct().collect(toList); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e Collector<String,StringBuilder, String> stringBuilderCollector = Collector.of( StringBuilder::new, (b ,s) -> b.append(s).append(\" , \"), (b1, b2) -> b1.append(b2).append(\" , \"), StringBuilder::toString ); String joinBuilder = strings.stream().collect(stringBuilderCollector); System.out.println(\"joinBuilder = \" + joinBuilder); StringBuilder b = new StringBuilder(); for(String s: strings) { b.append(s).append(\" , \"); } String joinBuilderOld = b.toString(); System.out.println(\"joinBuilderOld = \" + joinBuilderOld); Collector<String, List<String>, List<String>> toList = Collector.of( ArrayList::new, List::add, (l1, l2) -> { l1.addAll(l2); return l1; } ); List<String> distinct1 = strings.stream().distinct().collect(toList); System.out.println(\"distinct1 = \" + distinct1);","title":"3.10 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e Collector'a"},{"location":"java/Java%20Stream%20API/#iv","text":"\u0412\u043e\u0442 \u0438 \u0432\u0441\u0435. \u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043c\u043e\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e stream api \u0431\u044b\u043b\u0430 \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439. \u0412\u0441\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0435\u0441\u0442\u044c \u043d\u0430 github'\u0435 , \u0443\u0434\u0430\u0447\u0438 \u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043a\u043e\u0434\u0430. P.S. \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0430\u0442\u0435\u0439, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e Stream Api: 1. Processing Data with Java SE 8 Streams, Part 1 \u043e\u0442 Oracle, 2. Processing Data with Java SE 8 Streams, Part 2 \u043e\u0442 Oracle, 3. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java 8 Stream P.P.S. \u0422\u0430\u043a \u0436\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043c\u043e\u0439 opensource \u043f\u0440\u043e\u0435\u043a\u0442 useful-java-links \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0435\u043e. \u0422\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e opensource \u043f\u043e\u0434\u043f\u0440\u043e\u0435\u043a\u0442 Hello world \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0432 \u043e\u0434\u043d\u043e\u043c maven \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u0431\u0443\u0434\u0443 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d \u0437\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u043e\u043c\u043e\u0449\u044c). Source","title":"IV. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/","text":"Spring REST Error Handling Example In this article, we will show you error handling in Spring Boot REST application. Technologies used : Spring Boot 2.1.2.RELEASE Spring 5.1.4.RELEASE Maven 3 Java 8 1. /error 1.1 By default, Spring Boot provides a BasicErrorController controller for /error mapping that handles all errors, and getErrorAttributes to produce a JSON response with details of the error, the HTTP status, and the exception message. { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"...\" , \"path\" : \"/path\" } BasicErrorController.java package org.springframework.boot.autoconfigure.web.servlet.error ; @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity <> ( body , status ); } In the IDE, puts a breakpoint in this method, you will understand how Spring Boot generates the default JSON error response. 2. Custom Exception In Spring Boot, we can use @ControllerAdvice to handle custom exceptions. 2.1 A custom exception. BookNotFoundException.java package com.mkyong.error ; public class BookNotFoundException extends RuntimeException { public BookNotFoundException ( Long id ) { super ( \"Book id not found : \" + id ); } } A controller, if a book id is not found, throws the above BookNotFoundException BookController.java package com.mkyong ; @RestController public class BookController { @Autowired private BookRepository repository ; @GetMapping ( \"/books/{id}\" ) Book findOne ( @PathVariable Long id ) { return repository . findById ( id ) . orElseThrow (() -> new BookNotFoundException ( id )); } } By default, Spring Boot generates the following JSON error response, http 500 error. Terminal curl localhost : 8080 / books / 5 { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.2 If a book id not found, it should return a 404 error instead of 500, we can override the status code like this : CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.bind.annotation.RestControllerAdvice ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public void springHandleNotFound ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . NOT_FOUND . value ()); } } 2.3 It returns a 404 now. Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27T04:21:17.740+0000\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.4 Furthermore, we can customize the entire JSON error response : CustomErrorResponse.java package com.mkyong.error; import com.fasterxml.jackson.annotation.JsonFormat; import java.time.LocalDateTime; public class CustomErrorResponse { @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd hh:mm:ss\") private LocalDateTime timestamp; private int status; private String error; } CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import java.time.LocalDateTime ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public ResponseEntity < CustomErrorResponse > customHandleNotFound ( Exception ex , WebRequest request ) { CustomErrorResponse errors = new CustomErrorResponse (); errors . setTimestamp ( LocalDateTime . now ()); errors . setError ( ex . getMessage ()); errors . setStatus ( HttpStatus . NOT_FOUND . value ()); return new ResponseEntity <> ( errors , HttpStatus . NOT_FOUND ); } } Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27 12:40:45\" , \"status\" : 404 , \"error\" : \"Book id not found : 5\" } 3. JSR 303 Validation error 3.1 For Spring @valid validation errors, it will throw handleMethodArgumentNotValid CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( ConstraintViolationException . class ) public void constraintViolationException ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . BAD_REQUEST . value ()); } @Override protected ResponseEntity < Object > handleMethodArgumentNotValid ( MethodArgumentNotValidException ex , HttpHeaders headers , HttpStatus status , WebRequest request ) { Map < String , Object > body = new LinkedHashMap <> (); body . put ( \"timestamp\" , new Date ()); body . put ( \"status\" , status . value ()); List < String > errors = ex . getBindingResult () . getFieldErrors () . stream () . map ( x -> x . getDefaultMessage ()) . collect ( Collectors . toList ()); body . put ( \"errors\" , errors ); return new ResponseEntity <> ( body , headers , status ); } } 4. ResponseEntityExceptionHandler 4.1 If we are not sure, what exception was thrown by the Spring Boot, puts a breakpoint in this method for debugging. ResponseEntityExceptionHandler.java package org.springframework.web.servlet.mvc.method.annotation ; public abstract class ResponseEntityExceptionHandler { @ExceptionHandler ({ HttpRequestMethodNotSupportedException . class , HttpMediaTypeNotSupportedException . class , HttpMediaTypeNotAcceptableException . class , MissingPathVariableException . class , MissingServletRequestParameterException . class , ServletRequestBindingException . class , ConversionNotSupportedException . class , TypeMismatchException . class , HttpMessageNotReadableException . class , HttpMessageNotWritableException . class , MethodArgumentNotValidException . class , MissingServletRequestPartException . class , BindException . class , NoHandlerFoundException . class , AsyncRequestTimeoutException . class }) @Nullable public final ResponseEntity < Object > handleException ( Exception ex , WebRequest request ) throws Exception { HttpHeaders headers = new HttpHeaders (); if ( ex instanceof HttpRequestMethodNotSupportedException ) { HttpStatus status = HttpStatus . METHOD_NOT_ALLOWED ; return handleHttpRequestMethodNotSupported (( HttpRequestMethodNotSupportedException ) ex , headers , status , request ); } else if ( ex instanceof HttpMediaTypeNotSupportedException ) { HttpStatus status = HttpStatus . UNSUPPORTED_MEDIA_TYPE ; return handleHttpMediaTypeNotSupported (( HttpMediaTypeNotSupportedException ) ex , headers , status , request ); } } } 5. DefaultErrorAttributes 5.1 To override the default JSON error response for all exceptions, create a bean and extends DefaultErrorAttributes CustomErrorAttributes.java package com.mkyong.error ; import org.springframework.boot.web.servlet.error.DefaultErrorAttributes ; import org.springframework.stereotype.Component ; import org.springframework.web.context.request.WebRequest ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.Date ; import java.util.Map ; @Component public class CustomErrorAttributes extends DefaultErrorAttributes { private static final DateFormat dateFormat = new SimpleDateFormat ( \"yyyy/MM/dd HH:mm:ss\" ); @Override public Map < String , Object > getErrorAttributes ( WebRequest webRequest , boolean includeStackTrace ) { Map < String , Object > errorAttributes = super . getErrorAttributes ( webRequest , includeStackTrace ); Object timestamp = errorAttributes . get ( \"timestamp\" ); if ( timestamp == null ) { errorAttributes . put ( \"timestamp\" , dateFormat . format ( new Date ())); } else { errorAttributes . put ( \"timestamp\" , dateFormat . format (( Date ) timestamp )); } errorAttributes . put ( \"version\" , \"1.2\" ); return errorAttributes ; } } Now, the date time is formatted and a new field \u2013 version is added to the JSON error response. curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019/02/27 13:34:24\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" , \"version\" : \"1.2\" } curl localhos t : 8080 /abc { \"timestamp\" : \"2019/02/27 13:35:10\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"No message available\" , \"path\" : \"/abc\" , \"version\" : \"1.2\" } Source","title":"Spring REST Error Handling Example"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#1-error","text":"1.1 By default, Spring Boot provides a BasicErrorController controller for /error mapping that handles all errors, and getErrorAttributes to produce a JSON response with details of the error, the HTTP status, and the exception message. { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"...\" , \"path\" : \"/path\" } BasicErrorController.java package org.springframework.boot.autoconfigure.web.servlet.error ; @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity <> ( body , status ); } In the IDE, puts a breakpoint in this method, you will understand how Spring Boot generates the default JSON error response.","title":"1. /error"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#2-custom-exception","text":"In Spring Boot, we can use @ControllerAdvice to handle custom exceptions. 2.1 A custom exception. BookNotFoundException.java package com.mkyong.error ; public class BookNotFoundException extends RuntimeException { public BookNotFoundException ( Long id ) { super ( \"Book id not found : \" + id ); } } A controller, if a book id is not found, throws the above BookNotFoundException BookController.java package com.mkyong ; @RestController public class BookController { @Autowired private BookRepository repository ; @GetMapping ( \"/books/{id}\" ) Book findOne ( @PathVariable Long id ) { return repository . findById ( id ) . orElseThrow (() -> new BookNotFoundException ( id )); } } By default, Spring Boot generates the following JSON error response, http 500 error. Terminal curl localhost : 8080 / books / 5 { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.2 If a book id not found, it should return a 404 error instead of 500, we can override the status code like this : CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.bind.annotation.RestControllerAdvice ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public void springHandleNotFound ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . NOT_FOUND . value ()); } } 2.3 It returns a 404 now. Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27T04:21:17.740+0000\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.4 Furthermore, we can customize the entire JSON error response : CustomErrorResponse.java package com.mkyong.error; import com.fasterxml.jackson.annotation.JsonFormat; import java.time.LocalDateTime; public class CustomErrorResponse { @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd hh:mm:ss\") private LocalDateTime timestamp; private int status; private String error; } CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import java.time.LocalDateTime ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public ResponseEntity < CustomErrorResponse > customHandleNotFound ( Exception ex , WebRequest request ) { CustomErrorResponse errors = new CustomErrorResponse (); errors . setTimestamp ( LocalDateTime . now ()); errors . setError ( ex . getMessage ()); errors . setStatus ( HttpStatus . NOT_FOUND . value ()); return new ResponseEntity <> ( errors , HttpStatus . NOT_FOUND ); } } Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27 12:40:45\" , \"status\" : 404 , \"error\" : \"Book id not found : 5\" }","title":"2. Custom Exception"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#3-jsr-303-validation-error","text":"3.1 For Spring @valid validation errors, it will throw handleMethodArgumentNotValid CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( ConstraintViolationException . class ) public void constraintViolationException ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . BAD_REQUEST . value ()); } @Override protected ResponseEntity < Object > handleMethodArgumentNotValid ( MethodArgumentNotValidException ex , HttpHeaders headers , HttpStatus status , WebRequest request ) { Map < String , Object > body = new LinkedHashMap <> (); body . put ( \"timestamp\" , new Date ()); body . put ( \"status\" , status . value ()); List < String > errors = ex . getBindingResult () . getFieldErrors () . stream () . map ( x -> x . getDefaultMessage ()) . collect ( Collectors . toList ()); body . put ( \"errors\" , errors ); return new ResponseEntity <> ( body , headers , status ); } }","title":"3. JSR 303 Validation error"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#4-responseentityexceptionhandler","text":"4.1 If we are not sure, what exception was thrown by the Spring Boot, puts a breakpoint in this method for debugging. ResponseEntityExceptionHandler.java package org.springframework.web.servlet.mvc.method.annotation ; public abstract class ResponseEntityExceptionHandler { @ExceptionHandler ({ HttpRequestMethodNotSupportedException . class , HttpMediaTypeNotSupportedException . class , HttpMediaTypeNotAcceptableException . class , MissingPathVariableException . class , MissingServletRequestParameterException . class , ServletRequestBindingException . class , ConversionNotSupportedException . class , TypeMismatchException . class , HttpMessageNotReadableException . class , HttpMessageNotWritableException . class , MethodArgumentNotValidException . class , MissingServletRequestPartException . class , BindException . class , NoHandlerFoundException . class , AsyncRequestTimeoutException . class }) @Nullable public final ResponseEntity < Object > handleException ( Exception ex , WebRequest request ) throws Exception { HttpHeaders headers = new HttpHeaders (); if ( ex instanceof HttpRequestMethodNotSupportedException ) { HttpStatus status = HttpStatus . METHOD_NOT_ALLOWED ; return handleHttpRequestMethodNotSupported (( HttpRequestMethodNotSupportedException ) ex , headers , status , request ); } else if ( ex instanceof HttpMediaTypeNotSupportedException ) { HttpStatus status = HttpStatus . UNSUPPORTED_MEDIA_TYPE ; return handleHttpMediaTypeNotSupported (( HttpMediaTypeNotSupportedException ) ex , headers , status , request ); } } }","title":"4. ResponseEntityExceptionHandler"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#5-defaulterrorattributes","text":"5.1 To override the default JSON error response for all exceptions, create a bean and extends DefaultErrorAttributes CustomErrorAttributes.java package com.mkyong.error ; import org.springframework.boot.web.servlet.error.DefaultErrorAttributes ; import org.springframework.stereotype.Component ; import org.springframework.web.context.request.WebRequest ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.Date ; import java.util.Map ; @Component public class CustomErrorAttributes extends DefaultErrorAttributes { private static final DateFormat dateFormat = new SimpleDateFormat ( \"yyyy/MM/dd HH:mm:ss\" ); @Override public Map < String , Object > getErrorAttributes ( WebRequest webRequest , boolean includeStackTrace ) { Map < String , Object > errorAttributes = super . getErrorAttributes ( webRequest , includeStackTrace ); Object timestamp = errorAttributes . get ( \"timestamp\" ); if ( timestamp == null ) { errorAttributes . put ( \"timestamp\" , dateFormat . format ( new Date ())); } else { errorAttributes . put ( \"timestamp\" , dateFormat . format (( Date ) timestamp )); } errorAttributes . put ( \"version\" , \"1.2\" ); return errorAttributes ; } } Now, the date time is formatted and a new field \u2013 version is added to the JSON error response. curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019/02/27 13:34:24\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" , \"version\" : \"1.2\" } curl localhos t : 8080 /abc { \"timestamp\" : \"2019/02/27 13:35:10\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"No message available\" , \"path\" : \"/abc\" , \"version\" : \"1.2\" } Source","title":"5. DefaultErrorAttributes"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/","text":"Spring Security Keycloak Spring Boot In previous articles , we have explored some cool Keycloak features and used them to secure a Spring Boot application. In this tutorial, we will bring Spring Security in and see how to integrate it with Keycloak seamlessly. We're going to: Set up a Spring Boot application; Integrate Spring Boot with Keycloak; Configure Spring Security to use Keycloak as an authentication provider; Implement the application logic; Add access policies based on user roles to protect our application endpoints. 1. Prerequisites To follow along with this tutorial, you will need: JDK 8 or JDK 11+ an IDE Gradle 5.5.0+ Spring Boot 2.1.0+ Keycloak 7.0.0+ If you prefer to use Apache Maven rather than Gradle, feel free to do so. You will need a Keycloak server installed and configured . If you are just getting started and want to know more about it, refer to my previous articles in this series to learn how to install Keycloak , how to do some basic configuration for authentication and authorization , and how to set up a client for our application . Throughout this tutorial, I will use a Keycloak server configured in the same way as explained in the mentioned articles. Should you be interested in having a look at how to secure a Spring Boot application with Keycloak , without using Spring Security, I wrote an article about that, too. But it's not a prerequisite to follow along with this one. On GitHub, you can find the source code for the application we are building in this tutorial. Let's get started! 2. The Demo Application The application we're going to build is for a fictitious public library. There are two groups of users: members can browse the books available in the library; librarians can also manage the books. For each group of users, we have a corresponding user role defined in Keycloak. Also, we have two users registered in the system: Sheldon is a member, Irma is both a member and a librarian. Name Username Roles Sheldon Cooper sheldon.cooper Member Irma Pince irma.pince Member, Librarian 3. Set Up A Spring Boot Application Our application will make use of three main libraries to set Spring up: spring-boot-starter-web , a starter for building web applications with Spring MVC ; spring-boot-starter-thymeleaf , a starter to use Thymleaf views for Spring MVC; spring-boot-starter-security , a starter for using Spring Security . The integration with Keycloak is made possible by the so-called client adapters . Keycloak client adapters are libraries that make it very easy to secure applications and services with Keycloak. For this project, we will need: the Spring Boot Adapter to take advantage of its auto-configuration features for Spring Boot; the Spring Security Adapter to use Keycloak as an authentication provider for Spring Security. The keycloak-spring-boot-starter library includes both of them, so we don't need anything else other than that. We can define all those dependencies in the gradle.build file for our project (or pom.xml if using Maven). buildscript { ext { springBootVersion = '2.1.9.RELEASE' } repositories { mavenCentral() } dependencies { classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\") } } apply plugin: 'java' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management' group = 'com.thomasvitale' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } ext { set('keycloakVersion', '7.0.1') } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-security' implementation 'org.keycloak:keycloak-spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.boot:spring-security-test' testImplementation 'org.keycloak:keycloak-test-helper' } dependencyManagement { imports { mavenBom \"org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}\" } } build.gradle That's it. We have set up a Spring Boot application, ready to leverage Spring Security and Keycloak. 4. Configure Keycloak In Spring Boot We should now provide some configuration for the integration between Spring Boot and Keycloak. 4.1. Basic Keycloak Configuration The default configuration file for Keycloak is keycloak.json , but thanks to the Keycloak Spring Boot Adapter we can use the native application.properties file (or application.yml ). keycloak.realm = public-library keycloak.resource = spring-boot-app keycloak.auth-server-url = http://localhost:8180/auth keycloak.ssl-required = external keycloak.public-client = true keycloak.principal-attribute = preferred_username application.properties Let's look at the properties one by one: keycloak.realm : the name of the realm, required; keycloak.resource : the client-id of the application, required; keycloak.auth-server-url : the base URL of the Keycloak server, required; keycloak.ssl-required : establishes if communications with the Keycloak server must happen over HTTPS. Here, it's set to external , meaning that it's only needed for external requests (default value). In production, instead, we should set it to all . Optional; keycloak.public-client : prevents the application from sending credentials to the Keycloak server ( false is the default value). We want to set it to true whenever we use public clients instead of confidential . Optional; keycloak.principal-attribute : the attribute with which to populate the UserPrincipal name. Optional. 4.2. Use The Keycloak Configuration Defined In application.properties Starting from Keycloak Spring Boot Adapter 7.0.0, due to some issues , the automatic discovery of the Keycloak configuration from the application.properties (or application.yml ) file will not work. To overcome this problem, we need to define a KeycloakSpringBootConfigResolver bean explicitly in a @Configuration class. @Configuration public class KeycloakConfig { @Bean public KeycloakSpringBootConfigResolver keycloakConfigResolver () { return new KeycloakSpringBootConfigResolver (); } } KeycloakConfig.java Without this bean, we would get an error. *************************** APPLICATION FAILED TO START *************************** Description: Parameter 1 of method setKeycloakSpringBootProperties in org.keycloak.adapters.springboot.KeycloakBaseSpringBootConfiguration required a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' that could not be found. Action: Consider defining a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' in your configuration. Process finished with exit code 1 Error thrown when no KeycloakSpringBootConfigResolver bean has been defined. This problem doesn't affect the Keycloak Spring Boot Adapter versions older than 7.0.0. 5. Implement The Application Logic We want to use Spring Security and Keycloak to make sure that the users of our application are authenticated and authorized, before accessing some protected endpoints. 5.1. The Controller Let's define three endpoints in a Spring MVC Controller class: /index will be freely accessible; /books will be accessible only by users with a Member role: they can browse the books available at the library; /manager will be accessible only by users with a Librarian role: they can manage the books. Later on, we will configure the last two endpoints to require the users to both be authenticated and have the proper role. It's also helpful adding a /logout endpoint for logging out conveniently. @Controller public class LibraryController { private final HttpServletRequest request ; private final BookRepository bookRepository ; @Autowired public LibraryController ( HttpServletRequest request , BookRepository bookRepository ) { this . request = request ; this . bookRepository = bookRepository ; } @GetMapping ( value = \"/\" ) public String getHome () { return \"index\" ; } @GetMapping ( value = \"/books\" ) public String getBooks ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"books\" ; } @GetMapping ( value = \"/manager\" ) public String getManager ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"manager\" ; } @GetMapping ( value = \"/logout\" ) public String logout () throws ServletException { request . logout (); return \"redirect:/\" ; } private void configCommonAttributes ( Model model ) { model . addAttribute ( \"name\" , getKeycloakSecurityContext (). getIdToken (). getGivenName ()); } private KeycloakSecurityContext getKeycloakSecurityContext () { return ( KeycloakSecurityContext ) request . getAttribute ( KeycloakSecurityContext . class . getName ()); } } LibraryController.java In the last method, we use the KeycloakSecurityContext to retrieve the IdToken , from which we can get the first name of the authenticated user. As a template engine, we're using Thymeleaf . We have a template for each resource as well as a unique template to handle unauthorized requests. You can check out the full source code of this demo project on GitHub to see how the templates look like. 5.2. The Repository The LibraryController class delegates the fetching of Book entities to a BookRepository class. The repository is implemented hard-coded in memory, for the sake of the example. @Repository public class BookRepository { private static Map < String , Book > books = new ConcurrentHashMap <> (); static { books . put ( \"B01\" , new Book ( \"B01\" , \"Harry Potter and the Deathly Hallows\" , \"J.K. Rowling\" )); books . put ( \"B02\" , new Book ( \"B02\" , \"The Lord of the Rings\" , \"J.R.R. Tolkien\" )); books . put ( \"B03\" , new Book ( \"B03\" , \"War and Peace\" , \"Leo Tolstoy\" )); } public List < Book > readAll () { List < Book > allBooks = new ArrayList <> ( books . values ()); allBooks . sort ( Comparator . comparing ( Book :: getId )); return allBooks ; } } BookRepository.java 5.3. The Entity The Book class is a POJO. public class Book { private String id ; private String title ; private String author ; public Book ( String id , String title , String author ) { this . id = id ; this . title = title ; this . author = author ; } } Book.java 6. Configure Spring Security With Keycloak If we tried to run the application at this point, we would notice that we could navigate through all the pages without any restriction. Let's change that. We want to configure Spring Security to: delegate the user authentication phase to Keycloak, following the OAuth 2.0/OpenID Connect Authorization Code Flow ; leverage the IdToken and AccessToken objects returned by Keycloak to define some access policies for our application endpoints. 6.1 Create a Security Configuration Class Let's proceed step by step, starting with the creation of a SecurityConfig class. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { } The SecurityConfig class should extend KeycloakWebSecurityConfigurerAdapter and be annotated with @KeycloakConfiguration . This annotation provides a Keycloak-based Spring Security configuration. It is a stereotype to wrap the two annotations required by a Spring Security configuration class: @Configuration and @EnableWebSecurity . It also packs a third annotation required by Keycloak to scan correctly the beans configured in the Keycloak Spring Security Adapter: @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class) . 6.2 Register Keycloak as the Authentication Provider Keycloak is our identity provider (IdP), so let's register it with the Spring Security authentication manager. @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } Here, we are registering KeycloakAuthenticationProvider with the authentication manager. In this way, Keycloak will be responsible for providing authentication services. Spring Security has a convention to handle security roles in a format like ROLE_ADMIN (where ADMIN is the actual security role name). I don't like this convention. In Keycloak, I prefer defining capitalized, lowercase role names. To solve the mismatch between the way we defined the user roles and the conventions used by Spring Security, we can specify a different configuration. So, we are setting a SimpleAuthorityMapper for the KeycloakAuthenticationProvider to prefix all the roles registered in Keycloak with the ROLE_ prefix. That will help Spring Security handling those roles in the best way. In Keycloak, we have defined two roles: Member and Librarian . In Spring Security, after the mapping, they will become ROLE_Member and ROLE_Librarian . We could even make the full role name uppercase by calling the method grantedAuthorityMapper.setConvertToUpperCase(true); , but for this demo application we are not doing that. 6.3 Define a Session Authentication Strategy The application that we are building, in Keycloak terms, is a public application with user interaction. In this scenario, the recommended session authentication strategy is RegisterSessionAuthenticationStrategy , which registers a user session after successful authentication. @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } When securing a service-to-service application, instead, we would use a NullAuthenticatedSessionStrategy . 6.4. Define Role-Based Access Security Policies So far, we have done all the necessary configuration to make Spring Security work seamlessly with Keycloak. Our final step is about defining some security constraints for the application endpoints. @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } The access policies for our application endpoints are: /books -> user must be authenticated and with at least one of the roles Member and Librarian . /manager -> user must be authenticated and with the role Librarian . any other endpoint will be freely accessible, no role constraint, no authentication required. 6.5 Handle Bean Definition Overriding Issues Since Spring 2.1.0, the spring.main.allow-bean-definition-overriding property is set to false by default, differently from the previous versions of Spring. It means that it's not allowed anymore to override a bean already defined. The SecurityConfig class we are working on extends KeycloakWebSecurityConfigurerAdapter , which defines an HttpSessionManager bean. But this bean has already been defined somewhere else in the Keycloak Adapter library. Therefore, it triggers an error in Spring 2.1.0+. *************************** APPLICATION FAILED TO START *************************** Description: The bean 'httpSessionManager', defined in class path resource [com/thomasvitale/keycloak/config/SecurityConfig.class], could not be registered. A bean with that name has already been defined in URL [.../org/keycloak/adapters/springsecurity/management/HttpSessionManager.class] and overriding is disabled. Action: Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true Process finished with exit code 1 Error thrown when multiple beans of the same type have been defined. We could fix the problem by changing the value for spring.main.allow-bean-definition-overriding to true. I prefer adjusting the bean definition to be loaded conditionally only if no other bean of that type has been defined. @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } 6.7 The Final Spring Security Configuration with Keycloak We have completed the security configuration. Here it is the final result. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } } SecurityConfig.java 7. Testing The Application It's time to verify if our code will work as intended. As you may have noticed, when setting up our build.gradle , we have defined a few dependencies for testing: spring-boot-starter-test , a starter for testing Spring Boot applications with JUnit, Hamcrest and Mockito; spring-security-test , which provides utilities to test Spring Security; keycloak-test-helper , which helps testing applications using Keycloak. Writing autotests for Spring applications secured by Keycloak will be the topic of a future article, so we're not going to use those libraries now. But here you have them, in case you're interested in diving into the topic. Instead, let's run our application and manually check if it's working correctly. 8. Using The Application Let's make sure our Keycloak server is up and running, and start our Spring application. By default, it will be available on http://localhost:8080 . Home page - Public The home page is freely accessible. We are not required to be authenticated nor to have a specific role. When we navigate to the other pages, the application redirects us to Keycloak for logging in. Login page provided by Keycloak After providing the right username and password, Keycloak redirects us back to our application. Depending on our role, we can visit the other pages as well. If we log in as a Member, like Sheldon Cooper, then we are allowed to see the Browse Books page. Browse Books - Protected (Member) Even if we are authenticated, we don't have the rights to navigate to the Manage Library page. If we try to do so, then we are told that we are not allowed in. If we log in as a Librarian , like Irma Pince, then we can also see the Manage Library page. Manage Library - Protected (Librarian) Finally, let's notice the Logout link in the top-right corner, which we can use to log out. The application is working correctly, and all the security constraints have been enforced. Well done! Conclusion In this tutorial, we have built a Spring Boot application and secured it with Spring Security and Keycloak. We have configured the integration with Keycloak leveraging the Spring Boot Adapter. Then, we have used the Spring Security Adapter to set Keycloak as the authentication provider for our application and protected some endpoints by defining access control policies based on user roles. If you are interested in Keycloak, have a look at my articles about this identity and access management solution. Are you thinking about using Keycloak for your next project? Have you already been using it? I'd like to hear your stories about Keycloak, leave a comment or let me know on Twitter ! Last update: 15/11/2019 Keycloak Series Introducing Keycloak for Identity and Access Management Keycloak Basic Configuration for Authentication and Authorization Keycloak Authentication Flows, SSO Protocols and Client Configuration Keycloak with Spring Series Securing a Spring Boot Application with Keycloak - A First Look Spring Security and Keycloak to Secure a Spring Boot Application - A First Look Source","title":"Spring Security Keycloak Spring Boot"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#1-prerequisites","text":"To follow along with this tutorial, you will need: JDK 8 or JDK 11+ an IDE Gradle 5.5.0+ Spring Boot 2.1.0+ Keycloak 7.0.0+ If you prefer to use Apache Maven rather than Gradle, feel free to do so. You will need a Keycloak server installed and configured . If you are just getting started and want to know more about it, refer to my previous articles in this series to learn how to install Keycloak , how to do some basic configuration for authentication and authorization , and how to set up a client for our application . Throughout this tutorial, I will use a Keycloak server configured in the same way as explained in the mentioned articles. Should you be interested in having a look at how to secure a Spring Boot application with Keycloak , without using Spring Security, I wrote an article about that, too. But it's not a prerequisite to follow along with this one. On GitHub, you can find the source code for the application we are building in this tutorial. Let's get started!","title":"1. Prerequisites"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#2-the-demo-application","text":"The application we're going to build is for a fictitious public library. There are two groups of users: members can browse the books available in the library; librarians can also manage the books. For each group of users, we have a corresponding user role defined in Keycloak. Also, we have two users registered in the system: Sheldon is a member, Irma is both a member and a librarian. Name Username Roles Sheldon Cooper sheldon.cooper Member Irma Pince irma.pince Member, Librarian","title":"2. The Demo Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#3-set-up-a-spring-boot-application","text":"Our application will make use of three main libraries to set Spring up: spring-boot-starter-web , a starter for building web applications with Spring MVC ; spring-boot-starter-thymeleaf , a starter to use Thymleaf views for Spring MVC; spring-boot-starter-security , a starter for using Spring Security . The integration with Keycloak is made possible by the so-called client adapters . Keycloak client adapters are libraries that make it very easy to secure applications and services with Keycloak. For this project, we will need: the Spring Boot Adapter to take advantage of its auto-configuration features for Spring Boot; the Spring Security Adapter to use Keycloak as an authentication provider for Spring Security. The keycloak-spring-boot-starter library includes both of them, so we don't need anything else other than that. We can define all those dependencies in the gradle.build file for our project (or pom.xml if using Maven). buildscript { ext { springBootVersion = '2.1.9.RELEASE' } repositories { mavenCentral() } dependencies { classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\") } } apply plugin: 'java' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management' group = 'com.thomasvitale' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } ext { set('keycloakVersion', '7.0.1') } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-security' implementation 'org.keycloak:keycloak-spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.boot:spring-security-test' testImplementation 'org.keycloak:keycloak-test-helper' } dependencyManagement { imports { mavenBom \"org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}\" } } build.gradle That's it. We have set up a Spring Boot application, ready to leverage Spring Security and Keycloak.","title":"3. Set Up A Spring Boot Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#4-configure-keycloak-in-spring-boot","text":"We should now provide some configuration for the integration between Spring Boot and Keycloak.","title":"4. Configure Keycloak In Spring Boot"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#41-basic-keycloak-configuration","text":"The default configuration file for Keycloak is keycloak.json , but thanks to the Keycloak Spring Boot Adapter we can use the native application.properties file (or application.yml ). keycloak.realm = public-library keycloak.resource = spring-boot-app keycloak.auth-server-url = http://localhost:8180/auth keycloak.ssl-required = external keycloak.public-client = true keycloak.principal-attribute = preferred_username application.properties Let's look at the properties one by one: keycloak.realm : the name of the realm, required; keycloak.resource : the client-id of the application, required; keycloak.auth-server-url : the base URL of the Keycloak server, required; keycloak.ssl-required : establishes if communications with the Keycloak server must happen over HTTPS. Here, it's set to external , meaning that it's only needed for external requests (default value). In production, instead, we should set it to all . Optional; keycloak.public-client : prevents the application from sending credentials to the Keycloak server ( false is the default value). We want to set it to true whenever we use public clients instead of confidential . Optional; keycloak.principal-attribute : the attribute with which to populate the UserPrincipal name. Optional.","title":"4.1. Basic Keycloak Configuration"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#42-use-the-keycloak-configuration-defined-in-applicationproperties","text":"Starting from Keycloak Spring Boot Adapter 7.0.0, due to some issues , the automatic discovery of the Keycloak configuration from the application.properties (or application.yml ) file will not work. To overcome this problem, we need to define a KeycloakSpringBootConfigResolver bean explicitly in a @Configuration class. @Configuration public class KeycloakConfig { @Bean public KeycloakSpringBootConfigResolver keycloakConfigResolver () { return new KeycloakSpringBootConfigResolver (); } } KeycloakConfig.java Without this bean, we would get an error. *************************** APPLICATION FAILED TO START *************************** Description: Parameter 1 of method setKeycloakSpringBootProperties in org.keycloak.adapters.springboot.KeycloakBaseSpringBootConfiguration required a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' that could not be found. Action: Consider defining a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' in your configuration. Process finished with exit code 1 Error thrown when no KeycloakSpringBootConfigResolver bean has been defined. This problem doesn't affect the Keycloak Spring Boot Adapter versions older than 7.0.0.","title":"4.2. Use The Keycloak Configuration Defined In application.properties"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#5-implement-the-application-logic","text":"We want to use Spring Security and Keycloak to make sure that the users of our application are authenticated and authorized, before accessing some protected endpoints.","title":"5. Implement The Application Logic"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#51-the-controller","text":"Let's define three endpoints in a Spring MVC Controller class: /index will be freely accessible; /books will be accessible only by users with a Member role: they can browse the books available at the library; /manager will be accessible only by users with a Librarian role: they can manage the books. Later on, we will configure the last two endpoints to require the users to both be authenticated and have the proper role. It's also helpful adding a /logout endpoint for logging out conveniently. @Controller public class LibraryController { private final HttpServletRequest request ; private final BookRepository bookRepository ; @Autowired public LibraryController ( HttpServletRequest request , BookRepository bookRepository ) { this . request = request ; this . bookRepository = bookRepository ; } @GetMapping ( value = \"/\" ) public String getHome () { return \"index\" ; } @GetMapping ( value = \"/books\" ) public String getBooks ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"books\" ; } @GetMapping ( value = \"/manager\" ) public String getManager ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"manager\" ; } @GetMapping ( value = \"/logout\" ) public String logout () throws ServletException { request . logout (); return \"redirect:/\" ; } private void configCommonAttributes ( Model model ) { model . addAttribute ( \"name\" , getKeycloakSecurityContext (). getIdToken (). getGivenName ()); } private KeycloakSecurityContext getKeycloakSecurityContext () { return ( KeycloakSecurityContext ) request . getAttribute ( KeycloakSecurityContext . class . getName ()); } } LibraryController.java In the last method, we use the KeycloakSecurityContext to retrieve the IdToken , from which we can get the first name of the authenticated user. As a template engine, we're using Thymeleaf . We have a template for each resource as well as a unique template to handle unauthorized requests. You can check out the full source code of this demo project on GitHub to see how the templates look like.","title":"5.1. The Controller"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#52-the-repository","text":"The LibraryController class delegates the fetching of Book entities to a BookRepository class. The repository is implemented hard-coded in memory, for the sake of the example. @Repository public class BookRepository { private static Map < String , Book > books = new ConcurrentHashMap <> (); static { books . put ( \"B01\" , new Book ( \"B01\" , \"Harry Potter and the Deathly Hallows\" , \"J.K. Rowling\" )); books . put ( \"B02\" , new Book ( \"B02\" , \"The Lord of the Rings\" , \"J.R.R. Tolkien\" )); books . put ( \"B03\" , new Book ( \"B03\" , \"War and Peace\" , \"Leo Tolstoy\" )); } public List < Book > readAll () { List < Book > allBooks = new ArrayList <> ( books . values ()); allBooks . sort ( Comparator . comparing ( Book :: getId )); return allBooks ; } } BookRepository.java","title":"5.2. The Repository"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#53-the-entity","text":"The Book class is a POJO. public class Book { private String id ; private String title ; private String author ; public Book ( String id , String title , String author ) { this . id = id ; this . title = title ; this . author = author ; } } Book.java","title":"5.3. The Entity"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#6-configure-spring-security-with-keycloak","text":"If we tried to run the application at this point, we would notice that we could navigate through all the pages without any restriction. Let's change that. We want to configure Spring Security to: delegate the user authentication phase to Keycloak, following the OAuth 2.0/OpenID Connect Authorization Code Flow ; leverage the IdToken and AccessToken objects returned by Keycloak to define some access policies for our application endpoints.","title":"6. Configure Spring Security With Keycloak"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#61-create-a-security-configuration-class","text":"Let's proceed step by step, starting with the creation of a SecurityConfig class. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { } The SecurityConfig class should extend KeycloakWebSecurityConfigurerAdapter and be annotated with @KeycloakConfiguration . This annotation provides a Keycloak-based Spring Security configuration. It is a stereotype to wrap the two annotations required by a Spring Security configuration class: @Configuration and @EnableWebSecurity . It also packs a third annotation required by Keycloak to scan correctly the beans configured in the Keycloak Spring Security Adapter: @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class) .","title":"6.1 Create a Security Configuration Class"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#62-register-keycloak-as-the-authentication-provider","text":"Keycloak is our identity provider (IdP), so let's register it with the Spring Security authentication manager. @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } Here, we are registering KeycloakAuthenticationProvider with the authentication manager. In this way, Keycloak will be responsible for providing authentication services. Spring Security has a convention to handle security roles in a format like ROLE_ADMIN (where ADMIN is the actual security role name). I don't like this convention. In Keycloak, I prefer defining capitalized, lowercase role names. To solve the mismatch between the way we defined the user roles and the conventions used by Spring Security, we can specify a different configuration. So, we are setting a SimpleAuthorityMapper for the KeycloakAuthenticationProvider to prefix all the roles registered in Keycloak with the ROLE_ prefix. That will help Spring Security handling those roles in the best way. In Keycloak, we have defined two roles: Member and Librarian . In Spring Security, after the mapping, they will become ROLE_Member and ROLE_Librarian . We could even make the full role name uppercase by calling the method grantedAuthorityMapper.setConvertToUpperCase(true); , but for this demo application we are not doing that.","title":"6.2 Register Keycloak as the Authentication Provider"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#63-define-a-session-authentication-strategy","text":"The application that we are building, in Keycloak terms, is a public application with user interaction. In this scenario, the recommended session authentication strategy is RegisterSessionAuthenticationStrategy , which registers a user session after successful authentication. @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } When securing a service-to-service application, instead, we would use a NullAuthenticatedSessionStrategy .","title":"6.3 Define a Session Authentication Strategy"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#64-define-role-based-access-security-policies","text":"So far, we have done all the necessary configuration to make Spring Security work seamlessly with Keycloak. Our final step is about defining some security constraints for the application endpoints. @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } The access policies for our application endpoints are: /books -> user must be authenticated and with at least one of the roles Member and Librarian . /manager -> user must be authenticated and with the role Librarian . any other endpoint will be freely accessible, no role constraint, no authentication required.","title":"6.4. Define Role-Based Access Security Policies"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#65-handle-bean-definition-overriding-issues","text":"Since Spring 2.1.0, the spring.main.allow-bean-definition-overriding property is set to false by default, differently from the previous versions of Spring. It means that it's not allowed anymore to override a bean already defined. The SecurityConfig class we are working on extends KeycloakWebSecurityConfigurerAdapter , which defines an HttpSessionManager bean. But this bean has already been defined somewhere else in the Keycloak Adapter library. Therefore, it triggers an error in Spring 2.1.0+. *************************** APPLICATION FAILED TO START *************************** Description: The bean 'httpSessionManager', defined in class path resource [com/thomasvitale/keycloak/config/SecurityConfig.class], could not be registered. A bean with that name has already been defined in URL [.../org/keycloak/adapters/springsecurity/management/HttpSessionManager.class] and overriding is disabled. Action: Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true Process finished with exit code 1 Error thrown when multiple beans of the same type have been defined. We could fix the problem by changing the value for spring.main.allow-bean-definition-overriding to true. I prefer adjusting the bean definition to be loaded conditionally only if no other bean of that type has been defined. @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); }","title":"6.5 Handle Bean Definition Overriding Issues"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#67-the-final-spring-security-configuration-with-keycloak","text":"We have completed the security configuration. Here it is the final result. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } } SecurityConfig.java","title":"6.7 The Final Spring Security Configuration with Keycloak"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#7-testing-the-application","text":"It's time to verify if our code will work as intended. As you may have noticed, when setting up our build.gradle , we have defined a few dependencies for testing: spring-boot-starter-test , a starter for testing Spring Boot applications with JUnit, Hamcrest and Mockito; spring-security-test , which provides utilities to test Spring Security; keycloak-test-helper , which helps testing applications using Keycloak. Writing autotests for Spring applications secured by Keycloak will be the topic of a future article, so we're not going to use those libraries now. But here you have them, in case you're interested in diving into the topic. Instead, let's run our application and manually check if it's working correctly.","title":"7. Testing The Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#8-using-the-application","text":"Let's make sure our Keycloak server is up and running, and start our Spring application. By default, it will be available on http://localhost:8080 . Home page - Public The home page is freely accessible. We are not required to be authenticated nor to have a specific role. When we navigate to the other pages, the application redirects us to Keycloak for logging in. Login page provided by Keycloak After providing the right username and password, Keycloak redirects us back to our application. Depending on our role, we can visit the other pages as well. If we log in as a Member, like Sheldon Cooper, then we are allowed to see the Browse Books page. Browse Books - Protected (Member) Even if we are authenticated, we don't have the rights to navigate to the Manage Library page. If we try to do so, then we are told that we are not allowed in. If we log in as a Librarian , like Irma Pince, then we can also see the Manage Library page. Manage Library - Protected (Librarian) Finally, let's notice the Logout link in the top-right corner, which we can use to log out. The application is working correctly, and all the security constraints have been enforced. Well done!","title":"8. Using The Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#conclusion","text":"In this tutorial, we have built a Spring Boot application and secured it with Spring Security and Keycloak. We have configured the integration with Keycloak leveraging the Spring Boot Adapter. Then, we have used the Spring Security Adapter to set Keycloak as the authentication provider for our application and protected some endpoints by defining access control policies based on user roles. If you are interested in Keycloak, have a look at my articles about this identity and access management solution. Are you thinking about using Keycloak for your next project? Have you already been using it? I'd like to hear your stories about Keycloak, leave a comment or let me know on Twitter ! Last update: 15/11/2019","title":"Conclusion"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#keycloak-series","text":"Introducing Keycloak for Identity and Access Management Keycloak Basic Configuration for Authentication and Authorization Keycloak Authentication Flows, SSO Protocols and Client Configuration","title":"Keycloak Series"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#keycloak-with-spring-series","text":"Securing a Spring Boot Application with Keycloak - A First Look Spring Security and Keycloak to Secure a Spring Boot Application - A First Look Source","title":"Keycloak with Spring Series"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/","text":"Uploading and Parsing CSV File using Spring Boot CSV \u2014 short for Comma Separated Values \u2014 is a popular data exchange format that is frequently used for importing and exporting data between different servers and applications. A CSV file is just a plain-text file that stores data in a tabular format where each row consists of one or more fields and each column represents a specific field. These fields are separated by a delimiter usually a comma or a tab. In an earlier article, I wrote about exporting and downloading data as a CSV file in Spring Boot. In this article, you'll learn how to upload and parse a CSV file using Spring Boot & Thymeleaf. Note: To read and parse a CSV file in core Java, check out reading and parsing a CSV file in Java tutorial. Dependencies To upload parse a CSV file in Spring Boot, you only need spring-boot-starter-web and opencsv dependencies. Additionally, we also need spring-boot-starter-thymeleaf for serving Thymeleaf templates. The OpenCSV 3rd-party library will be used for parsing the uploaded file. Add the following dependencies to your Gradle project's build.gradle file: implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'com.opencsv:opencsv:5.0' For Maven, include the following dependencies to your pom.xml file: <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> </dependency> <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 5.0 </version> </dependency> To create a new Spring Boot project from scratch, you can either use Spring Initializr or Spring Boot CLI to bootstrap a new application with the above-mentioned dependencies. Model Class OpenCSV allows us to directly map the CSV record fields to a Java object . Let us create a simple model class named User.java that will be used to populate data from the CSV file: User.java public class User { @CsvBindByName private long id ; @CsvBindByName private String name ; @CsvBindByName private String email ; @CsvBindByName ( column = \"country\" ) private String countryCode ; @CsvBindByName private int age ; public User ( long id , String name , String email , String countryCode , int age ) { this . id = id ; this . name = name ; this . email = email ; this . countryCode = countryCode ; this . age = age ; } } As you can see above, we have annotated the User class attributes with @CsvBindByName annotation. This annotation is provided by OpenCSV to specify a binding between a column name of the CSV input and a field in a bean. You can only use the @CsvBindByName annotation if the CSV file has a header. It accepts up to five parameters like column , required , and locale . All parameters are options except column which is also only required if the header column name in the CSV file is different from the bean field name. Spring Boot Controller Next, create a Spring Boot controller class named UploadController.java that handles the uploading and parsing of a CSV file: UploadController.java @Controller public class UploadController { @GetMapping ( \"/\" ) public String index () { return \"index\" ; } @PostMapping ( \"/upload-csv-file\" ) public String uploadCSVFile ( @RequestParam ( \"file\" ) MultipartFile file , Model model ) { if ( file . isEmpty ()) { model . addAttribute ( \"message\" , \"Please select a CSV file to upload.\" ); model . addAttribute ( \"status\" , false ); } else { try ( Reader reader = new BufferedReader ( new InputStreamReader ( file . getInputStream ()))) { CsvToBean < User > csvToBean = new CsvToBeanBuilder ( reader ) . withType ( User . class ) . withIgnoreLeadingWhiteSpace ( true ) . build (); List < User > users = csvToBean . parse (); model . addAttribute ( \"users\" , users ); model . addAttribute ( \"status\" , true ); } catch ( Exception ex ) { model . addAttribute ( \"message\" , \"An error occurred while processing the CSV file.\" ); model . addAttribute ( \"status\" , false ); } } return \"file-upload-status\" ; } } As you can see above, we have annotated the UploadController class with @Controller to indicate that the annotated class is a \"Controller\" (e.g. a web controller). Each method is decorated with @GetMapping or @PostMapping to bind the path and the HTTP action with that particular method: GET / route simply renders an HTML form to allow the user to upload a CSV file. POST /upload-csv-file route handles HTTP multipart/form-data requests and accepts a MultipartFile object as a route parameter. This is where we actually parse the uploaded CSV file into a list of User objects by using the CsvToBean class. This method returns an HTML response to either display a list of users or an error message. Thymeleaf Templates The next step is to create Thymeleaf templates to allow users to upload a CSV file and display results. To nicely display the HTML form, we will use Bootstrap 4 default styles. HTML Form for File Upload Here is a simple HTML form that enables users to select a CSV file for upload: index.html < form method = \"POST\" th:action = \"@{/upload-csv-file}\" enctype = \"multipart/form-data\" > < div class = \"form-group mt-3\" > < label for = \"file\" > Select a CSV file </ label > < input type = \"file\" name = \"file\" class = \"form-control-file\" id = \"file\" accept = \".csv\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Import Users </ button > </ form > Display Upload Results Let us create another Thymeleaf template to display the upload results: file-upload-status.html < div class = \"container py-5\" > < div class = \"row\" > < div class = \"col-10 mx-auto\" > < h1 > File Upload Status </ h1 > < div class = \"alert alert-danger\" role = \"alert\" th:if = \"${!status}\" > < strong > Error: </ strong > < span th:text = \"${message}\" ></ span > </ div > < table class = \"table table-striped\" th:if = \"${status}\" > < thead > < tr > < th scope = \"col\" > # </ th > < th scope = \"col\" > ID </ th > < th scope = \"col\" > Name </ th > < th scope = \"col\" > Email </ th > < th scope = \"col\" > Country </ th > < th scope = \"col\" > Age </ th > </ tr > </ thead > < tbody > < tr th:each = \"user, i : ${users}\" > < th scope = \"row\" th:text = \"${i.index + 1}\" ></ th > < td th:text = \"${user.id}\" ></ td > < td th:text = \"${user.name}\" ></ td > < td th:text = \"${user.email}\" ></ td > < td th:text = \"${user.countryCode}\" ></ td > < td th:text = \"${user.age}\" ></ td > </ tr > </ tbody > </ table > </ div > </ div > </ div > Running & Testing the Application First of all, you need to create the main application class for Spring Boot application as shown below: @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun Once the Spring Boot application is started, open http://localhost:8080 in your favorite web browser to see the upload form. Here is how it looks like: As shown in the above image, select a CSV file and then click on Import Users button to kickstart file upload operation. If everything goes right, you should see a list of users displayed as shown in the following screenshot: If you forget to select a CSV file or the CSV file is not valid, you should see the following error message displayed on the screen: Finally, here is the sample CSV file I just uploaded in the above example: users.csv id,name,email,country,age 100,Atta Shah,atta@example.com,PK,30 101,Alex Jones,alex@example.com,DE,35 102,Jovan Lee,jovan@example.com,FR,25 103,Greg Hover,greg@example.com,US,45 Source Code: Download the complete source code from GitHub available under MIT license. Conclusion That's all folks! In this article, you have learned how to upload and parse a CSV file using Spring Boot and Thymeleaf web application. We used OpenCSV , a popular open-source library, for parsing the uploaded file into a list of Java objects. Further Reading If you like this article, you may be interested in other Spring Boot related articles: Export & Download Data as CSV File in Spring Boot Uploading Files in Spring Boot How to upload a file with Ajax in Spring Boot Reading and writing CSV files using OpenCSV \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Uploading and Parsing CSV File using Spring Boot"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#dependencies","text":"To upload parse a CSV file in Spring Boot, you only need spring-boot-starter-web and opencsv dependencies. Additionally, we also need spring-boot-starter-thymeleaf for serving Thymeleaf templates. The OpenCSV 3rd-party library will be used for parsing the uploaded file. Add the following dependencies to your Gradle project's build.gradle file: implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'com.opencsv:opencsv:5.0' For Maven, include the following dependencies to your pom.xml file: <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> </dependency> <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 5.0 </version> </dependency> To create a new Spring Boot project from scratch, you can either use Spring Initializr or Spring Boot CLI to bootstrap a new application with the above-mentioned dependencies.","title":"Dependencies"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#model-class","text":"OpenCSV allows us to directly map the CSV record fields to a Java object . Let us create a simple model class named User.java that will be used to populate data from the CSV file: User.java public class User { @CsvBindByName private long id ; @CsvBindByName private String name ; @CsvBindByName private String email ; @CsvBindByName ( column = \"country\" ) private String countryCode ; @CsvBindByName private int age ; public User ( long id , String name , String email , String countryCode , int age ) { this . id = id ; this . name = name ; this . email = email ; this . countryCode = countryCode ; this . age = age ; } } As you can see above, we have annotated the User class attributes with @CsvBindByName annotation. This annotation is provided by OpenCSV to specify a binding between a column name of the CSV input and a field in a bean. You can only use the @CsvBindByName annotation if the CSV file has a header. It accepts up to five parameters like column , required , and locale . All parameters are options except column which is also only required if the header column name in the CSV file is different from the bean field name.","title":"Model Class"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#spring-boot-controller","text":"Next, create a Spring Boot controller class named UploadController.java that handles the uploading and parsing of a CSV file: UploadController.java @Controller public class UploadController { @GetMapping ( \"/\" ) public String index () { return \"index\" ; } @PostMapping ( \"/upload-csv-file\" ) public String uploadCSVFile ( @RequestParam ( \"file\" ) MultipartFile file , Model model ) { if ( file . isEmpty ()) { model . addAttribute ( \"message\" , \"Please select a CSV file to upload.\" ); model . addAttribute ( \"status\" , false ); } else { try ( Reader reader = new BufferedReader ( new InputStreamReader ( file . getInputStream ()))) { CsvToBean < User > csvToBean = new CsvToBeanBuilder ( reader ) . withType ( User . class ) . withIgnoreLeadingWhiteSpace ( true ) . build (); List < User > users = csvToBean . parse (); model . addAttribute ( \"users\" , users ); model . addAttribute ( \"status\" , true ); } catch ( Exception ex ) { model . addAttribute ( \"message\" , \"An error occurred while processing the CSV file.\" ); model . addAttribute ( \"status\" , false ); } } return \"file-upload-status\" ; } } As you can see above, we have annotated the UploadController class with @Controller to indicate that the annotated class is a \"Controller\" (e.g. a web controller). Each method is decorated with @GetMapping or @PostMapping to bind the path and the HTTP action with that particular method: GET / route simply renders an HTML form to allow the user to upload a CSV file. POST /upload-csv-file route handles HTTP multipart/form-data requests and accepts a MultipartFile object as a route parameter. This is where we actually parse the uploaded CSV file into a list of User objects by using the CsvToBean class. This method returns an HTML response to either display a list of users or an error message.","title":"Spring Boot Controller"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#thymeleaf-templates","text":"The next step is to create Thymeleaf templates to allow users to upload a CSV file and display results. To nicely display the HTML form, we will use Bootstrap 4 default styles.","title":"Thymeleaf Templates"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#html-form-for-file-upload","text":"Here is a simple HTML form that enables users to select a CSV file for upload: index.html < form method = \"POST\" th:action = \"@{/upload-csv-file}\" enctype = \"multipart/form-data\" > < div class = \"form-group mt-3\" > < label for = \"file\" > Select a CSV file </ label > < input type = \"file\" name = \"file\" class = \"form-control-file\" id = \"file\" accept = \".csv\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Import Users </ button > </ form >","title":"HTML Form for File Upload"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#display-upload-results","text":"Let us create another Thymeleaf template to display the upload results: file-upload-status.html < div class = \"container py-5\" > < div class = \"row\" > < div class = \"col-10 mx-auto\" > < h1 > File Upload Status </ h1 > < div class = \"alert alert-danger\" role = \"alert\" th:if = \"${!status}\" > < strong > Error: </ strong > < span th:text = \"${message}\" ></ span > </ div > < table class = \"table table-striped\" th:if = \"${status}\" > < thead > < tr > < th scope = \"col\" > # </ th > < th scope = \"col\" > ID </ th > < th scope = \"col\" > Name </ th > < th scope = \"col\" > Email </ th > < th scope = \"col\" > Country </ th > < th scope = \"col\" > Age </ th > </ tr > </ thead > < tbody > < tr th:each = \"user, i : ${users}\" > < th scope = \"row\" th:text = \"${i.index + 1}\" ></ th > < td th:text = \"${user.id}\" ></ td > < td th:text = \"${user.name}\" ></ td > < td th:text = \"${user.email}\" ></ td > < td th:text = \"${user.countryCode}\" ></ td > < td th:text = \"${user.age}\" ></ td > </ tr > </ tbody > </ table > </ div > </ div > </ div >","title":"Display Upload Results"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#running-testing-the-application","text":"First of all, you need to create the main application class for Spring Boot application as shown below: @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun Once the Spring Boot application is started, open http://localhost:8080 in your favorite web browser to see the upload form. Here is how it looks like: As shown in the above image, select a CSV file and then click on Import Users button to kickstart file upload operation. If everything goes right, you should see a list of users displayed as shown in the following screenshot: If you forget to select a CSV file or the CSV file is not valid, you should see the following error message displayed on the screen: Finally, here is the sample CSV file I just uploaded in the above example: users.csv id,name,email,country,age 100,Atta Shah,atta@example.com,PK,30 101,Alex Jones,alex@example.com,DE,35 102,Jovan Lee,jovan@example.com,FR,25 103,Greg Hover,greg@example.com,US,45 Source Code: Download the complete source code from GitHub available under MIT license.","title":"Running &amp; Testing the Application"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#conclusion","text":"That's all folks! In this article, you have learned how to upload and parse a CSV file using Spring Boot and Thymeleaf web application. We used OpenCSV , a popular open-source library, for parsing the uploaded file into a list of Java objects.","title":"Conclusion"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#further-reading","text":"If you like this article, you may be interested in other Spring Boot related articles: Export & Download Data as CSV File in Spring Boot Uploading Files in Spring Boot How to upload a file with Ajax in Spring Boot Reading and writing CSV files using OpenCSV \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Further Reading"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/","text":"\u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442... \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0430\u0448\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c. \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0447\u0430\u0441\u0442\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u043e\u0447\u043a\u0438 \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u201cTest it\u201d \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c TestController \u0438\u043b\u0438 MyServiceTestClient . \u0422\u043e \u0447\u0442\u043e \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041e\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443, \u043d\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0442\u0435\u0441\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u044f \u0438\u043b\u0438 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0430 \u0438 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0432\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 UI \u0438 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432\u0441\u0435 \u0435\u0449\u0435 \u0441\u043b\u043e\u0436\u043d\u0435\u0435. \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432? We need to go deeper \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043f\u0443\u0441\u0442\u0438\u043c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0438 \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u043c\u0441\u044f \u043a \u0432\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u0438: \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 , \u0438\u043b\u0438 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0430\u043d\u0433\u043b. unit testing) \u2014 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0418\u0434\u0435\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0443\u0436\u0435 \u043e\u0442\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2013 \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0431\u0430\u0441\u0442\u0438\u043e\u043d \u043d\u0430 \u0431\u043e\u0440\u044c\u0431\u0435 \u0441 \u0431\u0430\u0433\u0430\u043c\u0438. \u0417\u0430 \u043d\u0438\u043c \u0435\u0449\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435, \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u043e\u0435 \u0438, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0440\u0443\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u00ab\u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\u00bb. \u041d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u0430\u043c? \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442: \u00ab\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430\u00bb. \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0435\u0441\u043b\u0438 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0430\u0439\u0442-\u0432\u0438\u0437\u0438\u0442\u043a\u0443 \u0438\u0437 5 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0438\u0441\u044c\u043c\u0430. \u041d\u0430 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0443\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u0441\u044f, \u043d\u0438\u0447\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0435\u043c\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u00ab\u0440\u0443\u043a\u0430\u043c\u0438\u00bb \u0412\u044b \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u043c \u0441\u0430\u0439\u0442\u043e\u043c/\u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0444\u043b\u0435\u0448-\u0438\u0433\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c\u0438 \u2013 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430/\u0430\u043d\u0438\u043c\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u043a\u0438. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043d\u0435\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0421\u0440\u043e\u043a \u2013 \u043e\u0442 \u0434\u0432\u0443\u0445 \u043d\u0435\u0434\u0435\u043b\u044c \u0434\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0432\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u2013 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0436\u0435\u043b\u0435\u0437\u0430 \u0438 \u0441\u043e\u0444\u0442\u0430, \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435. \u0421\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 1-2 \u0434\u043d\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u0430\u0440\u043e\u043c \u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u0438\u044f. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0443\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0435\u0431\u044f \u0441\u0430\u043c, \u0432\u0441\u043b\u0435\u0434 \u0437\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0418\u043d\u043e\u0433\u0434\u0430 \u043a\u043e\u0434 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0447\u0442\u043e \u0435\u0433\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u2014 ~\u0433\u043e\u0432~ \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0412 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c (\u0441\u0436\u0430\u0442\u044b\u0435 \u0441\u0440\u043e\u043a\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u044b, \u0440\u0430\u0437\u043c\u044b\u0442\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f) \u0432\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u042f \u0437\u043d\u0430\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u043b\u0438 \u0441\u0435\u0431\u044f \u043d\u0430 \u0444\u043e\u0442\u043e \u043d\u0438\u0436\u0435, \u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438. \u041b\u044e\u0431\u043e\u0439 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u0435\u0437 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043e\u0431\u0440\u0435\u0447\u0435\u043d \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0441 \u043d\u0443\u043b\u044f \u0412 \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044f \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 \u0433\u043e\u0434\u0430. \u041e\u043d\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: \u0411\u0435\u0437 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u043f\u0430\u0433\u0435\u0442\u0442\u0438-\u043a\u043e\u0434\u043e\u043c \u0438 \u0443\u0432\u043e\u043b\u0438\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438. \u041d\u0438\u043a\u0442\u043e \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u0441\u0435 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0414\u0430 \u0438 \u0447\u0442\u043e \u043e\u043d\u043e \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0442\u0434\u0430\u043b\u0435\u043d\u043d\u043e. \u0421 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442. \u0422\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0441\u0442\u044c, \u043d\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442, \u0438 \u043a\u0430\u043a\u043e\u0439 \u043e\u0442 \u043d\u0438\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e. \u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a\u0430\u044f-\u043d\u0438\u043a\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0435\u0441\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0430\u0431\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u044c. \u041c\u043e\u0436\u043d\u043e \u043e\u0442\u044b\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0445\u0438\u0442\u0440\u043e\u0441\u043f\u043b\u0435\u0442\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0421 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c. \u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442. \u0415\u0441\u043b\u0438 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0438\u0445 \u043c\u043d\u043e\u0433\u043e. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0418 \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u2013 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0439: \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0422\u0435\u0441\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043a\u0430\u043a\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0438 \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0436\u0434\u0443\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u0422\u0430\u043a\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435. \u0412 \u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u0422\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e: \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0430\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0438\u0447, \u0441\u0445\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 getting started guide\u2019\u043e\u043c . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0438 \u0443\u0445\u043e\u0434\u0438\u0442\u044c. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u0430\u043c\u0430 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u0441\u0435\u0431\u0435 \u043f\u0443\u0442\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u2013 \u043a\u0440\u0435\u043f\u043a\u0438\u0439 \u043e\u0440\u0435\u0448\u0435\u043a, \u0441 \u043d\u0438\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0445 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u0435\u043d \u0438\u043b\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f. \u041f\u043e\u0447\u0435\u043c\u0443 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0430? \u041a\u043e\u043b\u043b\u0435\u0433\u0438 \u0438\u0437 ScrumTrek \u0443\u0432\u0435\u0440\u044f\u044e\u0442, \u0447\u0442\u043e \u0432\u0441\u0435\u043c\u0443 \u0432\u0438\u043d\u043e\u0439 \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0432\u043b\u0430\u0441\u0442\u0435\u043b\u0438\u043d \u0414\u0430\u0440\u0442 \u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u0438\u0443\u0441 . \u042f \u0443\u0431\u0435\u0436\u0434\u0435\u043d, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043f\u0440\u0430\u0432\u0434\u0435. \u0411\u0435\u0437\u0434\u0443\u043c\u043d\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u043d\u043e \u0432\u0440\u0435\u0434\u0438\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 . \u0415\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0443 \u0432\u0430\u0441 \u0431\u044b\u043b \u043e\u0434\u0438\u043d \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442, \u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0432 \u0442\u0435\u0441\u0442\u044b, \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0432 \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u0435, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u0432\u0430. \u0418 \u0443\u0434\u0432\u043e\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u043d\u0435 \u0432\u0437\u044f\u043b\u0430 \u0432\u0435\u0440\u0445, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b . \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b: \u0411\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u043c\u0438 \u041d\u0435 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0438 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f (\u0434\u0430\u0436\u0435 \u043d\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043d\u044f\u0442\u044c \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f) \u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0435\u0434\u0438\u043d\u0443\u044e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u044e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u043e\u0432, \u043d\u0443\u0436\u043d\u044b \u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u043b\u044f. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u0439 VCS \u0422\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a. \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u041e\u0431\u0449\u0430\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f: \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0435, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 Tests; \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u041e\u0434\u043d\u0430 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a: \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b .Core, .Bl \u0438 .Web? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0449\u0435 .Core.Tests, .Bl.Tests \u0438 .Web.Tests. \u0423 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0434-\u044d\u0444\u0444\u0435\u043a\u0442. \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d *.Tests.dll \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 ProblemResolver? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 ProblemResolverTests. \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c. \u0418\u043d\u0430\u0447\u0435 \u0432\u044b \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043a\u0430\u0442\u0438\u0442\u0435\u0441\u044c ~\u0432 \u0443\u043d\u044b\u043b\u043e\u0435 \u0433\u043e~ \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0438\u043f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 (\u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442). \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u00ab\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439\u00bb \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 TestLogin \u2013 \u043d\u0435 \u0441\u0430\u043c\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430. \u0427\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f? \u041a\u0430\u043a\u043e\u0432\u044b \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b? \u041c\u043e\u0433\u0443\u0442 \u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438? \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0430\u043a\u043e\u0439: [\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434]_[\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439]_[\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435] . \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Calculator, \u0430 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434 Sum, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 (\u043f\u0440\u0438\u0432\u0435\u0442, \u041a\u044d\u043f!) \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \u0441lass CalculatorTests { public void Sum_2Plus5_7Returned () { // \u2026 } } \u0422\u0430\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u0430 \u0431\u0435\u0437 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043a\u043e\u0434\u0443. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432\u0430\u043c \u0412\u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b. \u042f \u0432\u0438\u0434\u0435\u043b \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b (\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043d\u0435 \u044e\u043d\u0438\u0442, \u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0435) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041d\u0435 \u043d\u0430\u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0432\u0441\u0435 \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0430 \u0432\u0430\u0441. \u0423\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043e\u0431\u0437\u043e\u0440\u0443 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043d\u043e\u0433\u0438\u0435 .NET \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 MsTest \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u0442\u0443\u0434\u0438\u0438. \u041c\u043d\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e \u0434\u0443\u0448\u0435 NUnit. \u041e\u043d \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u043f\u043e\u043a \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042f \u043c\u043e\u0433\u0443 \u0442\u0430\u043a \u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 NUnit \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0420\u0435\u0448\u0430\u0440\u043f\u0435\u0440\u0430. \u041a\u043e\u043c\u0443-\u0442\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c xUnit\u2019\u0430: \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f IDisposable \u043a\u0430\u043a TearDown. \u0427\u0442\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0430 \u0447\u0442\u043e \u2013 \u043d\u0435\u0442? \u041e\u0434\u043d\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 100%, \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u044d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0439 \u0442\u0440\u0430\u0442\u043e\u0439 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0440\u0430\u0441\u0447\u0435\u0440\u0442\u0438\u0442\u0435 \u043b\u0438\u0441\u0442 \u0431\u0443\u043c\u0430\u0433\u0438 \u043f\u043e \u043e\u0441\u0438 X \u0438 Y, \u0433\u0434\u0435 X \u2013 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c, \u0430 Y \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438: \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0434\u0435\u0441\u044c \u0438 \u0442\u0430\u043a \u0432\u0441\u0435 \u044f\u0441\u043d\u043e. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0425\u043c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434, \u0442\u0443\u0442 \u043f\u0430\u0445\u043d\u0435\u0442 God Object\u2019\u043e\u043c \u0438 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c\u044e. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041c\u044b \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u0443 \u043d\u0430\u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b. \u0422\u0430\u043a \u0437\u0430\u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c? \u0425\u043e\u0447\u0443 \u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u0430\u043c \u0432\u0441\u0435 \u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 . \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0427\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f: C\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u042d\u0442\u043e \u043d\u0435\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u043b\u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b. \u0422\u0435\u0441\u0442\u044b \u0432\u0430\u0436\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u043e\u0442\u0435\u0440\u0438 Mars Climate Orbiter 23 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f 1999 \u0433\u043e\u0434\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0435: \u043e\u0434\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0447\u0438\u0442\u0430\u043b\u043e \u00ab\u0432 \u0434\u044e\u0439\u043c\u0430\u0445\u00bb, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u2013 \u00ab\u0432 \u043c\u0435\u0442\u0440\u0430\u0445\u00bb, \u0438 \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u043b\u0438 \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c, \u0435\u0441\u043b\u0438 \u0431\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u00ab\u0448\u0432\u044b\u00bb \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u0442\u0435\u0441\u0442\u0430 \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0437\u0430\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043b \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0445\u043e\u0434 AAA (arrange, act, assert) . \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u043c: class CalculatorTests { public void Sum_2Plus5_7Returned () { // arrange var calc = new Calculator (); // act var res = calc . Sum ( 2 , 5 ); // assert Assert . AreEqual ( 7 , res ); } } \u0422\u0430\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0435\u043c class CalculatorTests { public void Sum_2Plus5_7Returned () { Assert . AreEqual ( 7 , new Calculator (). sum ( 2 , 5 )); } } \u0410 \u0437\u043d\u0430\u0447\u0438\u0442, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c. \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u0435\u043d (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438, \u0438 \u0432\u0441\u043a\u043e\u0440\u0435 \u0432\u0430\u043c \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c. \u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0414\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440. \u0423 \u043d\u0435\u0433\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043c\u0430\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _orderManager ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _ orderManager . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0431\u0435\u0440\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 AccountData \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e \u043d\u0430\u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u041c\u044b \u0436\u0435 \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u043e\u043e\u043f\u0430\u0440\u043a \u0444\u0430\u0439\u043b\u043e\u0432 *.config. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u043c\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0432 \u0442\u043e\u043c \u0436\u0435 \u0434\u0443\u0445\u0435, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041a\u0430\u043a \u043c\u044b \u043f\u043e\u043c\u043d\u0438\u043c, \u044d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u043c\u044b \u043f\u043e\u0434\u0441\u0443\u043d\u0435\u043c \u0444\u0430\u043b\u044c\u0448\u0438\u0432\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e (fake) . \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a: public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _oms ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _oms . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } /// <summary> /// For testability /// </summary> /// <param name=\"accountData\"></param> /// <param name=\"userManager\"></param> public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } ``` \u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043d\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 , \u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 . ### Fakes : stubs & mocks \u041c\u044b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0434\u0441\u0443\u043d\u0443\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0443 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u0442\u0430\u043d\u0443\u0442 \u043b\u0435\u0437\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 , \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0438 \u0442 . \u0434 . \u0421\u043b\u043e\u0432\u043e\u043c , \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e , \u0447\u0442\u043e \u043e\u0442 \u043d\u0438\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f . \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0438 \u0432\u043b\u0430\u0441\u0442\u0432\u0443\u0435\u043c . \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 . \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 . ** \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u0434\u0434\u0435\u043b\u043e\u043a : \u0441\u0442\u0430\u0431\u044b ( stubs ) \u0438 \u043c\u043e\u043a\u0438 ( mock ). ** \u0427\u0430\u0441\u0442\u043e \u044d\u0442\u0438 \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u043f\u0443\u0442\u0430\u044e\u0442 . \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0442\u043e\u043c , \u0447\u0442\u043e \u0441\u0442\u0430\u0431 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 , \u0430 \u043b\u0438\u0448\u044c \u0438\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 . \u0410 \u043c\u043e\u043a \u2013 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 , \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 , \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437 . \u0418\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 , \u0432\u0430\u0448 \u0442\u0435\u0441\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442\u0441\u044f \u0438\u0437 - \u0437\u0430 \u00ab \u0441\u0442\u0430\u0431\u0430 \u00bb , \u0430 \u0432\u043e\u0442 \u0438\u0437 - \u0437\u0430 \u043c\u043e\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 . \u0421 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 , \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u0431\u044b \u0432 Assert \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 . \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u043a\u0430 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 . #### \u0421\u0442\u0430\u0431 #### ![] ( https : //habrastorage.org/storage2/95a/409/842/95a40984251f9529238b2e48c61e79f2.png) ``` java @Test public void LogIn_ExisingUser_HashReturned () { // Arrange OrderProcessor = Mock . Of < IOrderProcessor > (); OrderData = Mock . Of < IOrderData > (); LayoutManager = Mock . Of < ILayoutManager > (); NewsProvider = Mock . Of < INewsProvider > (); Service = new IosService ( UserManager , AccountData , OrderProcessor , OrderData , LayoutManager , NewsProvider ); // Act var hash = Service . LogIn ( \"ValidUser\" , \"Password\" ); // Assert Assert . That ( ! string . IsNullOrEmpty ( hash )); } ``` #### \u041c\u043e\u043a #### ![] ( https : //habrastorage.org/storage2/92d/add/11c/92dadd11ca7c689b6cc19e1f040c1888.png) ``` java @Test public void Create_AddAccountToSpecificUser_AccountCreatedAndAddedToUser () { // Arrange var account = Mock . Of < AccountViewModel > (); // Act _controller . Create ( 1 , account ); // Assert _accountData . Verify ( m => m . CreateAccount ( It . IsAny < IAccount > ()), Times . Exactly ( 1 )); _accountData . Verify ( m => m . AddAccountToUser ( It . IsAny < int > (), It . IsAny < int > ()), Times . Once ()); } ``` ### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c , \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b , \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u0442\u0430\u0431\u0430\u043c\u0438 ? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c , \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u043e\u043b\u0438\u0432\u0430 . \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 : #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b ( 12 \u0447\u0430\u0441\u043e\u0432 ). \u0418 \u0447\u0435\u0440\u0435\u0437 12 \u0447\u0430\u0441\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0445\u043e\u0440\u043e\u0448\u043e \u043b\u0438 \u043f\u043e\u043b\u0438\u0442\u044b \u0440\u0430\u0441\u0442\u0435\u043d\u0438\u044f , \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0432\u043e\u0434\u044b , \u043a\u0430\u043a\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0447\u0432\u044b \u0438 \u0442 . \u0434 . #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0434\u0430\u0442\u0447\u0438\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0441\u0435\u043a\u0430\u0442\u044c , \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f , \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b\u043e \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b . \u0421\u0442\u0430\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f , \u0430 \u043c\u043e\u043a\u0438 \u2013 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f . ** \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u043e\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442 ** . \u0418\u043d\u0430\u0447\u0435 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u0442\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u00ab \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u00bb . \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0441\u0442\u0430\u0431\u043e\u0432 \u0438\u043b\u0438 \u0436\u0435 \u043c\u043e\u043a \u0438 \u0441\u0442\u0430\u0431\u044b . ### \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u043a\u0438 \u041c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u043a\u0438 \u0438 \u0441\u0442\u0430\u0431\u044b \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e , \u043d\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0447\u0438\u043d , \u043f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e : * \u0412\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e \u043d\u0430\u0441 * \u041c\u043d\u043e\u0433\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u043f\u0438\u043d\u043a\u0430 * \u041d\u0430\u0448\u0438 \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 * \u042d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [ Moq ] ( http : //code.google.com/p/moq/) \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u0431\u043e\u0432. \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [Rhino Mocks](http://www.hibernatingrhinos.com/oss/rhino-mocks). \u041e\u0431\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u2014 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043e\u043d\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b, \u043d\u043e Moq \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435. \u041d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0434\u0432\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 : _TypeMock Isolator_ \u0438 _Microsoft Moles_ . \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043e\u043d\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b . \u0425\u043e\u0442\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u044d\u0442\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e , \u043d\u0438\u0436\u0435 \u044f \u043e\u043f\u0438\u0448\u0443 , \u043f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 - \u0442\u0430\u043a\u0438 \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u0432\u0435\u0449\u0430\u043c\u0438 . \u0428\u043e\u0443\u043a\u0435\u0439\u0441\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c [ \u0442\u0443\u0442 ] ( http : //code.google.com/p/mocking-frameworks-compare/). \u0410 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438 \u043b\u0435\u0433\u043a\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435. ### \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c . ``` java public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } ``` \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u0442\u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u00ab \u043c\u0430\u043b\u043e\u0439 \u043a\u0440\u043e\u0432\u044c\u044e \u00bb . \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e , \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u0441\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 , \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 ( \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e , \u043a\u0430\u043a \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043b\u0438 IOC - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 ). \u042d\u0442\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 . #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 Setter \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u00ab \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u00bb \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f , \u0435\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 IUserManagerFactory \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d - \u043a\u043e\u0434\u0435 \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . ``` java public class UserManagerFactory { private IUserManager _instance ; /// <summary> /// Get UserManager instance /// </summary> /// <returns>IUserManager with configuration from the configuration file</returns> public IUserManager Get () { return _instance ?? Get ( UserConfigurationSection . GetSection ()); } private IUserManager Get ( UserConfigurationSection config ) { return _instance ?? ( _instance = Create ( config )); } /// <summary> /// For testing purposes only! /// </summary> /// <param name=\"userManager\"></param> public void Set ( IUserManager userManager ) { _instance = userManager ; } } \u041f\u043e\u0434\u043c\u0435\u043d\u0430 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u044e \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u0438 \u0432\u0430\u0448\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438. \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0415\u0441\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u0432 \u043a\u043e\u0434\u0435 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0443\u0442\u044c \u2013 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 protected-\u043c\u0435\u0442\u043e\u0434 CreateObjectName() \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043b\u0430\u0441\u0441\u0435-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a, \u0430 \u043d\u0435 \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 (\u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438) \u0438 \u043d\u0430\u0447\u0430\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438. public class Calculator { public double Multipy ( double a , double b ) { var multiplier = new Multiplier (); return multiplier . Execute ( a , b ); } } public interface IArithmetic { double Execute ( double a , double b ); } public class Multiplier : IArithmetic { public double Execute ( double a , double b ) { return a * b ; } } \u041c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Multiplier , \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u0441\u0442. \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0442\u0430\u043a: public class Calculator { public double Multipy ( double a , double b ) { var multiplier = CreateMultiplier (); return multiplier . Execute ( a , b ); } protected virtual IArithmetic CreateMultiplier () { var multiplier = new Multiplier (); return multiplier ; } } public class CalculatorUnderTest : Calculator { protected override IArithmetic CreateMultiplier () { return new FakeMultiplier (); } } public class FakeMultiplier : IArithmetic { public double Execute ( double a , double b ) { return 5 ; } } \u041a\u043e\u0434 \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0430\u043a\u0446\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0431\u0443\u0434\u0443\u0442 DataProvider\u2019\u044b, UserManager\u2019\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 VS OOP \u041c\u043d\u043e\u0433\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0434\u0435\u0441\u043a\u0430\u0442\u044c \u00ab\u044d\u0442\u043e\u0442 \u0432\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d\u00bb \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e. \u042f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u0441 \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c: \u0421\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f, \u0431\u0438\u043d\u0430\u0440\u043d\u0438\u043a\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b, \u0438 \u0432\u0441\u0435 \u043e\u0431\u0432\u0435\u0448\u0430\u043d\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\u043c\u0438. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 .NET \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c internal-\u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 [InternalsVisibleTo] , \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u0437 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a. \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0433\u0434\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u0433\u043e\u0434\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438 \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u043e\u0432\u043e\u0434\u043e\u043c \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 \u043c\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440/\u043f\u0440\u043e\u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0438\u0442\u044c \u0436\u0435\u043b\u0435\u0437\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u044b\u043b\u043e \u0434\u0435\u0448\u0435\u0432\u043b\u0435, \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u0412\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 C#? \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u043d\u0435\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0421++. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434: \u041c\u044b\u0441\u043b\u0438\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0430 \u043d\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043a\u043e\u0434\u0435 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0438\u043b\u0438 dependency injection . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 IOC-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0443. \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043b\u043e\u0433\u0438\u043a\u0443: \u0432\u0430\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u041f\u043e\u0434 \u00ab\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u00bb \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u0434 \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u0435\u0442\u043e\u0432, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430 \u041d\u0430\u043c \u043f\u043e\u0432\u0435\u0437\u043b\u043e, \u043f\u0440\u044f\u043c\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u044f\u0441\u043e\u0440\u0443\u0431\u043a\u0438 \u043d\u0435\u0442, \u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u2013 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438 \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0430\u0442\u044c\u0435. \u0412 \u043a\u0440\u0430\u0439\u043d\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430 \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0441\u0432\u044f\u0437\u0438, \u043a\u043e\u0441\u0442\u044b\u043b\u0438 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0440\u0430\u0434\u043e\u0441\u0442\u0438 \u0436\u0438\u0437\u043d\u0438. \u041d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u2013 \u0442\u0435\u043c\u0430, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0434\u0430\u043b\u0435\u043a\u043e \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438. \u0421\u0442\u043e\u0438\u0442 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u2013 \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430. \u0410 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u044b, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e). \u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a: \u044f\u0434\u0440\u043e, \u043c\u043e\u0434\u0443\u043b\u044c #1, \u043c\u043e\u0434\u0443\u043b\u044c #2 \u0438 \u0442.\u0434. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0436\u0435\u0440\u0442\u0432\u0443. \u0422\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u044f\u0434\u0440\u0430. \u0412\u043e\u0437\u044c\u043c\u0438\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435: \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u041f\u043e\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0438/\u0438\u043b\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410 \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0420\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e, \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0443\u0441\u043f\u0435\u0442\u044c. \u0411\u0443\u0434\u044c\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e ~\u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e~ \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0412\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u043b\u0435\u0432\u044b\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u041d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u043a \u0441\u0432\u043e\u0438\u043c \u0442\u0435\u0441\u0442\u0430\u043c \u043a\u0430\u043a \u043a \u0432\u0442\u043e\u0440\u043e\u0441\u043e\u0440\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443. \u041c\u043d\u043e\u0433\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e \u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442, \u0447\u0442\u043e DRY, KISS \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u2013 \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0430. \u0410 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u0432\u0441\u0435. \u042d\u0442\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u043e. \u0422\u0435\u0441\u0442\u044b \u2013 \u0442\u0430\u043a\u043e\u0439-\u0436\u0435 \u043a\u043e\u0434. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u0440\u0443\u0433\u0430\u044f \u0446\u0435\u043b\u044c \u2013 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043c\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0430 \u043c\u043e\u0433\u0443\u0442 \u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432. \u0415\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0435\u0441\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c: \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0435: \u044d\u0442\u043e \u0431\u0430\u0433, \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u0431\u0430\u0433-\u0442\u0440\u0435\u043a\u0435\u0440\u0435 \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c. \u0411\u0430\u0433 \u0432 \u0442\u0435\u0441\u0442\u0435: \u0432\u0438\u0434\u0438\u043c\u043e, \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f, \u0430 \u0442\u0435\u0441\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0443\u0436\u043d\u043e). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u043d \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442. \u0421\u043c\u0435\u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u2013 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043f\u0430\u0441\u0442\u044c. \u042d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442. \u0418\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u0435\u043d. \u0423\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u0447\u0438\u043d\u0438\u0442\u0435 \u0438\u0445 \u0432\u043e\u0432\u0440\u0435\u043c\u044f, \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0432\u044b\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0439\u0442\u0435 API \u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 CRUD). \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e, \u0442\u043e \u0432\u0441\u043a\u043e\u0440\u0435 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u0430\u043a \u00ab\u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c\u00bb \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0414\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0433\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u043b\u0438\u0437\u0430\u0445 (\u0432 \u0442.\u0447. \u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438) \u041f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0430\u0448\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u043b\u0438 \u043c\u044b \u0432\u043f\u0443\u0441\u0442\u0443\u044e \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u043c \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u0444\u0438\u0447\u0438. \u0412\u0442\u043e\u0440\u0430\u044f \u2013 \u043a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0443\u043b\u0437\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 .NET \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u044d\u0442\u043e: NCover dotTrace \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 \u0441\u0442\u0443\u0434\u0438\u044e Test Coverage Test First? \u042f \u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e \u043d\u0435 \u043a\u0430\u0441\u0430\u043b\u0441\u044f \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0430. \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f Test First \u2013 \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430, \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0430\u044f \u0440\u044f\u0434\u043e\u043c \u043d\u0435\u043e\u0441\u043f\u043e\u0440\u0438\u043c\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e \u0442\u0435\u043c \u0438\u043b\u0438 \u0438\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c, \u0438\u043d\u043e\u0433\u0434\u0430 \u044f \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u044e \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u043f\u0438\u0448\u0443 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0433\u043e\u0442\u043e\u0432 \u043a\u043e\u0434. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u00ab\u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b\u00bb \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u0430\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u00ab\u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c\u00bb. \u0414\u0435\u043b\u0430\u0439\u0442\u0435, \u043a\u0430\u043a \u0432\u0430\u043c \u0443\u0434\u043e\u0431\u043d\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435: \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u00ab\u0432 \u043f\u0440\u0438\u0434\u0430\u0447\u0443\u00bb. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043c\u0435\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c. \u041f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0442\u0435\u043c\u0443 \u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u0442\u0435\u043c\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435 . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043a\u043d\u0438\u0433\u0443 The Art of Unit Testing. \u042f \u0447\u0438\u0442\u0430\u043b \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435. \u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0432\u044b\u0448\u043b\u043e \u0443\u0436\u0435 \u0438 \u0432\u0442\u043e\u0440\u043e\u0435. Source","title":"\u042e\u043d\u0438\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#-","text":"\u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442... \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0430\u0448\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c. \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0447\u0430\u0441\u0442\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u043e\u0447\u043a\u0438 \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u201cTest it\u201d \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c TestController \u0438\u043b\u0438 MyServiceTestClient . \u0422\u043e \u0447\u0442\u043e \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041e\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443, \u043d\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0442\u0435\u0441\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u044f \u0438\u043b\u0438 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0430 \u0438 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0432\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 UI \u0438 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432\u0441\u0435 \u0435\u0449\u0435 \u0441\u043b\u043e\u0436\u043d\u0435\u0435. \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432?","title":"\u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#we-need-to-go-deeper","text":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043f\u0443\u0441\u0442\u0438\u043c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0438 \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u043c\u0441\u044f \u043a \u0432\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u0438: \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 , \u0438\u043b\u0438 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0430\u043d\u0433\u043b. unit testing) \u2014 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0418\u0434\u0435\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0443\u0436\u0435 \u043e\u0442\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2013 \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0431\u0430\u0441\u0442\u0438\u043e\u043d \u043d\u0430 \u0431\u043e\u0440\u044c\u0431\u0435 \u0441 \u0431\u0430\u0433\u0430\u043c\u0438. \u0417\u0430 \u043d\u0438\u043c \u0435\u0449\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435, \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u043e\u0435 \u0438, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0440\u0443\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u00ab\u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\u00bb. \u041d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u0430\u043c? \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442: \u00ab\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430\u00bb.","title":"We need to go deeper"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_1","text":"\u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0430\u0439\u0442-\u0432\u0438\u0437\u0438\u0442\u043a\u0443 \u0438\u0437 5 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0438\u0441\u044c\u043c\u0430. \u041d\u0430 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0443\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u0441\u044f, \u043d\u0438\u0447\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0435\u043c\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u00ab\u0440\u0443\u043a\u0430\u043c\u0438\u00bb \u0412\u044b \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u043c \u0441\u0430\u0439\u0442\u043e\u043c/\u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0444\u043b\u0435\u0448-\u0438\u0433\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c\u0438 \u2013 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430/\u0430\u043d\u0438\u043c\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u043a\u0438. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043d\u0435\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0421\u0440\u043e\u043a \u2013 \u043e\u0442 \u0434\u0432\u0443\u0445 \u043d\u0435\u0434\u0435\u043b\u044c \u0434\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0432\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u2013 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0436\u0435\u043b\u0435\u0437\u0430 \u0438 \u0441\u043e\u0444\u0442\u0430, \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435. \u0421\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 1-2 \u0434\u043d\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u0430\u0440\u043e\u043c \u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u0438\u044f. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0443\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0435\u0431\u044f \u0441\u0430\u043c, \u0432\u0441\u043b\u0435\u0434 \u0437\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0418\u043d\u043e\u0433\u0434\u0430 \u043a\u043e\u0434 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0447\u0442\u043e \u0435\u0433\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u2014 ~\u0433\u043e\u0432~ \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0412 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c (\u0441\u0436\u0430\u0442\u044b\u0435 \u0441\u0440\u043e\u043a\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u044b, \u0440\u0430\u0437\u043c\u044b\u0442\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f) \u0432\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u042f \u0437\u043d\u0430\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u043b\u0438 \u0441\u0435\u0431\u044f \u043d\u0430 \u0444\u043e\u0442\u043e \u043d\u0438\u0436\u0435, \u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438.","title":"\u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0435\u0441\u043b\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_2","text":"\u0412 \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044f \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 \u0433\u043e\u0434\u0430. \u041e\u043d\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: \u0411\u0435\u0437 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u043f\u0430\u0433\u0435\u0442\u0442\u0438-\u043a\u043e\u0434\u043e\u043c \u0438 \u0443\u0432\u043e\u043b\u0438\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438. \u041d\u0438\u043a\u0442\u043e \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u0441\u0435 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0414\u0430 \u0438 \u0447\u0442\u043e \u043e\u043d\u043e \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0442\u0434\u0430\u043b\u0435\u043d\u043d\u043e. \u0421 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442. \u0422\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0441\u0442\u044c, \u043d\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442, \u0438 \u043a\u0430\u043a\u043e\u0439 \u043e\u0442 \u043d\u0438\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e. \u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a\u0430\u044f-\u043d\u0438\u043a\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0435\u0441\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0430\u0431\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u044c. \u041c\u043e\u0436\u043d\u043e \u043e\u0442\u044b\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0445\u0438\u0442\u0440\u043e\u0441\u043f\u043b\u0435\u0442\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0421 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c. \u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442. \u0415\u0441\u043b\u0438 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0438\u0445 \u043c\u043d\u043e\u0433\u043e. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0418 \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u2013 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0439: \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0422\u0435\u0441\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043a\u0430\u043a\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0438 \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0436\u0434\u0443\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u0422\u0430\u043a\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435. \u0412 \u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u0422\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e: \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0430\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0438\u0447, \u0441\u0445\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 getting started guide\u2019\u043e\u043c . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0438 \u0443\u0445\u043e\u0434\u0438\u0442\u044c. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u0430\u043c\u0430 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u0441\u0435\u0431\u0435 \u043f\u0443\u0442\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u2013 \u043a\u0440\u0435\u043f\u043a\u0438\u0439 \u043e\u0440\u0435\u0448\u0435\u043a, \u0441 \u043d\u0438\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0445 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u0435\u043d \u0438\u043b\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f.","title":"\u041b\u044e\u0431\u043e\u0439 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u0435\u0437 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043e\u0431\u0440\u0435\u0447\u0435\u043d \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0441 \u043d\u0443\u043b\u044f"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_3","text":"\u041a\u043e\u043b\u043b\u0435\u0433\u0438 \u0438\u0437 ScrumTrek \u0443\u0432\u0435\u0440\u044f\u044e\u0442, \u0447\u0442\u043e \u0432\u0441\u0435\u043c\u0443 \u0432\u0438\u043d\u043e\u0439 \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0432\u043b\u0430\u0441\u0442\u0435\u043b\u0438\u043d \u0414\u0430\u0440\u0442 \u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u0438\u0443\u0441 . \u042f \u0443\u0431\u0435\u0436\u0434\u0435\u043d, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043f\u0440\u0430\u0432\u0434\u0435. \u0411\u0435\u0437\u0434\u0443\u043c\u043d\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u043d\u043e \u0432\u0440\u0435\u0434\u0438\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 . \u0415\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0443 \u0432\u0430\u0441 \u0431\u044b\u043b \u043e\u0434\u0438\u043d \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442, \u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0432 \u0442\u0435\u0441\u0442\u044b, \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0432 \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u0435, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u0432\u0430. \u0418 \u0443\u0434\u0432\u043e\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u043d\u0435 \u0432\u0437\u044f\u043b\u0430 \u0432\u0435\u0440\u0445, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b . \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b: \u0411\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u043c\u0438 \u041d\u0435 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0438 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f (\u0434\u0430\u0436\u0435 \u043d\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043d\u044f\u0442\u044c \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f) \u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0435\u0434\u0438\u043d\u0443\u044e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u044e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u043e\u0432, \u043d\u0443\u0436\u043d\u044b \u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u043b\u044f. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443.","title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0430?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#vcs","text":"\u0422\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a. \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u041e\u0431\u0449\u0430\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f: \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0435, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 Tests; \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u0439 VCS"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_4","text":"\u041e\u0434\u043d\u0430 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a: \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b .Core, .Bl \u0438 .Web? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0449\u0435 .Core.Tests, .Bl.Tests \u0438 .Web.Tests. \u0423 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0434-\u044d\u0444\u0444\u0435\u043a\u0442. \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d *.Tests.dll \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_5","text":"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 ProblemResolver? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 ProblemResolverTests. \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c. \u0418\u043d\u0430\u0447\u0435 \u0432\u044b \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043a\u0430\u0442\u0438\u0442\u0435\u0441\u044c ~\u0432 \u0443\u043d\u044b\u043b\u043e\u0435 \u0433\u043e~ \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0438\u043f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 (\u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442).","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_6","text":"TestLogin \u2013 \u043d\u0435 \u0441\u0430\u043c\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430. \u0427\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f? \u041a\u0430\u043a\u043e\u0432\u044b \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b? \u041c\u043e\u0433\u0443\u0442 \u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438? \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0430\u043a\u043e\u0439: [\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434]_[\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439]_[\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435] . \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Calculator, \u0430 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434 Sum, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 (\u043f\u0440\u0438\u0432\u0435\u0442, \u041a\u044d\u043f!) \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \u0441lass CalculatorTests { public void Sum_2Plus5_7Returned () { // \u2026 } } \u0422\u0430\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u0430 \u0431\u0435\u0437 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043a\u043e\u0434\u0443.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u00ab\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439\u00bb \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_7","text":"\u0412\u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b. \u042f \u0432\u0438\u0434\u0435\u043b \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b (\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043d\u0435 \u044e\u043d\u0438\u0442, \u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0435) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041d\u0435 \u043d\u0430\u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0432\u0441\u0435 \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0430 \u0432\u0430\u0441. \u0423\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043e\u0431\u0437\u043e\u0440\u0443 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043d\u043e\u0433\u0438\u0435 .NET \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 MsTest \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u0442\u0443\u0434\u0438\u0438. \u041c\u043d\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e \u0434\u0443\u0448\u0435 NUnit. \u041e\u043d \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u043f\u043e\u043a \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042f \u043c\u043e\u0433\u0443 \u0442\u0430\u043a \u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 NUnit \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0420\u0435\u0448\u0430\u0440\u043f\u0435\u0440\u0430. \u041a\u043e\u043c\u0443-\u0442\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c xUnit\u2019\u0430: \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f IDisposable \u043a\u0430\u043a TearDown.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432\u0430\u043c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_8","text":"\u041e\u0434\u043d\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 100%, \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u044d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0439 \u0442\u0440\u0430\u0442\u043e\u0439 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0440\u0430\u0441\u0447\u0435\u0440\u0442\u0438\u0442\u0435 \u043b\u0438\u0441\u0442 \u0431\u0443\u043c\u0430\u0433\u0438 \u043f\u043e \u043e\u0441\u0438 X \u0438 Y, \u0433\u0434\u0435 X \u2013 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c, \u0430 Y \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438: \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0434\u0435\u0441\u044c \u0438 \u0442\u0430\u043a \u0432\u0441\u0435 \u044f\u0441\u043d\u043e. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0425\u043c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434, \u0442\u0443\u0442 \u043f\u0430\u0445\u043d\u0435\u0442 God Object\u2019\u043e\u043c \u0438 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c\u044e. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041c\u044b \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u0443 \u043d\u0430\u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b. \u0422\u0430\u043a \u0437\u0430\u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c? \u0425\u043e\u0447\u0443 \u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u0430\u043c \u0432\u0441\u0435 \u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 . \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0427\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f: C\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u042d\u0442\u043e \u043d\u0435\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u043b\u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b. \u0422\u0435\u0441\u0442\u044b \u0432\u0430\u0436\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u043e\u0442\u0435\u0440\u0438 Mars Climate Orbiter 23 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f 1999 \u0433\u043e\u0434\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0435: \u043e\u0434\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0447\u0438\u0442\u0430\u043b\u043e \u00ab\u0432 \u0434\u044e\u0439\u043c\u0430\u0445\u00bb, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u2013 \u00ab\u0432 \u043c\u0435\u0442\u0440\u0430\u0445\u00bb, \u0438 \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u043b\u0438 \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c, \u0435\u0441\u043b\u0438 \u0431\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u00ab\u0448\u0432\u044b\u00bb \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0427\u0442\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0430 \u0447\u0442\u043e \u2013 \u043d\u0435\u0442?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_9","text":"\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0437\u0430\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043b \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0445\u043e\u0434 AAA (arrange, act, assert) . \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u043c: class CalculatorTests { public void Sum_2Plus5_7Returned () { // arrange var calc = new Calculator (); // act var res = calc . Sum ( 2 , 5 ); // assert Assert . AreEqual ( 7 , res ); } } \u0422\u0430\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0435\u043c class CalculatorTests { public void Sum_2Plus5_7Returned () { Assert . AreEqual ( 7 , new Calculator (). sum ( 2 , 5 )); } } \u0410 \u0437\u043d\u0430\u0447\u0438\u0442, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c.","title":"\u041f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u0442\u0435\u0441\u0442\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_10","text":"\u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u0435\u043d (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438, \u0438 \u0432\u0441\u043a\u043e\u0440\u0435 \u0432\u0430\u043c \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c.","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_11","text":"\u0414\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440. \u0423 \u043d\u0435\u0433\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043c\u0430\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _orderManager ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _ orderManager . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0431\u0435\u0440\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 AccountData \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e \u043d\u0430\u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u041c\u044b \u0436\u0435 \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u043e\u043e\u043f\u0430\u0440\u043a \u0444\u0430\u0439\u043b\u043e\u0432 *.config. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u043c\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0432 \u0442\u043e\u043c \u0436\u0435 \u0434\u0443\u0445\u0435, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041a\u0430\u043a \u043c\u044b \u043f\u043e\u043c\u043d\u0438\u043c, \u044d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u043c\u044b \u043f\u043e\u0434\u0441\u0443\u043d\u0435\u043c \u0444\u0430\u043b\u044c\u0448\u0438\u0432\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e (fake) . \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a: public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _oms ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _oms . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } /// <summary> /// For testability /// </summary> /// <param name=\"accountData\"></param> /// <param name=\"userManager\"></param> public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } ``` \u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043d\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 , \u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 . ### Fakes : stubs & mocks \u041c\u044b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0434\u0441\u0443\u043d\u0443\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0443 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u0442\u0430\u043d\u0443\u0442 \u043b\u0435\u0437\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 , \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0438 \u0442 . \u0434 . \u0421\u043b\u043e\u0432\u043e\u043c , \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e , \u0447\u0442\u043e \u043e\u0442 \u043d\u0438\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f . \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0438 \u0432\u043b\u0430\u0441\u0442\u0432\u0443\u0435\u043c . \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 . \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 . ** \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u0434\u0434\u0435\u043b\u043e\u043a : \u0441\u0442\u0430\u0431\u044b ( stubs ) \u0438 \u043c\u043e\u043a\u0438 ( mock ). ** \u0427\u0430\u0441\u0442\u043e \u044d\u0442\u0438 \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u043f\u0443\u0442\u0430\u044e\u0442 . \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0442\u043e\u043c , \u0447\u0442\u043e \u0441\u0442\u0430\u0431 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 , \u0430 \u043b\u0438\u0448\u044c \u0438\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 . \u0410 \u043c\u043e\u043a \u2013 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 , \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 , \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437 . \u0418\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 , \u0432\u0430\u0448 \u0442\u0435\u0441\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442\u0441\u044f \u0438\u0437 - \u0437\u0430 \u00ab \u0441\u0442\u0430\u0431\u0430 \u00bb , \u0430 \u0432\u043e\u0442 \u0438\u0437 - \u0437\u0430 \u043c\u043e\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 . \u0421 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 , \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u0431\u044b \u0432 Assert \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 . \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u043a\u0430 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 . #### \u0421\u0442\u0430\u0431 #### ![] ( https : //habrastorage.org/storage2/95a/409/842/95a40984251f9529238b2e48c61e79f2.png) ``` java @Test public void LogIn_ExisingUser_HashReturned () { // Arrange OrderProcessor = Mock . Of < IOrderProcessor > (); OrderData = Mock . Of < IOrderData > (); LayoutManager = Mock . Of < ILayoutManager > (); NewsProvider = Mock . Of < INewsProvider > (); Service = new IosService ( UserManager , AccountData , OrderProcessor , OrderData , LayoutManager , NewsProvider ); // Act var hash = Service . LogIn ( \"ValidUser\" , \"Password\" ); // Assert Assert . That ( ! string . IsNullOrEmpty ( hash )); } ``` #### \u041c\u043e\u043a #### ![] ( https : //habrastorage.org/storage2/92d/add/11c/92dadd11ca7c689b6cc19e1f040c1888.png) ``` java @Test public void Create_AddAccountToSpecificUser_AccountCreatedAndAddedToUser () { // Arrange var account = Mock . Of < AccountViewModel > (); // Act _controller . Create ( 1 , account ); // Assert _accountData . Verify ( m => m . CreateAccount ( It . IsAny < IAccount > ()), Times . Exactly ( 1 )); _accountData . Verify ( m => m . AddAccountToUser ( It . IsAny < int > (), It . IsAny < int > ()), Times . Once ()); } ``` ### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c , \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b , \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u0442\u0430\u0431\u0430\u043c\u0438 ? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c , \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u043e\u043b\u0438\u0432\u0430 . \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 : #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b ( 12 \u0447\u0430\u0441\u043e\u0432 ). \u0418 \u0447\u0435\u0440\u0435\u0437 12 \u0447\u0430\u0441\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0445\u043e\u0440\u043e\u0448\u043e \u043b\u0438 \u043f\u043e\u043b\u0438\u0442\u044b \u0440\u0430\u0441\u0442\u0435\u043d\u0438\u044f , \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0432\u043e\u0434\u044b , \u043a\u0430\u043a\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0447\u0432\u044b \u0438 \u0442 . \u0434 . #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0434\u0430\u0442\u0447\u0438\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0441\u0435\u043a\u0430\u0442\u044c , \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f , \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b\u043e \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b . \u0421\u0442\u0430\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f , \u0430 \u043c\u043e\u043a\u0438 \u2013 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f . ** \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u043e\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442 ** . \u0418\u043d\u0430\u0447\u0435 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u0442\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u00ab \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u00bb . \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0441\u0442\u0430\u0431\u043e\u0432 \u0438\u043b\u0438 \u0436\u0435 \u043c\u043e\u043a \u0438 \u0441\u0442\u0430\u0431\u044b . ### \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u043a\u0438 \u041c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u043a\u0438 \u0438 \u0441\u0442\u0430\u0431\u044b \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e , \u043d\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0447\u0438\u043d , \u043f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e : * \u0412\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e \u043d\u0430\u0441 * \u041c\u043d\u043e\u0433\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u043f\u0438\u043d\u043a\u0430 * \u041d\u0430\u0448\u0438 \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 * \u042d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [ Moq ] ( http : //code.google.com/p/moq/) \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u0431\u043e\u0432. \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [Rhino Mocks](http://www.hibernatingrhinos.com/oss/rhino-mocks). \u041e\u0431\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u2014 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043e\u043d\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b, \u043d\u043e Moq \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435. \u041d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0434\u0432\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 : _TypeMock Isolator_ \u0438 _Microsoft Moles_ . \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043e\u043d\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b . \u0425\u043e\u0442\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u044d\u0442\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e , \u043d\u0438\u0436\u0435 \u044f \u043e\u043f\u0438\u0448\u0443 , \u043f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 - \u0442\u0430\u043a\u0438 \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u0432\u0435\u0449\u0430\u043c\u0438 . \u0428\u043e\u0443\u043a\u0435\u0439\u0441\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c [ \u0442\u0443\u0442 ] ( http : //code.google.com/p/mocking-frameworks-compare/). \u0410 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438 \u043b\u0435\u0433\u043a\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435. ### \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c . ``` java public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } ``` \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u0442\u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u00ab \u043c\u0430\u043b\u043e\u0439 \u043a\u0440\u043e\u0432\u044c\u044e \u00bb . \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e , \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u0441\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 , \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 ( \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e , \u043a\u0430\u043a \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043b\u0438 IOC - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 ). \u042d\u0442\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 . #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 Setter \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u00ab \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u00bb \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f , \u0435\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 IUserManagerFactory \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d - \u043a\u043e\u0434\u0435 \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . ``` java public class UserManagerFactory { private IUserManager _instance ; /// <summary> /// Get UserManager instance /// </summary> /// <returns>IUserManager with configuration from the configuration file</returns> public IUserManager Get () { return _instance ?? Get ( UserConfigurationSection . GetSection ()); } private IUserManager Get ( UserConfigurationSection config ) { return _instance ?? ( _instance = Create ( config )); } /// <summary> /// For testing purposes only! /// </summary> /// <param name=\"userManager\"></param> public void Set ( IUserManager userManager ) { _instance = userManager ; } }","title":"\u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_12","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u044e \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u0438 \u0432\u0430\u0448\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438.","title":"\u041f\u043e\u0434\u043c\u0435\u043d\u0430 \u0444\u0430\u0431\u0440\u0438\u043a\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_13","text":"\u0415\u0441\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u0432 \u043a\u043e\u0434\u0435 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0443\u0442\u044c \u2013 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 protected-\u043c\u0435\u0442\u043e\u0434 CreateObjectName() \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043b\u0430\u0441\u0441\u0435-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a, \u0430 \u043d\u0435 \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 (\u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438) \u0438 \u043d\u0430\u0447\u0430\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438. public class Calculator { public double Multipy ( double a , double b ) { var multiplier = new Multiplier (); return multiplier . Execute ( a , b ); } } public interface IArithmetic { double Execute ( double a , double b ); } public class Multiplier : IArithmetic { public double Execute ( double a , double b ) { return a * b ; } } \u041c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Multiplier , \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u0441\u0442. \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0442\u0430\u043a: public class Calculator { public double Multipy ( double a , double b ) { var multiplier = CreateMultiplier (); return multiplier . Execute ( a , b ); } protected virtual IArithmetic CreateMultiplier () { var multiplier = new Multiplier (); return multiplier ; } } public class CalculatorUnderTest : Calculator { protected override IArithmetic CreateMultiplier () { return new FakeMultiplier (); } } public class FakeMultiplier : IArithmetic { public double Execute ( double a , double b ) { return 5 ; } } \u041a\u043e\u0434 \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0430\u043a\u0446\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0431\u0443\u0434\u0443\u0442 DataProvider\u2019\u044b, UserManager\u2019\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439.","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#vs-oop","text":"\u041c\u043d\u043e\u0433\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0434\u0435\u0441\u043a\u0430\u0442\u044c \u00ab\u044d\u0442\u043e\u0442 \u0432\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d\u00bb \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e. \u042f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u0441 \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c:","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 VS OOP"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_14","text":"\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f, \u0431\u0438\u043d\u0430\u0440\u043d\u0438\u043a\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b, \u0438 \u0432\u0441\u0435 \u043e\u0431\u0432\u0435\u0448\u0430\u043d\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\u043c\u0438. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 .NET \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c internal-\u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 [InternalsVisibleTo] , \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u0437 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a.","title":"\u0421\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_15","text":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0433\u0434\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u0433\u043e\u0434\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438 \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u043e\u0432\u043e\u0434\u043e\u043c \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 \u043c\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440/\u043f\u0440\u043e\u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0438\u0442\u044c \u0436\u0435\u043b\u0435\u0437\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u044b\u043b\u043e \u0434\u0435\u0448\u0435\u0432\u043b\u0435, \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u0412\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 C#? \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u043d\u0435\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0421++. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434: \u041c\u044b\u0441\u043b\u0438\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0430 \u043d\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043a\u043e\u0434\u0435 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0438\u043b\u0438 dependency injection . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 IOC-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0443. \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043b\u043e\u0433\u0438\u043a\u0443: \u0432\u0430\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c.","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_16","text":"\u041f\u043e\u0434 \u00ab\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u00bb \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u0434 \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u0435\u0442\u043e\u0432, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430\u043c\u0438.","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_17","text":"\u041d\u0430\u043c \u043f\u043e\u0432\u0435\u0437\u043b\u043e, \u043f\u0440\u044f\u043c\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u044f\u0441\u043e\u0440\u0443\u0431\u043a\u0438 \u043d\u0435\u0442, \u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u2013 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438 \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0430\u0442\u044c\u0435. \u0412 \u043a\u0440\u0430\u0439\u043d\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_18","text":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0441\u0432\u044f\u0437\u0438, \u043a\u043e\u0441\u0442\u044b\u043b\u0438 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0440\u0430\u0434\u043e\u0441\u0442\u0438 \u0436\u0438\u0437\u043d\u0438. \u041d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u2013 \u0442\u0435\u043c\u0430, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0434\u0430\u043b\u0435\u043a\u043e \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438. \u0421\u0442\u043e\u0438\u0442 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u2013 \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430. \u0410 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u044b, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e). \u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a: \u044f\u0434\u0440\u043e, \u043c\u043e\u0434\u0443\u043b\u044c #1, \u043c\u043e\u0434\u0443\u043b\u044c #2 \u0438 \u0442.\u0434. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0436\u0435\u0440\u0442\u0432\u0443. \u0422\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u044f\u0434\u0440\u0430. \u0412\u043e\u0437\u044c\u043c\u0438\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435: \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u041f\u043e\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0438/\u0438\u043b\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410 \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0420\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e, \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0443\u0441\u043f\u0435\u0442\u044c. \u0411\u0443\u0434\u044c\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e ~\u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e~ \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0412\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u043b\u0435\u0432\u044b\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_19","text":"\u041d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u043a \u0441\u0432\u043e\u0438\u043c \u0442\u0435\u0441\u0442\u0430\u043c \u043a\u0430\u043a \u043a \u0432\u0442\u043e\u0440\u043e\u0441\u043e\u0440\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443. \u041c\u043d\u043e\u0433\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e \u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442, \u0447\u0442\u043e DRY, KISS \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u2013 \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0430. \u0410 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u0432\u0441\u0435. \u042d\u0442\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u043e. \u0422\u0435\u0441\u0442\u044b \u2013 \u0442\u0430\u043a\u043e\u0439-\u0436\u0435 \u043a\u043e\u0434. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u0440\u0443\u0433\u0430\u044f \u0446\u0435\u043b\u044c \u2013 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043c\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0430 \u043c\u043e\u0433\u0443\u0442 \u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432. \u0415\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0435\u0441\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c: \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0435: \u044d\u0442\u043e \u0431\u0430\u0433, \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u0431\u0430\u0433-\u0442\u0440\u0435\u043a\u0435\u0440\u0435 \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c. \u0411\u0430\u0433 \u0432 \u0442\u0435\u0441\u0442\u0435: \u0432\u0438\u0434\u0438\u043c\u043e, \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f, \u0430 \u0442\u0435\u0441\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0443\u0436\u043d\u043e). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u043d \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442. \u0421\u043c\u0435\u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u2013 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043f\u0430\u0441\u0442\u044c. \u042d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442. \u0418\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u0435\u043d. \u0423\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u0447\u0438\u043d\u0438\u0442\u0435 \u0438\u0445 \u0432\u043e\u0432\u0440\u0435\u043c\u044f, \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0432\u044b\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0439\u0442\u0435 API \u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 CRUD). \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e, \u0442\u043e \u0432\u0441\u043a\u043e\u0440\u0435 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_20","text":"\u0414\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0433\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u043b\u0438\u0437\u0430\u0445 (\u0432 \u0442.\u0447. \u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438) \u041f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0430\u0448\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u043b\u0438 \u043c\u044b \u0432\u043f\u0443\u0441\u0442\u0443\u044e \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u043c \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u0444\u0438\u0447\u0438. \u0412\u0442\u043e\u0440\u0430\u044f \u2013 \u043a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0443\u043b\u0437\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 .NET \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u044d\u0442\u043e: NCover dotTrace \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 \u0441\u0442\u0443\u0434\u0438\u044e Test Coverage","title":"\u041a\u0430\u043a \u00ab\u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c\u00bb \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#test-first","text":"\u042f \u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e \u043d\u0435 \u043a\u0430\u0441\u0430\u043b\u0441\u044f \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0430. \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f Test First \u2013 \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430, \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0430\u044f \u0440\u044f\u0434\u043e\u043c \u043d\u0435\u043e\u0441\u043f\u043e\u0440\u0438\u043c\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e \u0442\u0435\u043c \u0438\u043b\u0438 \u0438\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c, \u0438\u043d\u043e\u0433\u0434\u0430 \u044f \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u044e \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u043f\u0438\u0448\u0443 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0433\u043e\u0442\u043e\u0432 \u043a\u043e\u0434. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u00ab\u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b\u00bb \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u0430\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u00ab\u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c\u00bb. \u0414\u0435\u043b\u0430\u0439\u0442\u0435, \u043a\u0430\u043a \u0432\u0430\u043c \u0443\u0434\u043e\u0431\u043d\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435: \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u00ab\u0432 \u043f\u0440\u0438\u0434\u0430\u0447\u0443\u00bb. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043c\u0435\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c.","title":"Test First?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_21","text":"\u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u0442\u0435\u043c\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435 . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043a\u043d\u0438\u0433\u0443 The Art of Unit Testing. \u042f \u0447\u0438\u0442\u0430\u043b \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435. \u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0432\u044b\u0448\u043b\u043e \u0443\u0436\u0435 \u0438 \u0432\u0442\u043e\u0440\u043e\u0435. Source","title":"\u041f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0442\u0435\u043c\u0443"},{"location":"kafka/Kafka%20local%20cluster%20run/","text":"Kafka local cluster run cd /home/gans16/.applications/kafka_2.13-2.7.0/bin ./zookeeper-server-start.sh ../config/zookeeper.properties ./kafka-server-start.sh ../config/server.properties ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties","title":"Kafka local cluster run"},{"location":"kafka/KafkaTemplate/","text":"KafkaTemplate","title":"KafkaTemplate"},{"location":"kafka/Setting%20Up%20Kafka/","text":"Setting Up Kafka Setting Up Kafka Linux - Make sure you are navigated inside the bin directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. ./zookeeper-server-start.sh ../config/zookeeper.properties - Add the below properties in the server.properties listeners=PLAINTEXT://localhost:9092 auto.create.topics.enable=false - Start up the Kafka Broker ./kafka-server-start.sh ../config/server.properties ## How to create a topic ? ./kafka-topics.sh --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic ### With Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Windows - Make sure you are inside the **bin/windows** directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. zookeeper-server-start.bat ..\\..\\config\\zookeeper.properties - Start up the Kafka Broker. kafka-server-start.bat ..\\..\\config\\server.properties ## How to create a topic ? kafka-topics.bat --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic ### With Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Setting Up Multiple Kafka Brokers The first step is to add a new server.properties . We need to modify three properties to start up a multi broker set up. broker.id=<unique-broker-d> listeners=PLAINTEXT://localhost:<unique-port> log.dirs=/tmp/<unique-kafka-folder> auto.create.topics.enable=false Example config will be like below. broker.id=1 listeners=PLAINTEXT://localhost:9093 log.dirs=/tmp/kafka-logs-1 auto.create.topics.enable=false Starting up the new Broker Provide the new server.properties thats added. ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties Advanced Kafka CLI operations: Linux ## List the topics in a cluster ./kafka-topics.sh --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. ./kafka-topics.sh --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. ./kafka-topics.sh --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica ./kafka-topics.sh --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic ./kafka-topics.sh --zookeeper localhost:2181 --delete --topic test-topic ## How to view consumer groups ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log ./kafka-run-class.sh kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log ## Setting the Minimum Insync Replica ./kafka-configs.sh --alter --zookeeper localhost:2181 --entity-type topics --entity-name test-topic --add-config min.insync.replicas=2 Windows - Make sure you are inside the **bin/windows** directory. ## List the topics in a cluster kafka-topics.bat --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. kafka-topics.bat --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. kafka-topics.bat --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica kafka-topics.bat --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic kafka-topics.bat --zookeeper localhost:2181 --delete --topic <topic-name> ## How to view consumer groups kafka-consumer-groups.bat --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset kafka-consumer-groups.bat --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log kafka-run-class.bat kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log","title":"Setting Up Kafka"},{"location":"kafka/Setting%20Up%20Kafka/#setting-up-kafka","text":"Linux - Make sure you are navigated inside the bin directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. ./zookeeper-server-start.sh ../config/zookeeper.properties - Add the below properties in the server.properties listeners=PLAINTEXT://localhost:9092 auto.create.topics.enable=false - Start up the Kafka Broker ./kafka-server-start.sh ../config/server.properties ## How to create a topic ? ./kafka-topics.sh --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic ### With Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Windows - Make sure you are inside the **bin/windows** directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. zookeeper-server-start.bat ..\\..\\config\\zookeeper.properties - Start up the Kafka Broker. kafka-server-start.bat ..\\..\\config\\server.properties ## How to create a topic ? kafka-topics.bat --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic ### With Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --group <group-name>","title":"Setting Up Kafka"},{"location":"kafka/Setting%20Up%20Kafka/#setting-up-multiple-kafka-brokers","text":"The first step is to add a new server.properties . We need to modify three properties to start up a multi broker set up. broker.id=<unique-broker-d> listeners=PLAINTEXT://localhost:<unique-port> log.dirs=/tmp/<unique-kafka-folder> auto.create.topics.enable=false Example config will be like below. broker.id=1 listeners=PLAINTEXT://localhost:9093 log.dirs=/tmp/kafka-logs-1 auto.create.topics.enable=false","title":"Setting Up Multiple Kafka Brokers"},{"location":"kafka/Setting%20Up%20Kafka/#starting-up-the-new-broker","text":"Provide the new server.properties thats added. ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties","title":"Starting up the new Broker"},{"location":"kafka/Setting%20Up%20Kafka/#advanced-kafka-cli-operations","text":"Linux ## List the topics in a cluster ./kafka-topics.sh --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. ./kafka-topics.sh --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. ./kafka-topics.sh --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica ./kafka-topics.sh --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic ./kafka-topics.sh --zookeeper localhost:2181 --delete --topic test-topic ## How to view consumer groups ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log ./kafka-run-class.sh kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log ## Setting the Minimum Insync Replica ./kafka-configs.sh --alter --zookeeper localhost:2181 --entity-type topics --entity-name test-topic --add-config min.insync.replicas=2 Windows - Make sure you are inside the **bin/windows** directory. ## List the topics in a cluster kafka-topics.bat --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. kafka-topics.bat --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. kafka-topics.bat --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica kafka-topics.bat --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic kafka-topics.bat --zookeeper localhost:2181 --delete --topic <topic-name> ## How to view consumer groups kafka-consumer-groups.bat --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset kafka-consumer-groups.bat --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log kafka-run-class.bat kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log","title":"Advanced Kafka CLI operations:"},{"location":"linux/Add%20Nemo%20context%20menu%20action/","text":"Add Nemo context menu action Add Nemo context menu action Go to /usr/share/nemo/actions Create file terminator.nemo_action : [Nemo Action] Active=true Name=Open in Terminator Name[uk]=\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432 Terminator Comment=Run Terminator here Exec=terminator -m -e 'cd %P; exec bash' Icon-Name=terminator Selection=none Extensions=any; Example .nemo_action: [Nemo Action] ############################################# #### DEBUGGING: #### #### Run Nemo in debug mode using with ### NEMO_DEBUG set to include 'Actions' #### #### i.e. $ nemo --quit #### $ NEMO_DEBUG=Actions nemo --debug ############################################# # Whether this action is active. For troubleshooting. # Optional - if this field is omitted, the action will be active Active=false # Standard tokens that can be used in the Name, Comment (tooltip) and Exec fields: # # %U - insert URI list of selection # %F - insert path list of selection # %P - insert path of parent (current) directory # %f or %N (deprecated) - insert display name of first selected file # %p - insert display name of parent directory # %D - insert device path of file (i.e. /dev/sdb1) # The name to show in the menu, locale supported with standard desktop spec. # **** REQUIRED **** Name=Test Custom Action applied to %N # Tool tip, locale supported (Appears in the status bar) Comment=This is a test for Nemo actions. Action will be applied to %N # What to run. Enclose in < > to run an executable that resides in the actions folder. # **** REQUIRED **** #Exec=gedit %F Exec=<myaction.py -r -g %P %F %U> # Icon name to use in the menu - must be a theme icon name Icon-Name=folder # Gtk Stock ID to use for the icon. Note if both Icon-name and Stock-Id are # defined, the Stock-Id takes precedence. #Stock-Id=gtk-cdrom # What type selection: [s]ingle, [m]ultiple, any, notnone, none (background click), or # a number representing how many files must be selected to display. # ****** REQUIRED ******* Selection=m # What extensions to display on - this is an array, end with a semicolon # Single entry options, ending in a semicolon: # \"dir\" for directory selection # \"none\" for no extension. # \"nodirs\" for any selection, but not including directories. # \"any\" for any file type, including directories. # Individual specific extensions can be a semicolon-terminated list # Extensions are NOT case sensitive. jpg will match JPG, jPg, jpg, etc.. # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** Extensions=any; # What mime-types to display on - this is an array, end with a semicolon # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** #Mimetypes=text/plain; # Separator to use (if any) - add a string to insert between path/url entries # in the exec line. Optional - if you leave this out, a space is inserted. # Note you can have trailing spaces here. #Separator=, # Quote type to use (if any) - enclose paths/urls with quotes. Optional - defaults # to no quotes. # Can be: single, double, backtick #Quote=double # Dependencies - program executables required for this action to work. Nemo will # Search in the path for these program(s) and not display the action if any are missing. # You can also supply an absolute path to a file (i.e. /usr/lib/gvfs/gvfsd-archive) to check # instead of or in addition to an executable in the path. # This is an array, separate entries with semi-colon, and terminate with a semicolon. #Dependencies=gedit; # Conditions - semicolon-separated array of special conditions: # \"desktop\" current (parent) folder is desktop # \"removable\" target (first selection) is removable # \"gsettings <schema> <boolean key>\" is true # \"gsettings <schema> <key> <key-type> <[eq|ne|gt|lt]> <value>\" # \"dbus <name>\" exists # \"exec <program>\" run program and check its exit code (0 is pass, non-0 is fail). # Enclose in < > if the program resides in the action's folder. #Conditions=desktop; # Escape Spaces - set to true to escape spaces in filenames and uris ($U, $F, $P, $D) # # Sometimes this may be preferred to getting raw filenames that must be enclosed in # quotes. # # Optional - by default this is false EscapeSpaces=true # Run in terminal - set to true to execute the Exec line in a spawned terminal window. # # Generally if you use this you should not have Quotes defined, as that will be taken care # of during converting the expanded command string into an arg vector. # # Optional - by default this is false #Terminal=false","title":"Add Nemo context menu action"},{"location":"linux/Add%20Nemo%20context%20menu%20action/#add-nemo-context-menu-action","text":"Go to /usr/share/nemo/actions Create file terminator.nemo_action : [Nemo Action] Active=true Name=Open in Terminator Name[uk]=\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432 Terminator Comment=Run Terminator here Exec=terminator -m -e 'cd %P; exec bash' Icon-Name=terminator Selection=none Extensions=any;","title":"Add Nemo context menu action"},{"location":"linux/Add%20Nemo%20context%20menu%20action/#example-nemo_action","text":"[Nemo Action] ############################################# #### DEBUGGING: #### #### Run Nemo in debug mode using with ### NEMO_DEBUG set to include 'Actions' #### #### i.e. $ nemo --quit #### $ NEMO_DEBUG=Actions nemo --debug ############################################# # Whether this action is active. For troubleshooting. # Optional - if this field is omitted, the action will be active Active=false # Standard tokens that can be used in the Name, Comment (tooltip) and Exec fields: # # %U - insert URI list of selection # %F - insert path list of selection # %P - insert path of parent (current) directory # %f or %N (deprecated) - insert display name of first selected file # %p - insert display name of parent directory # %D - insert device path of file (i.e. /dev/sdb1) # The name to show in the menu, locale supported with standard desktop spec. # **** REQUIRED **** Name=Test Custom Action applied to %N # Tool tip, locale supported (Appears in the status bar) Comment=This is a test for Nemo actions. Action will be applied to %N # What to run. Enclose in < > to run an executable that resides in the actions folder. # **** REQUIRED **** #Exec=gedit %F Exec=<myaction.py -r -g %P %F %U> # Icon name to use in the menu - must be a theme icon name Icon-Name=folder # Gtk Stock ID to use for the icon. Note if both Icon-name and Stock-Id are # defined, the Stock-Id takes precedence. #Stock-Id=gtk-cdrom # What type selection: [s]ingle, [m]ultiple, any, notnone, none (background click), or # a number representing how many files must be selected to display. # ****** REQUIRED ******* Selection=m # What extensions to display on - this is an array, end with a semicolon # Single entry options, ending in a semicolon: # \"dir\" for directory selection # \"none\" for no extension. # \"nodirs\" for any selection, but not including directories. # \"any\" for any file type, including directories. # Individual specific extensions can be a semicolon-terminated list # Extensions are NOT case sensitive. jpg will match JPG, jPg, jpg, etc.. # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** Extensions=any; # What mime-types to display on - this is an array, end with a semicolon # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** #Mimetypes=text/plain; # Separator to use (if any) - add a string to insert between path/url entries # in the exec line. Optional - if you leave this out, a space is inserted. # Note you can have trailing spaces here. #Separator=, # Quote type to use (if any) - enclose paths/urls with quotes. Optional - defaults # to no quotes. # Can be: single, double, backtick #Quote=double # Dependencies - program executables required for this action to work. Nemo will # Search in the path for these program(s) and not display the action if any are missing. # You can also supply an absolute path to a file (i.e. /usr/lib/gvfs/gvfsd-archive) to check # instead of or in addition to an executable in the path. # This is an array, separate entries with semi-colon, and terminate with a semicolon. #Dependencies=gedit; # Conditions - semicolon-separated array of special conditions: # \"desktop\" current (parent) folder is desktop # \"removable\" target (first selection) is removable # \"gsettings <schema> <boolean key>\" is true # \"gsettings <schema> <key> <key-type> <[eq|ne|gt|lt]> <value>\" # \"dbus <name>\" exists # \"exec <program>\" run program and check its exit code (0 is pass, non-0 is fail). # Enclose in < > if the program resides in the action's folder. #Conditions=desktop; # Escape Spaces - set to true to escape spaces in filenames and uris ($U, $F, $P, $D) # # Sometimes this may be preferred to getting raw filenames that must be enclosed in # quotes. # # Optional - by default this is false EscapeSpaces=true # Run in terminal - set to true to execute the Exec line in a spawned terminal window. # # Generally if you use this you should not have Quotes defined, as that will be taken care # of during converting the expanded command string into an arg vector. # # Optional - by default this is false #Terminal=false","title":"Example .nemo_action:"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/","text":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430... Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 5: \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 6: \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 7: sed \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 8: \u044f\u0437\u044b\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 9: \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 10: \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 11: expect \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0443\u0442\u0438\u043b\u0438\u0442 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u042d\u0442\u043e \u2014 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 , \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 bash. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 zsh, tcsh, ksh, \u043d\u043e \u043c\u044b \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 bash. \u042d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u0445, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0443\u043c\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 Linux. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440\u044b \u0442\u0435\u0445 \u0436\u0435 \u0441\u0430\u043c\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043b\u044c\u044e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043b\u0438\u0431\u043e \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0418\u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0432\u0432\u0435\u0434\u044f \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439: pwd ; whoami \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e \u0432 \u0441\u0432\u043e\u0451\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u044b\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u043d \u0442\u0430\u043a. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 pwd \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 whoami \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0432\u043e\u0448\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u2014 \u043b\u0438\u0448\u044c \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: getconf ARG_MAX \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043d\u0435\u0451 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043d\u0438\u0445 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0444\u0430\u0439\u043b \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f? \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c, \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u041a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u044b bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b touch . \u0412 \u0435\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443 \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 bash , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0439: #!/bin/bash \u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u0438\u043c\u0432\u043e\u043b \u0440\u0435\u0448\u0451\u0442\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u043e\u0441\u043e\u0431\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0448\u0451\u0442\u043a\u0430, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a (\u044d\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0448\u0435\u0431\u0430\u043d\u0433 ) \u0438 \u043f\u0443\u0442\u044c \u043a bash , \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0441\u043e\u0437\u0434\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f bash . \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0437\u043d\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0451\u0442\u043a\u0438. \u0412\u043e\u0442 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442: #!/bin/bash pwd whoami \u0422\u0443\u0442, \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0444\u0430\u0439\u043b \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0442\u044c. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b, \u0434\u0430\u0432 \u0435\u043c\u0443 \u0438\u043c\u044f myscript , \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u0447\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430. \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043b\u0438\u0448\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c, \u0438\u043d\u0430\u0447\u0435, \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 Permission denied . \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c: chmod +x ./myscript \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: ./myscript \u041f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c Linux \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 echo . \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0437\u043d\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u0434\u0430\u043d\u043d\u044b\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u043d\u0451\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b: #!/bin/bash echo \"The current directory is:\" pwd echo \"The user logged in is:\" whoami \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043d\u0430\u0434\u043f\u0438\u0441\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0443 echo . \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u043f\u043e\u043b\u044c\u0437\u0443\u044f\u0441\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Linux, \u0438\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 echo , \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u0435\u0437 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445: \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u0418\u043d\u043e\u0433\u0434\u0430 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u043a\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0412\u043e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u044e\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: #!/bin/bash echo \"Home for the current user is: $HOME\" \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e $HOME \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445, \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u043c\u0435\u0448\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0451 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c. \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0410 \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430? \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a: echo \"I have $1 in my pocket\" \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442 \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u043c\u0438, \u0438 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u0441\u043e\u0441\u043b\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 $1 . \u042d\u0442\u043e \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e. \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c? \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u043f\u0435\u0440\u0435\u0434 \u0437\u043d\u0430\u043a\u043e\u043c \u0434\u043e\u043b\u043b\u0430\u0440\u0430: echo \"I have \\$1 in my pocket\" \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0437\u043d\u0430\u043a\u0430 \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u044b, bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430: TNW-CUS-FMP \u2014 \u043f\u0440\u043e\u043c\u043e-\u043a\u043e\u0434 \u043d\u0430 10% \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0430 \u043d\u0430\u0448\u0438 \u0443\u0441\u043b\u0443\u0433\u0438, \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 7 \u0434\u043d\u0435\u0439 #!/bin/bash grade=5 person=\"Adam\" echo \"$person is a good boy, he is in grade $grade\" \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u041f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u041e\u0434\u043d\u0430 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u2014 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u0435\u0451 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u043d\u0430\u0447\u043a\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u00ab`\u00bb \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 $() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u043d\u0435 \u0432\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u0443\u044e \u043a\u0430\u0432\u044b\u0447\u043a\u0443. \u041a\u043e\u043c\u0430\u043d\u0434\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 \u0434\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u043a\u0430: mydir=`pwd` \u041f\u0440\u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a: mydir=$(pwd) \u0410 \u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u0438\u0442\u043e\u0433\u0435, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: #!/bin/bash mydir=$(pwd) echo $mydir \u0412 \u0445\u043e\u0434\u0435 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 mydir , \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b echo , \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c. \u0421\u043a\u0440\u0438\u043f\u0442, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0438\u0434\u0430 $((a+b)) : #!/bin/bash var1=$(( 5 + 5 )) echo $var1 var2=$(( $var1 * 2 )) echo $var2 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0435\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u044f\u0442\u0438, \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u2014 \u0434\u0440\u0443\u0433\u043e\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u0438 \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then . \u0412 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0410 \u0432\u043e\u0442 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: #!/bin/bash if pwd then echo \"It works\" fi \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0442\u0435\u043a\u0441\u0442 \u00abit works\u00bb. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0443 \u043d\u0430\u0441 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0421\u043a\u0430\u0436\u0435\u043c, \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 /etc/passwd , \u0438 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. #!/bin/bash user=likegeeks if grep $user /etc/passwd then echo \"The user $user Exists\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 grep \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 /etc/passwd . \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 grep \u0432\u0430\u043c \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u0430, \u0435\u0451 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c . \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0410 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c? \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0432. \u0425\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0441\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u043c \u0438 \u043e\u0431 \u044d\u0442\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u0443\u0435\u043c \u043a\u043e\u0434. \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then-else \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u0438 \u043e \u043d\u0435\u0443\u0434\u0430\u0447\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else . \u0412\u043e\u0442 \u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b else \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0439\u0434\u0451\u0442 \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043e \u0447\u0442\u043e-\u0442\u043e, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u044f, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u0443, \u0438\u043b\u0438 \u043b\u043e\u0436\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 else . \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0430\u043a\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" else echo \"The user $user doesn\u2019t exist\" fi \u0415\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0448\u043b\u043e \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0441 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else \u041d\u0443 \u0447\u0442\u043e \u0436\u0435, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435 \u0438 \u0437\u0430\u0434\u0430\u0434\u0438\u043c\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u043e\u0434\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0449\u0451 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u04301 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b elif \u043a\u043e\u043c\u0430\u043d\u0434\u04302 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 then , \u0438\u043d\u0430\u0447\u0435, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u043e\u0436\u043d\u044b\u043c, \u0438 \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430. #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" elif ls /home then echo \"The user doesn\u2019t exist but anyway there is a directory under /home\" fi \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b useradd , \u0435\u0441\u043b\u0438 \u043f\u043e\u0438\u0441\u043a \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0438\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0449\u0451 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0412 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. n1 -eq n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0440\u0430\u0432\u043d\u043e n2 . n1 -ge n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -gt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 n2 . n1 -le n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -lt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 n2 . n1 -ne n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e n2 . \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438. #!/bin/bash val1=6 if [ $val1 -gt 5 ] then echo \"The test value $val1 is greater than 5\" else echo \"The test value $val1 is not greater than 5\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u044d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 val1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5, \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0442\u0432\u044c then \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0412 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043a\u043e\u0441\u043d\u0451\u043c\u0441\u044f \u043d\u0438\u0436\u0435. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432. str1 = str2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. s tr1 != str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. str1 < str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c str2 . str1 > str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c str2 . -n str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. -z str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438: #!/bin/bash user =\"likegeeks\" if [$user = $USER] then echo \"The user $user is the current logged in user\" fi \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0412\u043e\u0442 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u00ab>\u00bb \u0438 \u00ab<\u00bb \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u0438\u043d\u0430\u0447\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0445\u043e\u0442\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0421\u043a\u0440\u0438\u043f\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u043d\u0430\u043a \u00ab>\u00bb \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430. \u0412\u043e\u0442 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432 \u043a\u043e\u0434\u0435: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0412\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u043a\u0440\u0438\u043f\u0442, \u0445\u043e\u0442\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0432\u044b\u0434\u0430\u0451\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: ./myscript: line 5: [: too many arguments \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u043c $val2 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> \"$val2\" ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0415\u0449\u0451 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u00ab>\u00bb \u0438 \u00ab<\u00bb \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0442\u0430\u043a\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c: Likegeeks likegeeks \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e, \u0434\u0430\u0432 \u0438\u043c\u044f myfile , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443: sort myfile \u041e\u043d\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0430\u043a: likegeeks Likegeeks \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0438: #!/bin/bash val1=Likegeeks val2=likegeeks if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0451 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u2014 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0451\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ASCII-\u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u041f\u043e\u0436\u0430\u043b\u0443\u0439, \u043d\u0438\u0436\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043a\u0430\u0441\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. -d file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0435\u0439. -e file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b. -f file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0444\u0430\u0439\u043b\u043e\u043c. -r file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. -s file \u041f \u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u043f\u0443\u0441\u0442\u044b\u043c. -w file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438. -x file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c. file1 -nt file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u043e\u0432\u0435\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . file1 -ot file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . -O file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. -G file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u0430\u043a \u0432\u043f\u0440\u043e\u0447\u0435\u043c, \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f, \u043d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c. \u0418\u0445 \u0438\u043c\u0435\u043d\u0430, \u044f\u0432\u043b\u044f\u044f\u0441\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u043f\u0440\u044f\u043c\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u0438\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u041e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435: #!/bin/bash mydir=/home/likegeeks if [ -d $mydir ] then echo \"The $mydir directory exists\" cd $ mydir ls else echo \"The $mydir directory does not exist\" fi \u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0435\u0451 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u0441\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443. \u0418\u0442\u043e\u0433\u0438 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u0435\u0449\u0438. \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0442\u0435\u043c\u0430 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0433\u0440\u043e\u043c\u043d\u0430. \u042d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0438\u0437 11 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u2014 \u0432\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u0432 \u044d\u0442\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u044e\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0438 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043f\u0440\u043e\u0447\u043b\u0438. Bash Script Step By Step \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u0439\u043b\u0430\u0445. Bash Scripting Part 2, Bash the awesome \u2014 \u0442\u0443\u0442 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438 for \u0438 while. Bash Scripting Part 3, Parameters & options \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043a\u043b\u044e\u0447\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c, \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432. Bash Scripting Part 4, Input & Output \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u0430\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438, \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0432\u0432\u043e\u0434\u0430, \u0432\u044b\u0432\u043e\u0434\u0430, \u043e\u0448\u0438\u0431\u043e\u043a, \u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0430. Bash Scripting Part 5, Sighals & Jobs \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0438\u0433\u043d\u0430\u043b\u0430\u043c Linux, \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e. Bash Scripting Part 6, Functions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. Bash Scripting Part 7, Using sed \u2014 \u044d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c sed. Bash Scripting Part 8, Using awk \u2014 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk. Bash Scripting Part 9, Regular Expressions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. Bash Scripting Part 10, Practical Examples \u2014 \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u0451\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0434\u0438\u0441\u043a\u0430. Bash Scripting Part 11, Expect Command \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0443 Expect, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c\u0438. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0437\u0434\u0435\u0441\u044c \u0438\u0434\u0451\u0442 \u0440\u0435\u0447\u044c \u043e\u0431 expect-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0438 \u043e\u0431 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438. \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u043e\u0434\u043d\u043e \u0438\u0437 \u0446\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u044d\u0442\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f\u0441\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043b\u044e\u0431\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0432\u0435\u0434\u0451\u0442 \u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u044b\u043c \u0442\u0435\u043c\u0430\u043c, \u0434\u0430\u0432\u0430\u044f \u0448\u0430\u043d\u0441 \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u043c \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Linux. \u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438! \u041f\u0440\u043e\u0441\u0438\u043c \u0433\u0443\u0440\u0443 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u043c\u0430\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u0430, \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u043c\u0438, \u0430 \u043e\u0442 \u0442\u0435\u0445, \u043a\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442, \u0436\u0434\u0451\u043c \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0439. \u0422\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u043e\u0441\u0435. \u0412\u043e\u0439\u0434\u0438\u0442\u0435 , \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430. Source","title":"Bash \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u043e"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#bash-","text":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430... Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 5: \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 6: \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 7: sed \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 8: \u044f\u0437\u044b\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 9: \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 10: \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 11: expect \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0443\u0442\u0438\u043b\u0438\u0442 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u042d\u0442\u043e \u2014 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 , \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 bash. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 zsh, tcsh, ksh, \u043d\u043e \u043c\u044b \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 bash. \u042d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u0445, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0443\u043c\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 Linux. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440\u044b \u0442\u0435\u0445 \u0436\u0435 \u0441\u0430\u043c\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043b\u044c\u044e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043b\u0438\u0431\u043e \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0418\u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0432\u0432\u0435\u0434\u044f \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439: pwd ; whoami \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e \u0432 \u0441\u0432\u043e\u0451\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u044b\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u043d \u0442\u0430\u043a. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 pwd \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 whoami \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0432\u043e\u0448\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u2014 \u043b\u0438\u0448\u044c \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: getconf ARG_MAX \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043d\u0435\u0451 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043d\u0438\u0445 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0444\u0430\u0439\u043b \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f? \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c, \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.","title":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#bash-_1","text":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b touch . \u0412 \u0435\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443 \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 bash , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0439: #!/bin/bash \u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u0438\u043c\u0432\u043e\u043b \u0440\u0435\u0448\u0451\u0442\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u043e\u0441\u043e\u0431\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0448\u0451\u0442\u043a\u0430, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a (\u044d\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0448\u0435\u0431\u0430\u043d\u0433 ) \u0438 \u043f\u0443\u0442\u044c \u043a bash , \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0441\u043e\u0437\u0434\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f bash . \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0437\u043d\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0451\u0442\u043a\u0438. \u0412\u043e\u0442 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442: #!/bin/bash pwd whoami \u0422\u0443\u0442, \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0444\u0430\u0439\u043b \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0442\u044c. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.","title":"\u041a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u044b bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_1","text":"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b, \u0434\u0430\u0432 \u0435\u043c\u0443 \u0438\u043c\u044f myscript , \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u0447\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430. \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043b\u0438\u0448\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c, \u0438\u043d\u0430\u0447\u0435, \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 Permission denied . \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c: chmod +x ./myscript \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: ./myscript \u041f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_2","text":"\u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c Linux \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 echo . \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0437\u043d\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u0434\u0430\u043d\u043d\u044b\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u043d\u0451\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b: #!/bin/bash echo \"The current directory is:\" pwd echo \"The user logged in is:\" whoami \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043d\u0430\u0434\u043f\u0438\u0441\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0443 echo . \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u043f\u043e\u043b\u044c\u0437\u0443\u044f\u0441\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Linux, \u0438\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 echo , \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b.","title":"\u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_3","text":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u0435\u0437 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445: \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_4","text":"\u0418\u043d\u043e\u0433\u0434\u0430 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u043a\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0412\u043e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u044e\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: #!/bin/bash echo \"Home for the current user is: $HOME\" \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e $HOME \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445, \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u043c\u0435\u0448\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0451 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c. \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0410 \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430? \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a: echo \"I have $1 in my pocket\" \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442 \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u043c\u0438, \u0438 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u0441\u043e\u0441\u043b\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 $1 . \u042d\u0442\u043e \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e. \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c? \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u043f\u0435\u0440\u0435\u0434 \u0437\u043d\u0430\u043a\u043e\u043c \u0434\u043e\u043b\u043b\u0430\u0440\u0430: echo \"I have \\$1 in my pocket\" \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0437\u043d\u0430\u043a\u0430 \u0434\u043e\u043b\u043b\u0430\u0440\u0430","title":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_5","text":"\u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u044b, bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430: TNW-CUS-FMP \u2014 \u043f\u0440\u043e\u043c\u043e-\u043a\u043e\u0434 \u043d\u0430 10% \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0430 \u043d\u0430\u0448\u0438 \u0443\u0441\u043b\u0443\u0433\u0438, \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 7 \u0434\u043d\u0435\u0439 #!/bin/bash grade=5 person=\"Adam\" echo \"$person is a good boy, he is in grade $grade\" \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_6","text":"\u041e\u0434\u043d\u0430 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u2014 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u0435\u0451 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u043d\u0430\u0447\u043a\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u00ab`\u00bb \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 $() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u043d\u0435 \u0432\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u0443\u044e \u043a\u0430\u0432\u044b\u0447\u043a\u0443. \u041a\u043e\u043c\u0430\u043d\u0434\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 \u0434\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u043a\u0430: mydir=`pwd` \u041f\u0440\u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a: mydir=$(pwd) \u0410 \u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u0438\u0442\u043e\u0433\u0435, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: #!/bin/bash mydir=$(pwd) echo $mydir \u0412 \u0445\u043e\u0434\u0435 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 mydir , \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b echo , \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c. \u0421\u043a\u0440\u0438\u043f\u0442, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","title":"\u041f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_7","text":"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0438\u0434\u0430 $((a+b)) : #!/bin/bash var1=$(( 5 + 5 )) echo $var1 var2=$(( $var1 * 2 )) echo $var2 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438","title":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#if-then","text":"\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0435\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u044f\u0442\u0438, \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u2014 \u0434\u0440\u0443\u0433\u043e\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u0438 \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then . \u0412 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0410 \u0432\u043e\u0442 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: #!/bin/bash if pwd then echo \"It works\" fi \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0442\u0435\u043a\u0441\u0442 \u00abit works\u00bb. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0443 \u043d\u0430\u0441 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0421\u043a\u0430\u0436\u0435\u043c, \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 /etc/passwd , \u0438 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. #!/bin/bash user=likegeeks if grep $user /etc/passwd then echo \"The user $user Exists\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 grep \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 /etc/passwd . \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 grep \u0432\u0430\u043c \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u0430, \u0435\u0451 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c . \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0410 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c? \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0432. \u0425\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0441\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u043c \u0438 \u043e\u0431 \u044d\u0442\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u0443\u0435\u043c \u043a\u043e\u0434.","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#if-then-else","text":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u0438 \u043e \u043d\u0435\u0443\u0434\u0430\u0447\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else . \u0412\u043e\u0442 \u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b else \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0439\u0434\u0451\u0442 \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043e \u0447\u0442\u043e-\u0442\u043e, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u044f, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u0443, \u0438\u043b\u0438 \u043b\u043e\u0436\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 else . \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0430\u043a\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" else echo \"The user $user doesn\u2019t exist\" fi \u0415\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0448\u043b\u043e \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0441 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else \u041d\u0443 \u0447\u0442\u043e \u0436\u0435, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435 \u0438 \u0437\u0430\u0434\u0430\u0434\u0438\u043c\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u043e\u0434\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0449\u0451 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u04301 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b elif \u043a\u043e\u043c\u0430\u043d\u0434\u04302 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 then , \u0438\u043d\u0430\u0447\u0435, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u043e\u0436\u043d\u044b\u043c, \u0438 \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430. #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" elif ls /home then echo \"The user doesn\u2019t exist but anyway there is a directory under /home\" fi \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b useradd , \u0435\u0441\u043b\u0438 \u043f\u043e\u0438\u0441\u043a \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0438\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0449\u0451 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435.","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then-else"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_8","text":"\u0412 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. n1 -eq n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0440\u0430\u0432\u043d\u043e n2 . n1 -ge n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -gt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 n2 . n1 -le n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -lt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 n2 . n1 -ne n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e n2 . \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438. #!/bin/bash val1=6 if [ $val1 -gt 5 ] then echo \"The test value $val1 is greater than 5\" else echo \"The test value $val1 is not greater than 5\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u044d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 val1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5, \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0442\u0432\u044c then \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_9","text":"\u0412 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043a\u043e\u0441\u043d\u0451\u043c\u0441\u044f \u043d\u0438\u0436\u0435. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432. str1 = str2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. s tr1 != str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. str1 < str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c str2 . str1 > str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c str2 . -n str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. -z str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438: #!/bin/bash user =\"likegeeks\" if [$user = $USER] then echo \"The user $user is the current logged in user\" fi \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0412\u043e\u0442 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u00ab>\u00bb \u0438 \u00ab<\u00bb \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u0438\u043d\u0430\u0447\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0445\u043e\u0442\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0421\u043a\u0440\u0438\u043f\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u043d\u0430\u043a \u00ab>\u00bb \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430. \u0412\u043e\u0442 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432 \u043a\u043e\u0434\u0435: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0412\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u043a\u0440\u0438\u043f\u0442, \u0445\u043e\u0442\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0432\u044b\u0434\u0430\u0451\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: ./myscript: line 5: [: too many arguments \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u043c $val2 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> \"$val2\" ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0415\u0449\u0451 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u00ab>\u00bb \u0438 \u00ab<\u00bb \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0442\u0430\u043a\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c: Likegeeks likegeeks \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e, \u0434\u0430\u0432 \u0438\u043c\u044f myfile , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443: sort myfile \u041e\u043d\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0430\u043a: likegeeks Likegeeks \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0438: #!/bin/bash val1=Likegeeks val2=likegeeks if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0451 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u2014 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0451\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ASCII-\u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_10","text":"\u041f\u043e\u0436\u0430\u043b\u0443\u0439, \u043d\u0438\u0436\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043a\u0430\u0441\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. -d file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0435\u0439. -e file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b. -f file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0444\u0430\u0439\u043b\u043e\u043c. -r file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. -s file \u041f \u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u043f\u0443\u0441\u0442\u044b\u043c. -w file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438. -x file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c. file1 -nt file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u043e\u0432\u0435\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . file1 -ot file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . -O file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. -G file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u0430\u043a \u0432\u043f\u0440\u043e\u0447\u0435\u043c, \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f, \u043d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c. \u0418\u0445 \u0438\u043c\u0435\u043d\u0430, \u044f\u0432\u043b\u044f\u044f\u0441\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u043f\u0440\u044f\u043c\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u0438\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u041e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435: #!/bin/bash mydir=/home/likegeeks if [ -d $mydir ] then echo \"The $mydir directory exists\" cd $ mydir ls else echo \"The $mydir directory does not exist\" fi \u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0435\u0451 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u0441\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443.","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"linux/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_11","text":"\u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u0435\u0449\u0438. \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0442\u0435\u043c\u0430 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0433\u0440\u043e\u043c\u043d\u0430. \u042d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0438\u0437 11 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u2014 \u0432\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u0432 \u044d\u0442\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u044e\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0438 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043f\u0440\u043e\u0447\u043b\u0438. Bash Script Step By Step \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u0439\u043b\u0430\u0445. Bash Scripting Part 2, Bash the awesome \u2014 \u0442\u0443\u0442 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438 for \u0438 while. Bash Scripting Part 3, Parameters & options \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043a\u043b\u044e\u0447\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c, \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432. Bash Scripting Part 4, Input & Output \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u0430\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438, \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0432\u0432\u043e\u0434\u0430, \u0432\u044b\u0432\u043e\u0434\u0430, \u043e\u0448\u0438\u0431\u043e\u043a, \u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0430. Bash Scripting Part 5, Sighals & Jobs \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0438\u0433\u043d\u0430\u043b\u0430\u043c Linux, \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e. Bash Scripting Part 6, Functions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. Bash Scripting Part 7, Using sed \u2014 \u044d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c sed. Bash Scripting Part 8, Using awk \u2014 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk. Bash Scripting Part 9, Regular Expressions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. Bash Scripting Part 10, Practical Examples \u2014 \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u0451\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0434\u0438\u0441\u043a\u0430. Bash Scripting Part 11, Expect Command \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0443 Expect, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c\u0438. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0437\u0434\u0435\u0441\u044c \u0438\u0434\u0451\u0442 \u0440\u0435\u0447\u044c \u043e\u0431 expect-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0438 \u043e\u0431 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438. \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u043e\u0434\u043d\u043e \u0438\u0437 \u0446\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u044d\u0442\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f\u0441\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043b\u044e\u0431\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0432\u0435\u0434\u0451\u0442 \u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u044b\u043c \u0442\u0435\u043c\u0430\u043c, \u0434\u0430\u0432\u0430\u044f \u0448\u0430\u043d\u0441 \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u043c \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Linux. \u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438! \u041f\u0440\u043e\u0441\u0438\u043c \u0433\u0443\u0440\u0443 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u043c\u0430\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u0430, \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u043c\u0438, \u0430 \u043e\u0442 \u0442\u0435\u0445, \u043a\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442, \u0436\u0434\u0451\u043c \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0439. \u0422\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u043e\u0441\u0435. \u0412\u043e\u0439\u0434\u0438\u0442\u0435 , \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430. Source","title":"\u0418\u0442\u043e\u0433\u0438"},{"location":"linux/Bind%20Mouse%20Buttons%20To%20Keyboard%20Keys%20Or%20Commands/","text":"Bind Mouse Buttons To Keyboard Keys Or Commands If you have a mouse with extra buttons, you can bind those buttons to perform a key combination, run a program, command or script. This will only work if you use X11 (it does not work on Wayland) because the tools we'll use for this only support X11. To bind the mouse buttons to key combinations we'll use the following tools: xbindkeys : a program that grab keys and mouse button events in X and starts associated shell command xev : a tool that prints contents of X events xdotool : command-line X11 automation tool that lets you programmatically (or manually) simulate keyboard input and mouse activity (and more) In case you don't need to bind mouse buttons to keyboard keys, and all you want to bind to the mouse buttons are programs, commands or scripts, you can skip the installation of xdotool. 1. Install xbindkeys, xev and xdotool. Debian, Ubuntu, Linux Mint, Pop!_OS, Elementary OS and other Debian or Ubuntu based Linux distributions: sudo apt install xbindkeys x11-utils xdotool Fedora: sudo dnf install xbindkeys xorg-x11-utils xdotool openSUSE: sudo zypper install xbindkeys xev xdotool Arch Linux or Manjaro: sudo pacman -S xbindkeys xorg-xev xdotool On other Linux distributions you'll have to search in the repositories for xdotool , xev and xbindkeys and install them. 2. Grab the mouse button codes. To get the mouse button code(s), run this command: xev | grep button Next, focus the small window that pops up and watch the terminal output. Now press the mouse button for which you want to grab the code. After pressing the button you should see its code in the terminal where you ran xev, e.g.: $ xev | grep button state 0x10, button 8, same_screen YES In this example, the button code we'll need later is 8 . 3. Grab the keystrokes that we'll later send using a mouse button (skip if you want to bind a command / script / program to a mouse button) Open a terminal and run this command (via AskUbuntu ): xev | sed -ne '/^KeyPress/,/^$/p' Once again, a small window will pop up that you need to focus. Next, press the keys on your keyboard that you want to remap to your mouse, each at a time, and watch the xev command output in the terminal. For example if you want to bind Ctrl + Alt + Up to a mouse button, press Ctrl , then Alt and finally Up . In my case, this is the output of xev for these 3 key presses (the first one is for Control_L or left Control key, the second for Alt_L or left Alt, and the third is for Up : KeyPress event, serial 33, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6741696, (46,-37), root:(728,598), state 0x10, keycode 37 (keysym 0xffe3, Control_L), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False KeyPress event, serial 36, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6743289, (46,-37), root:(728,598), state 0x10, keycode 64 (keysym 0xffe9, Alt_L), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False KeyPress event, serial 36, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6744780, (46,-37), root:(728,598), state 0x10, keycode 111 (keysym 0xff52, Up), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False Note down the keycode, keysim or name of the key. You can use any of the 3, e.g. for the first key above you can use either 37 , 0xffe3 , or Control_L . In this article I'll use the key name (e.g. Control_L for left control key) since they are easier to read. It's worth noting that xbindkeys can be used grab the keycodes too ( xbindkeys -k ), but it reads all active keys so it can be confusing in some cases, e.g. if you have Caps_Lock or Num_Lock on, etc., so I personally prefer to use xev for this task. Neither xed nor xbindkeys -k will show the keycodes / keyboard symbols for multimedia keys. In case you want to remap multimedia keys to mouse buttons, you can get a list of such keyboard symbols by visiting this link . Mouse-related article: How To Disable Mouse Acceleration In Ubuntu 18.04 Or 19.10 (Gnome) . 4. Create the xbindkeys configuration (in ~/.xbindkeysrc ). You may either create an empty ~/.xbindkeysrc file, or generate a sample configuration file using this command: xbindkeys -d > ~/.xbindkeysrc Next, open ~/.xbindkeysrc with your favorite text editor. Note that .xbindkeysrc is a hidden file in your home directory so you'll need to press Ctrl + h (to show hidden files and folders) to see it in your file manager. To bind a mouse button to a key combination , paste the following at the end of the ~/.xbindkeysrc file (it may already contain some key binds, it may contain the sample configuration or it can be empty - it doesn't matter): \"xdotool key 'KEY-COMBINATION'\" b:MOUSE-BUTTON-CODE Where: KEY-COMBINATION are the keystrokes you got under step 3 (separate the keys with a + sign) MOUSE-BUTTON-CODE is the mouse button code that you got under step 2 Example: \"xdotool key 'Control_L+Alt_L+Down'\" b:8 This remaps the mouse button 8 (which for my mouse is the button that can be used as a back button in a web browser for example) to Control_L+Alt_L+Down which in GNOME Shell is used to switch to workspace down. To also remap the mouse forward button (mouse button 9 in my case) to Control_L+Alt_L+Up (switch to workspace up in GNOME Shell), I'd have to add this to the ~/.xbindkeysrc file: \"xdotool key 'Control_L+Alt_L+Up'\" b:9 Another example. To bind the keyboard media keys for raising and lowering the volume to mouse buttons 8 and 9: \"xdotool key 'XF86AudioRaiseVolume'\" b:9 \"xdotool key 'XF86AudioLowerVolume'\" b:8 In the same way, add as many key binds as you wish, but make sure you're not using some already existing key combinations. To bind a command, script or program to a mouse button , use this in the ~/.xbindkeysrc file: \"COMMAND\" b:MOUSE-BUTTON-CODE Here: COMMAND is a command, script or program MOUSE-BUTTON-CODE is the mouse button code that you got under step 2 You may also like: Run Or Raise Application Windows On Linux (X11) Using A Single Keyboard Shortcut With jumpapp . Example for running a program using a mouse button: \"firefox\" b:8 This starts Firefox when pressing mouse button 9 (which for my mouse is the button that can be used as a back button in a web browser for example). 5. Start xbindkeys. Now you can start xbindkeys using a terminal and typing: xbindkeys In case xbindkeys was running, you can get it to use the new configuration by issuing: xbindkeys --poll-rc This command failed in a few cases for me when I changed the xbindkeys configuration, I'm not sure why. In such a case you can restart it by killing the xbindkeys process and running it again: killall xbindkeys xbindkeys On Ubuntu, xbindkeys is automatically started on system startup if it finds a non-empty (it needs to have lines that are not commented out) ~/.xbindkeysrc configuration file. If the tool doesn't automatically start for the Linux distribution you're using, add xbindkeys to your startup programs. Source","title":"Bind Mouse Buttons To Keyboard Keys Or Commands"},{"location":"linux/Fix%20Large%20Black%20Borders%20Around%20Windows%20GTK%203.16/","text":"Fix Large Black Borders Around Windows GTK 3.16 Fix Large Black Borders Around Header Bar Apps With Some Themes In Ubuntu 15.10 (GTK 3.16) Author: Andrew | Posted: November 13, 2015 In Ubuntu 15.10 (which uses GTK 3.16), there's a bug which causes some themes, like Numix, to have large black borders. This bug only occurs for applications that use header bars (client-side decorations) and it affects Ubuntu (with Unity), while Xubuntu, Ubuntu MATE and Ubuntu GNOME don't seem to be affected (at least in my quick test). Update: MATE with Compiz enabled is also affected so I guess any desktop environment under which you use Compiz is affected (thanks to pawelp!). Here's a screenshot with GNOME Clocks (an app that uses header bars) under Unity (Ubuntu 15.10), using Numix GTK theme: I'm not sure when/if this bug will be fixed but until then, you can fix it yourself. Below you'll find a simple fix which will remove the black borders no matter what GTK theme you're using. To fix the large black borders bug in Ubuntu, open ~/.config/gtk-3.0/gtk.css (create the ~/.config/gtk-3.0 folder if it doesn't exist) with a text editor (I'll use Gedit below): mkdir -p ~/.config/gtk-3.0 gedit ~/.config/gtk-3.0/gtk.css and in this file, add the following: .window-frame { box-shadow: none; margin: 1px; } This forces any theme you use to have a 1 pixel border. You can use any value you want - for instance, use \"0\" for borderless windows . Then save the file and close all the applications affected by the black border bug (or you can log out and log back in) , then try them again and you shouldn't see large black borders any more. Here's the same application I've used above to show the bug (GNOME Clocks, running under Unity), after applying the fix: Thanks to Phaeilo @ GitHub for the fix! Source","title":"Fix Large Black Borders Around Windows GTK 3.16"},{"location":"linux/Fix%20Large%20Black%20Borders%20Around%20Windows%20GTK%203.16/#fix-large-black-borders-around-header-bar-apps-with-some-themes-in-ubuntu-1510-gtk-316","text":"Author: Andrew | Posted: November 13, 2015 In Ubuntu 15.10 (which uses GTK 3.16), there's a bug which causes some themes, like Numix, to have large black borders. This bug only occurs for applications that use header bars (client-side decorations) and it affects Ubuntu (with Unity), while Xubuntu, Ubuntu MATE and Ubuntu GNOME don't seem to be affected (at least in my quick test). Update: MATE with Compiz enabled is also affected so I guess any desktop environment under which you use Compiz is affected (thanks to pawelp!). Here's a screenshot with GNOME Clocks (an app that uses header bars) under Unity (Ubuntu 15.10), using Numix GTK theme: I'm not sure when/if this bug will be fixed but until then, you can fix it yourself. Below you'll find a simple fix which will remove the black borders no matter what GTK theme you're using. To fix the large black borders bug in Ubuntu, open ~/.config/gtk-3.0/gtk.css (create the ~/.config/gtk-3.0 folder if it doesn't exist) with a text editor (I'll use Gedit below): mkdir -p ~/.config/gtk-3.0 gedit ~/.config/gtk-3.0/gtk.css and in this file, add the following: .window-frame { box-shadow: none; margin: 1px; } This forces any theme you use to have a 1 pixel border. You can use any value you want - for instance, use \"0\" for borderless windows . Then save the file and close all the applications affected by the black border bug (or you can log out and log back in) , then try them again and you shouldn't see large black borders any more. Here's the same application I've used above to show the bug (GNOME Clocks, running under Unity), after applying the fix: Thanks to Phaeilo @ GitHub for the fix! Source","title":"Fix Large Black Borders Around Header Bar Apps With Some Themes In Ubuntu 15.10 (GTK 3.16)"},{"location":"linux/How%20to%20add%20keyboard%20shortcuts%20to%20nemo/","text":"How to add keyboard shortcuts to nemo Add keyboard shortcuts to nemo for Nemo 2.2.4 under Linux Mint 17 do this: Go to: /home/yourusername/.gnome2/accels --- NOTE: .gnome2 is a hidden folder! Open the \"nemo\" file with your text editor Add your shortcut: for example, when having 2 panes to move a folder or file from one pane to the other using \"CTRL+j\" : (gtk_accel_path \"/DirViewActions/Move to next pane\" \"j\") Note: remove the \";\" at the beginning of the line Restart the GTK system : sudo killall -u yourusername Open Nemo, to test my example: press \"F3\" choose different folders on each pane, select one folder or file from one pane and press \"Ctrl+j\", that folder or file should move from one pane to the other one. There are a lot of different commands to customize in that file, be careful not to use a current shortcut! Source","title":"How to add keyboard shortcuts to nemo"},{"location":"linux/How%20to%20add%20keyboard%20shortcuts%20to%20nemo/#add-keyboard-shortcuts-to-nemo","text":"for Nemo 2.2.4 under Linux Mint 17 do this: Go to: /home/yourusername/.gnome2/accels --- NOTE: .gnome2 is a hidden folder! Open the \"nemo\" file with your text editor Add your shortcut: for example, when having 2 panes to move a folder or file from one pane to the other using \"CTRL+j\" : (gtk_accel_path \"/DirViewActions/Move to next pane\" \"j\") Note: remove the \";\" at the beginning of the line Restart the GTK system : sudo killall -u yourusername Open Nemo, to test my example: press \"F3\" choose different folders on each pane, select one folder or file from one pane and press \"Ctrl+j\", that folder or file should move from one pane to the other one. There are a lot of different commands to customize in that file, be careful not to use a current shortcut! Source","title":"Add keyboard shortcuts to nemo"},{"location":"linux/Joplin%20Terminal/","text":"Joplin Terminal Install: Operating system Method macOS, Linux, or Windows (via WSL ) Important: First, install Node 12+ . NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin By default, the application binary will be installed under ~/.joplin-bin . You may change this directory if needed. Alternatively, if your npm permissions are setup as described here (Option 2) then simply running npm -g install joplin would work. To start it, type joplin . Export notes: joplin --profile ~/.config/joplin-desktop export ~/dest_folder --format md --notebook notes","title":"Joplin Terminal"},{"location":"linux/Joplin%20Terminal/#install","text":"Operating system Method macOS, Linux, or Windows (via WSL ) Important: First, install Node 12+ . NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin By default, the application binary will be installed under ~/.joplin-bin . You may change this directory if needed. Alternatively, if your npm permissions are setup as described here (Option 2) then simply running npm -g install joplin would work. To start it, type joplin .","title":"Install:"},{"location":"linux/Joplin%20Terminal/#export-notes","text":"joplin --profile ~/.config/joplin-desktop export ~/dest_folder --format md --notebook notes","title":"Export notes:"},{"location":"linux/Mosquitto/","text":"Mosquitto Install server: sudo apt install mosquitto Install pub/sub clients: sudo apt install mosquitto-clients Subscribe: mosquitto_sub -h localhost -p 1883 -t my-mqtt-topic Publish: mosquitto_pub -h localhost -p 1883 -t my-mqtt-topic -m \"sample-msg-1\"","title":"Mosquitto"},{"location":"linux/Remove%20recursive%20by%20extension/","text":"Remove recursive by extension Remove files recursively by extension find . -name \"*.bak\" -type f -delete But use it with precaution. Run first: find . -name \"*.bak\" -type f to see exactly which files you will remove. Also, make sure that -delete is the last argument in your command. If you put it before the -name *.bak argument, it will delete everything.","title":"Remove recursive by extension"},{"location":"linux/Remove%20recursive%20by%20extension/#remove-files-recursively-by-extension","text":"find . -name \"*.bak\" -type f -delete But use it with precaution. Run first: find . -name \"*.bak\" -type f to see exactly which files you will remove. Also, make sure that -delete is the last argument in your command. If you put it before the -name *.bak argument, it will delete everything.","title":"Remove files recursively by extension"},{"location":"linux/Repack%20AppImage/","text":"Repack AppImage Unpack First , look if your AppImage file is using the newest version of its internal format: /path/to/your.AppImage --appimage-help If you see the following line in the output: --appimage-extract Extract content from embedded filesystem image you can conclude yourself how to proceed. In this case you have a (newer) type 2 AppImage format in front of you. (The 'path' part of the command may be relative or absolute.) Second , if the first command didn't work, you can use a helper tool. However, you need sudo/root privileges for this: download appimagetool (which off course is available as an AppImage). Make it executable and run: /path/to/appimagetool-x86_64.AppImage --list /path/to/your.AppImage This should give you a list of all files and their (relative) paths embedded in your.AppImage . To extract your.AppImage into a directory named and located at /path/to/somedir , run mkdir /path/to/somedir /path/to/appimagetool-x86_64.AppImage /path/to/your.AppImage /path/to/somedir Third , you can mount AppImages (type 1 as well as type 2) without the helper tool too: Type 1: mkdir mountpoint sudo mount -o loop my.AppImage mountpoint/ # You can now inspect the contents # You can now also copy the contents to a writable location of your hard disk sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Type 2: mkdir mountpoint my.AppImage --appimage-offset 123456 # This is just an example output sudo mount my.AppImage mountpoint/ -o offset = 123456 # you can now inspect the contents sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Hint for the 'paranoid': If you do not want to trust the AppImage, the third method is preferable. Because running (for type 2 AppImages) the.AppImage --appimage-extract or the.AppImage --appimage-mount or the.AppImage --appimage-offset means you are actually executing an AppImage (though not its content). Repack: To answer the question of @jayarjo in the comment below ( how to re-package the AppImage after modifications? ): You can use appimagetool not just to extract an existing AppImage into an AppDir. You can use it to also re-package the AppDir (possibly after some changes) back into a (modified) AppImage. Just run appimagetool -v /path/to/AppDir or ARCH = x86_64 ./appimagetool-x86_64.AppImage -v /path/to/AppDir Watch output of command (made verbose by -v ) for the location and name of the newly created AppImage. That's it. Source","title":"Repack AppImage"},{"location":"linux/Repack%20AppImage/#unpack","text":"First , look if your AppImage file is using the newest version of its internal format: /path/to/your.AppImage --appimage-help If you see the following line in the output: --appimage-extract Extract content from embedded filesystem image you can conclude yourself how to proceed. In this case you have a (newer) type 2 AppImage format in front of you. (The 'path' part of the command may be relative or absolute.) Second , if the first command didn't work, you can use a helper tool. However, you need sudo/root privileges for this: download appimagetool (which off course is available as an AppImage). Make it executable and run: /path/to/appimagetool-x86_64.AppImage --list /path/to/your.AppImage This should give you a list of all files and their (relative) paths embedded in your.AppImage . To extract your.AppImage into a directory named and located at /path/to/somedir , run mkdir /path/to/somedir /path/to/appimagetool-x86_64.AppImage /path/to/your.AppImage /path/to/somedir Third , you can mount AppImages (type 1 as well as type 2) without the helper tool too: Type 1: mkdir mountpoint sudo mount -o loop my.AppImage mountpoint/ # You can now inspect the contents # You can now also copy the contents to a writable location of your hard disk sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Type 2: mkdir mountpoint my.AppImage --appimage-offset 123456 # This is just an example output sudo mount my.AppImage mountpoint/ -o offset = 123456 # you can now inspect the contents sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Hint for the 'paranoid': If you do not want to trust the AppImage, the third method is preferable. Because running (for type 2 AppImages) the.AppImage --appimage-extract or the.AppImage --appimage-mount or the.AppImage --appimage-offset means you are actually executing an AppImage (though not its content).","title":"Unpack"},{"location":"linux/Repack%20AppImage/#repack","text":"To answer the question of @jayarjo in the comment below ( how to re-package the AppImage after modifications? ): You can use appimagetool not just to extract an existing AppImage into an AppDir. You can use it to also re-package the AppDir (possibly after some changes) back into a (modified) AppImage. Just run appimagetool -v /path/to/AppDir or ARCH = x86_64 ./appimagetool-x86_64.AppImage -v /path/to/AppDir Watch output of command (made verbose by -v ) for the location and name of the newly created AppImage. That's it. Source","title":"Repack:"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/","text":"Setting up KeePassXC with synchronization Setting up KeePassXC on Linux (with Cloud Synchronization) Stay open-source, trust no one. Master Password The most important thing about using a password manager is to choose a ( really, really ) strong master password. If you\u2019re not genuinely impressed with yourself when you type it in, it\u2019s not strong enough. The point of switching to a password manager is to have all of your most sensitive credentials in one impregnable place; your bank account, credit cards, mail, social media \u2014 whether it\u2019s your assets or your reputation, the dearest information you have is most probably accessible through the internet, ergo your passwords for this information should be as un-hackable as possible. xkcd knows. In my opinion the best approach in this case, and in many other cases, is to combine: choose four random words that are easy for you to remember, but combine uppercase, lowercase, and special characters as well. E.g. \u201ccorrect horse battery staple\u201d isn\u2019t much harder to remember than \u201cC0rrEct(hOrse)b@TTery+$7ap13|\u201d once you\u2019ve practiced typing it a couple of times, but the increase in entropy is substantial. It will take you longer to type, but I\u2019d argue the extra minute a day (at most!) is a fair price for securing all of your passwords. Let your muscle memory do the heavy lifting and you\u2019ll be surprised at how easily it comes to you after a few times. Just to be on the safe side, copy your master password to a physical note and put it in a completely secure place that no one with access to your computer could ever possibly know of. Key File Go to Database \u2192 Database settings\u2026 \u2192 Security . Under the Password section at the top you should see a Key File section. Database \u2192 Database settings\u2026 \u2192 Security This allows setting or creating a binary file that is used together with or instead of a master password. It is recommended to let the application generate a key file for you, and to copy it to three USB sticks. One you will carry with you, the other two you will keep as backup (in separate locations from the physical backup for your master password!). Having a key file means that even if someone somehow gains access to your password, you have a second form of authentication that prevents them from being able to use it. Again, you pay with convenience, but profit immensely in security. Simply get in the habit of throwing that USB stick in your pocket or backpack when you leave the house to any place where you might need access to your passwords. This should really be limited to perhaps one or two computers you work on. We\u2019ll talk about your mobile phone in a second. Decryption Time In the same Database settings\u2026 \u2192 Security menu, note the second tab titled Encryption Settings . The first field in this tab is labeled Decryption Time and should have a Change button opposite of it. Press the button and validate your decryption time setting is set to at least 1 second. Feel free to give it a couple of extra deciseconds (hundreds of milliseconds) while you\u2019re at it. The difference will be effectively indistinguishable, but the result will be a significant increase in the number of iterations used when encrypting your data, making it much harder to decrypt. These are the basics. You can also set a default username for new entries ( Database \u2192 Database settings\u2026 \u2192 General ), which I like to have as my e-mail address, change the time interval for clearing the clipboard after copying passwords ( Tools \u2192 Settings \u2192 Security ), decide to show a system tray icon ( Tools \u2192 Settings \u2192 General ), and much, much more. Explore and make it your own! First, you probably want to have your passwords available on your mobile phone. I use Keepass2Android and am very satisfied. Keepass2Android allows you to set the location of the database file from various cloud services (including Google Drive, Dropbox, OneDrive, ownCloud, NextCloud, and more). However, KeePassXC does not. As stated in the KeePassXC website : _Why is there no cloud synchronization feature built into KeePassXC? _Cloud synchronization with Dropbox, Google Drive, OneDrive, ownCloud, Nextcloud etc. can be easily accomplished by simply storing your KeePassXC database inside your shared cloud folder and letting your desktop synchronization client do the rest. We prefer this approach, because it is simple, not tied to a specific cloud provider and keeps the complexity of our code low. Now it really depends on what cloud service you are using. Dropbox provides a Linux client, and so do ownCloud and NextCloud , but Google Drive and OneDrive don\u2019t offer a particularly straightforward solution for Linux users. Also, you may not want or be able to install your cloud provider\u2019s client in all the computers you need to have access to your passwords from. EDIT : if you\u2019re using GNOME there actually is a simple method to mount both Google Drive and OneDrive, more information here . Thanks to KeePassXC on twitter, for pointing this out. This could pose a potential problem, but fret not \u2014 Rclone has got you covered. Rclone According to Rclone\u2019s GitHub project \u2019s README: Rclone (\u201crsync for cloud storage\u201d) is a command line program to sync files and directories to and from different cloud storage providers. If you\u2019ve clicked on either of two previous links and reviewed the incredible list of supported cloud storage providers , you could almost certainly spot whichever cloud service you might be using as well as just about any other one you\u2019ve ever heard of (and a dozen you haven\u2019t). Most importantly, the list includes any one of the services supported by Keepass2Android. Installation is as simple as running: curl https://rclone.org/install.sh | sudo bash . To verify everything went smoothly you can execute rclone --version (or -V ) and see that you get the expected output. Use the instructions on Rclone\u2019s homepage to set up a connection to your preferred cloud storage provider by following the link next to its name. This process is usually quite effortless and mostly entails running rclone config , selecting whichever provider you\u2019re using, choosing a name for the created remote location, and accepting some defaults. To validate your configuration, execute: rclone lsd _name_: , where name represents the name you chose for the remote (cloud) location. This will list all top-level directories within that location. Generally speaking, remote paths in Rclone are specified as _name_:remote/path (which is why _name_: points to the root directory). Automation Now that you have established a connection with your cloud storage provider, you need a script to automate the task of checking for updates and importing (if the remote version is newer) or exporting (if the local version is newer). I am not much of a bash scriptwriter, but I\u2019ve come up with something relatively simple that seems to work: Bash script to automate database file synchronization All you have to do is download the file (you can also click the \u201cview raw\u201d button and copy directly to a file on your computer) and change the values of the four variables under the \u201cConfiguration\u201d title ( DRIVE_NAME , DB_FILE_NAME , LOCAL_LOCATION , and REMOTE_LOCATION ) according to your setup. I like to keep such bash scripts under ~/Scripts ( ~ in the terminal is an alias to the home directory). Don\u2019t forget to give the file execution permissions: chmod +x ~/Scripts/sync-passwords.sh Alternatively, you can simply run: cd; mkdir -p Scripts; wget https://gist.githubusercontent.com/ZviBaratz/a4a51544c3d876543d37abfd0c6ee2a3/raw/1b739673cfe168a7c0797bc04e1ab90269c82281/sync-passwords.sh -P Scripts; chmod +x Scripts/sync-passwords.sh This will change directory to the user home\u2019s directory, create the \u2018Scripts\u2019 directory if it doesn\u2019t exist under it, download the GitHub gist, and change its permissions to make it executable. However, don\u2019t forget you still have to change the variables at the beginning of the script to match the name and location of your database file and the name of the cloud storage provider. Make sure it\u2019s working by running it: ~/Scripts/sync-passwords.sh Assuming you don\u2019t yet have a remote copy of the database file, you should see something like: In following runs the output will look like: Finally, you may want to create a cron job to automate the execution of this script, so that you don\u2019t have to remember running it every time you make a small change. To create a job that runs the synchronization script every 20 minutes, you can run: (crontab -l; echo \"*/20 * * * * $HOME/Scripts/sync-passwords.sh\") | crontab - If you would like to create a different synchronization schedule you can use crontab.guru or learn more about cron scheduling . If you already created this job and would like to edit it you can do so using crontab -e . Key File Don\u2019t forget about the key file! Connect your mobile phone to your desktop with a USB cable and copy the key file to your local storage. Open Keepass2Android and under \u201cselect master key type:\u201d choose \u201cPassword + Key File\u201d . Browse to select your key file from the phone\u2019s local storage. Once you\u2019ve unlocked your database successfully, click on the options button (should appear as three vertical dots in the top right corner) \u2192 Settings \u2192 Database, and select \u201cImport database to internal folder\u201d. Having completed that, delete the original version of the key file on the device so that it is not accessible to any other application. Source","title":"Setting up KeePassXC with synchronization"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#setting-up-keepassxc-on-linux-with-cloud-synchronization","text":"Stay open-source, trust no one.","title":"Setting up KeePassXC on Linux (with Cloud Synchronization)"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#master-password","text":"The most important thing about using a password manager is to choose a ( really, really ) strong master password. If you\u2019re not genuinely impressed with yourself when you type it in, it\u2019s not strong enough. The point of switching to a password manager is to have all of your most sensitive credentials in one impregnable place; your bank account, credit cards, mail, social media \u2014 whether it\u2019s your assets or your reputation, the dearest information you have is most probably accessible through the internet, ergo your passwords for this information should be as un-hackable as possible. xkcd knows. In my opinion the best approach in this case, and in many other cases, is to combine: choose four random words that are easy for you to remember, but combine uppercase, lowercase, and special characters as well. E.g. \u201ccorrect horse battery staple\u201d isn\u2019t much harder to remember than \u201cC0rrEct(hOrse)b@TTery+$7ap13|\u201d once you\u2019ve practiced typing it a couple of times, but the increase in entropy is substantial. It will take you longer to type, but I\u2019d argue the extra minute a day (at most!) is a fair price for securing all of your passwords. Let your muscle memory do the heavy lifting and you\u2019ll be surprised at how easily it comes to you after a few times. Just to be on the safe side, copy your master password to a physical note and put it in a completely secure place that no one with access to your computer could ever possibly know of.","title":"Master Password"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#key-file","text":"Go to Database \u2192 Database settings\u2026 \u2192 Security . Under the Password section at the top you should see a Key File section. Database \u2192 Database settings\u2026 \u2192 Security This allows setting or creating a binary file that is used together with or instead of a master password. It is recommended to let the application generate a key file for you, and to copy it to three USB sticks. One you will carry with you, the other two you will keep as backup (in separate locations from the physical backup for your master password!). Having a key file means that even if someone somehow gains access to your password, you have a second form of authentication that prevents them from being able to use it. Again, you pay with convenience, but profit immensely in security. Simply get in the habit of throwing that USB stick in your pocket or backpack when you leave the house to any place where you might need access to your passwords. This should really be limited to perhaps one or two computers you work on. We\u2019ll talk about your mobile phone in a second.","title":"Key File"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#decryption-time","text":"In the same Database settings\u2026 \u2192 Security menu, note the second tab titled Encryption Settings . The first field in this tab is labeled Decryption Time and should have a Change button opposite of it. Press the button and validate your decryption time setting is set to at least 1 second. Feel free to give it a couple of extra deciseconds (hundreds of milliseconds) while you\u2019re at it. The difference will be effectively indistinguishable, but the result will be a significant increase in the number of iterations used when encrypting your data, making it much harder to decrypt. These are the basics. You can also set a default username for new entries ( Database \u2192 Database settings\u2026 \u2192 General ), which I like to have as my e-mail address, change the time interval for clearing the clipboard after copying passwords ( Tools \u2192 Settings \u2192 Security ), decide to show a system tray icon ( Tools \u2192 Settings \u2192 General ), and much, much more. Explore and make it your own! First, you probably want to have your passwords available on your mobile phone. I use Keepass2Android and am very satisfied. Keepass2Android allows you to set the location of the database file from various cloud services (including Google Drive, Dropbox, OneDrive, ownCloud, NextCloud, and more). However, KeePassXC does not. As stated in the KeePassXC website : _Why is there no cloud synchronization feature built into KeePassXC? _Cloud synchronization with Dropbox, Google Drive, OneDrive, ownCloud, Nextcloud etc. can be easily accomplished by simply storing your KeePassXC database inside your shared cloud folder and letting your desktop synchronization client do the rest. We prefer this approach, because it is simple, not tied to a specific cloud provider and keeps the complexity of our code low. Now it really depends on what cloud service you are using. Dropbox provides a Linux client, and so do ownCloud and NextCloud , but Google Drive and OneDrive don\u2019t offer a particularly straightforward solution for Linux users. Also, you may not want or be able to install your cloud provider\u2019s client in all the computers you need to have access to your passwords from. EDIT : if you\u2019re using GNOME there actually is a simple method to mount both Google Drive and OneDrive, more information here . Thanks to KeePassXC on twitter, for pointing this out. This could pose a potential problem, but fret not \u2014 Rclone has got you covered.","title":"Decryption Time"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#rclone","text":"According to Rclone\u2019s GitHub project \u2019s README: Rclone (\u201crsync for cloud storage\u201d) is a command line program to sync files and directories to and from different cloud storage providers. If you\u2019ve clicked on either of two previous links and reviewed the incredible list of supported cloud storage providers , you could almost certainly spot whichever cloud service you might be using as well as just about any other one you\u2019ve ever heard of (and a dozen you haven\u2019t). Most importantly, the list includes any one of the services supported by Keepass2Android. Installation is as simple as running: curl https://rclone.org/install.sh | sudo bash . To verify everything went smoothly you can execute rclone --version (or -V ) and see that you get the expected output. Use the instructions on Rclone\u2019s homepage to set up a connection to your preferred cloud storage provider by following the link next to its name. This process is usually quite effortless and mostly entails running rclone config , selecting whichever provider you\u2019re using, choosing a name for the created remote location, and accepting some defaults. To validate your configuration, execute: rclone lsd _name_: , where name represents the name you chose for the remote (cloud) location. This will list all top-level directories within that location. Generally speaking, remote paths in Rclone are specified as _name_:remote/path (which is why _name_: points to the root directory).","title":"Rclone"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#automation","text":"Now that you have established a connection with your cloud storage provider, you need a script to automate the task of checking for updates and importing (if the remote version is newer) or exporting (if the local version is newer). I am not much of a bash scriptwriter, but I\u2019ve come up with something relatively simple that seems to work: Bash script to automate database file synchronization All you have to do is download the file (you can also click the \u201cview raw\u201d button and copy directly to a file on your computer) and change the values of the four variables under the \u201cConfiguration\u201d title ( DRIVE_NAME , DB_FILE_NAME , LOCAL_LOCATION , and REMOTE_LOCATION ) according to your setup. I like to keep such bash scripts under ~/Scripts ( ~ in the terminal is an alias to the home directory). Don\u2019t forget to give the file execution permissions: chmod +x ~/Scripts/sync-passwords.sh Alternatively, you can simply run: cd; mkdir -p Scripts; wget https://gist.githubusercontent.com/ZviBaratz/a4a51544c3d876543d37abfd0c6ee2a3/raw/1b739673cfe168a7c0797bc04e1ab90269c82281/sync-passwords.sh -P Scripts; chmod +x Scripts/sync-passwords.sh This will change directory to the user home\u2019s directory, create the \u2018Scripts\u2019 directory if it doesn\u2019t exist under it, download the GitHub gist, and change its permissions to make it executable. However, don\u2019t forget you still have to change the variables at the beginning of the script to match the name and location of your database file and the name of the cloud storage provider. Make sure it\u2019s working by running it: ~/Scripts/sync-passwords.sh Assuming you don\u2019t yet have a remote copy of the database file, you should see something like: In following runs the output will look like: Finally, you may want to create a cron job to automate the execution of this script, so that you don\u2019t have to remember running it every time you make a small change. To create a job that runs the synchronization script every 20 minutes, you can run: (crontab -l; echo \"*/20 * * * * $HOME/Scripts/sync-passwords.sh\") | crontab - If you would like to create a different synchronization schedule you can use crontab.guru or learn more about cron scheduling . If you already created this job and would like to edit it you can do so using crontab -e .","title":"Automation"},{"location":"linux/Setting%20up%20KeePassXC%20with%20synchronization/#key-file_1","text":"Don\u2019t forget about the key file! Connect your mobile phone to your desktop with a USB cable and copy the key file to your local storage. Open Keepass2Android and under \u201cselect master key type:\u201d choose \u201cPassword + Key File\u201d . Browse to select your key file from the phone\u2019s local storage. Once you\u2019ve unlocked your database successfully, click on the options button (should appear as three vertical dots in the top right corner) \u2192 Settings \u2192 Database, and select \u201cImport database to internal folder\u201d. Having completed that, delete the original version of the key file on the device so that it is not accessible to any other application. Source","title":"Key File"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/","text":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430 \u0415\u0441\u043b\u0438 \u0412\u044b \u0443\u0441\u0442\u0430\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u0422\u0430\u043a \u0443\u0436 \u043f\u043e\u0432\u0435\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Ubuntu \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0437\u044b\u0432\u0430\u044f \u0435\u0433\u043e \"\u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\". \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b (\u043a\u0440\u043e\u043c\u0435 \u0444\u043b\u044d\u0448\u0435\u043a \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432) \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0430\u0441 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0441\u043a\u043b\u0430\u0434 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u0442\u043e\u0440\u043e\u043c\u0443 (\u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u043c\u0443...) \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u041e\u0421. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0439 UUID ( Universally Unique Identifier ), \u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0433\u043e. \u0428\u0430\u0433 1. \u0423\u0437\u043d\u0430\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 sudo blkid \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u043e\u0435: /dev/sda1: UUID=\"b2098d42-3e3d-470c-8ddb-76f74f0f6d44\" TYPE=\"ext4\" /dev/sda3: LABEL=\"ntfs\" UUID=\"6798491F3EB8CFC8\" TYPE=\"ntfs\" /dev/sda5: LABEL=\"FAT32\" UUID=\"1D7D-F985\" TYPE=\"vfat\" /dev/sda6: LABEL=\"ext3\" UUID=\"a4f6af01-786f-4bdf-9405-d340fded6580\" TYPE=\"ext3\" /dev/sda7: LABEL=\"ext2\" UUID=\"4b2c5e07-97db-4a65-9147-e6b0dceb1353\" TYPE=\"ext2\" /dev/sda8: LABEL=\"ext4\" UUID=\"b74143c3-6679-4a3a-9a20-b608ba085170\" TYPE=\"ext4\" \u0415\u0441\u043b\u0438 \u0412\u0430\u0448\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0437\u0430\u0434\u0430\u043d Label, \u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u043f\u043e\u0438\u0441\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043d\u0435 \u0437\u0430\u0439\u043c\u0443\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b \"ntfs\" \u0441 UUID \"6798491F3EB8CFC8\". \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f UUID \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0431\u0435\u0437 Label \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 gParted \u0438\u043b\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u0438\u0441\u043a\u043e\u0432, \u0437\u0434\u0435\u0441\u044c \u0412\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f /dev/sdaX. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0412\u0430\u043c \u043b\u0435\u043d\u044c \u0438\u0441\u043a\u0430\u0442\u044c UUID, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c: /dev/sda3. \u041c\u0438\u043d\u0443\u0441 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 - \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u043a\u043e\u0432. \u0428\u0430\u0433 2. \u041e\u043f\u043e\u0432\u0435\u0449\u0430\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0412\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 fstab: sudo gedit /etc/fstab \u0415\u0441\u043b\u0438 \u0443 \u0412\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d gedit, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f nano \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c. \u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0443: UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 /media - \u0442\u0430\u043a \u043e\u043d\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nemo) \u043a\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u043f\u0430\u043f\u043a\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 /media/*username*. \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f NTFS. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u043f\u0430\u043a\u0435\u0442 ntfs-3g \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 \u0412\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u041e\u043d \u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u043f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e ntfs, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: NTFS ntfs-3g ntfs-3g defaults,uid=1000 0 0 FAT16, FAT32 vfat user,auto,fmask=0111,dmask=0000 Apple HFS hfsplus user,auto,file_umask=0177,dir_umask=0077,uid=1000 ext2 ext2 defaults ext3 ext3 ext4 ext4 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 UUID \u0438 \u043f\u0443\u0442\u044c \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0428\u0430\u0433 3. \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0434\u0435\u043b\u043e \u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u043a\u0438: sudo mount -a \u0428\u0430\u0433 4. \u0413\u0443\u043b\u044f\u0435\u043c \u0441\u043c\u0435\u043b\u043e \u0412\u043e\u0442 \u0438 \u0432\u0441\u0451. \u041e\u0442\u043d\u044b\u043d\u0435 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043d\u0438\u043c\u0438. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2. Gnome Disk Utility \u0412 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \"\u0414\u0438\u0441\u043a\u0438\" (gnome-disks). \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c \u043d\u0430 Elementary OS Freya (\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 Ubuntu 14.04): \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0438\u0441\u043a, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0441 \u0448\u0435\u0441\u0442\u0435\u0440\u0451\u043d\u043a\u0430\u043c\u0438, \u0432 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" (\"Edit Mount Options\"). \u0412 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\" (\"Automatic Mount Options\"), \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435\" (\"Mount at startup\") \u0438 \"\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435\" (\"Show in user interface\"). \u0412 \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\" (\"Identify as\") \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 UUID. \u041f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\"Filesystem Type\"), \u0422\u043e\u0447\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\"Mount Point\") \u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0435\u0449\u0451. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0432 /etc/fstab: UUID=3C1D4F9C296DA92C /mnt/3C1D4F9C296DA92C auto nosuid,nodev,nofail,x-gvfs-show 0 0 \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \"\u0414\u0438\u0441\u043a\u0438\" \u043d\u0435 \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: gnome-disks \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: sudo apt-get install gnome-disk-utility \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443? \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441\u043e \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0432\u044b\u0434\u0430\u044e\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0440\u043e\u0434\u0435 \"\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\", \"\u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\" \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435, \u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 uid=1000. UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e (\u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u043b\u0438\u0431\u043e root, \u043b\u0438\u0431\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0415\u0441\u043b\u0438 \u0412\u0430\u0448 UID \u0438\u043d\u043e\u0439 (\u0447\u0442\u043e \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e), \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0438\u0441\u043a\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432 /etc/passwd \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e. \u0412\u043c\u0435\u0441\u0442\u043e uid \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c gid - \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 1000, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0432 /etc/group. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0415\u0441\u043b\u0438 Windows \u043c\u0435\u0448\u0430\u0435\u0442 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 Source","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_1","text":"\u0415\u0441\u043b\u0438 \u0412\u044b \u0443\u0441\u0442\u0430\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u0422\u0430\u043a \u0443\u0436 \u043f\u043e\u0432\u0435\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Ubuntu \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0437\u044b\u0432\u0430\u044f \u0435\u0433\u043e \"\u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\". \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b (\u043a\u0440\u043e\u043c\u0435 \u0444\u043b\u044d\u0448\u0435\u043a \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432) \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0430\u0441 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0441\u043a\u043b\u0430\u0434 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u0442\u043e\u0440\u043e\u043c\u0443 (\u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u043c\u0443...) \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u041e\u0421. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0439 UUID ( Universally Unique Identifier ), \u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0433\u043e.","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#1","text":"sudo blkid \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u043e\u0435: /dev/sda1: UUID=\"b2098d42-3e3d-470c-8ddb-76f74f0f6d44\" TYPE=\"ext4\" /dev/sda3: LABEL=\"ntfs\" UUID=\"6798491F3EB8CFC8\" TYPE=\"ntfs\" /dev/sda5: LABEL=\"FAT32\" UUID=\"1D7D-F985\" TYPE=\"vfat\" /dev/sda6: LABEL=\"ext3\" UUID=\"a4f6af01-786f-4bdf-9405-d340fded6580\" TYPE=\"ext3\" /dev/sda7: LABEL=\"ext2\" UUID=\"4b2c5e07-97db-4a65-9147-e6b0dceb1353\" TYPE=\"ext2\" /dev/sda8: LABEL=\"ext4\" UUID=\"b74143c3-6679-4a3a-9a20-b608ba085170\" TYPE=\"ext4\" \u0415\u0441\u043b\u0438 \u0412\u0430\u0448\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0437\u0430\u0434\u0430\u043d Label, \u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u043f\u043e\u0438\u0441\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043d\u0435 \u0437\u0430\u0439\u043c\u0443\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b \"ntfs\" \u0441 UUID \"6798491F3EB8CFC8\". \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f UUID \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0431\u0435\u0437 Label \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 gParted \u0438\u043b\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u0438\u0441\u043a\u043e\u0432, \u0437\u0434\u0435\u0441\u044c \u0412\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f /dev/sdaX. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0412\u0430\u043c \u043b\u0435\u043d\u044c \u0438\u0441\u043a\u0430\u0442\u044c UUID, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c: /dev/sda3. \u041c\u0438\u043d\u0443\u0441 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 - \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u043a\u043e\u0432.","title":"\u0428\u0430\u0433 1. \u0423\u0437\u043d\u0430\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#2","text":"\u0412\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 fstab: sudo gedit /etc/fstab \u0415\u0441\u043b\u0438 \u0443 \u0412\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d gedit, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f nano \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c. \u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0443: UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 /media - \u0442\u0430\u043a \u043e\u043d\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nemo) \u043a\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u043f\u0430\u043f\u043a\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 /media/*username*. \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f NTFS. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u043f\u0430\u043a\u0435\u0442 ntfs-3g \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 \u0412\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u041e\u043d \u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u043f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e ntfs, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: NTFS ntfs-3g ntfs-3g defaults,uid=1000 0 0 FAT16, FAT32 vfat user,auto,fmask=0111,dmask=0000 Apple HFS hfsplus user,auto,file_umask=0177,dir_umask=0077,uid=1000 ext2 ext2 defaults ext3 ext3 ext4 ext4 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 UUID \u0438 \u043f\u0443\u0442\u044c \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.","title":"\u0428\u0430\u0433 2. \u041e\u043f\u043e\u0432\u0435\u0449\u0430\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#3","text":"\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u043a\u0438: sudo mount -a","title":"\u0428\u0430\u0433 3. \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0434\u0435\u043b\u043e"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#4","text":"\u0412\u043e\u0442 \u0438 \u0432\u0441\u0451. \u041e\u0442\u043d\u044b\u043d\u0435 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043d\u0438\u043c\u0438.","title":"\u0428\u0430\u0433 4. \u0413\u0443\u043b\u044f\u0435\u043c \u0441\u043c\u0435\u043b\u043e"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#2-gnome-disk-utility","text":"\u0412 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \"\u0414\u0438\u0441\u043a\u0438\" (gnome-disks). \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c \u043d\u0430 Elementary OS Freya (\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 Ubuntu 14.04): \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0438\u0441\u043a, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0441 \u0448\u0435\u0441\u0442\u0435\u0440\u0451\u043d\u043a\u0430\u043c\u0438, \u0432 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" (\"Edit Mount Options\"). \u0412 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\" (\"Automatic Mount Options\"), \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435\" (\"Mount at startup\") \u0438 \"\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435\" (\"Show in user interface\"). \u0412 \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\" (\"Identify as\") \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 UUID. \u041f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\"Filesystem Type\"), \u0422\u043e\u0447\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\"Mount Point\") \u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0435\u0449\u0451. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0432 /etc/fstab: UUID=3C1D4F9C296DA92C /mnt/3C1D4F9C296DA92C auto nosuid,nodev,nofail,x-gvfs-show 0 0 \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \"\u0414\u0438\u0441\u043a\u0438\" \u043d\u0435 \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: gnome-disks \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: sudo apt-get install gnome-disk-utility","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2. Gnome Disk Utility"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_2","text":"\u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441\u043e \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0432\u044b\u0434\u0430\u044e\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0440\u043e\u0434\u0435 \"\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\", \"\u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\" \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435, \u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 uid=1000. UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e (\u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u043b\u0438\u0431\u043e root, \u043b\u0438\u0431\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0415\u0441\u043b\u0438 \u0412\u0430\u0448 UID \u0438\u043d\u043e\u0439 (\u0447\u0442\u043e \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e), \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0438\u0441\u043a\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432 /etc/passwd \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e. \u0412\u043c\u0435\u0441\u0442\u043e uid \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c gid - \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 1000, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0432 /etc/group.","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443?"},{"location":"linux/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_3","text":"\u0415\u0441\u043b\u0438 Windows \u043c\u0435\u0448\u0430\u0435\u0442 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 Source","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/","text":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Windows \u0440\u044f\u0434\u043e\u043c \u0441 Linux, \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0434\u0440\u0443\u0433\u0443\u044e. \u041f\u0440\u0438 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 Windows \u0432 Linux \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u0442\u0430\u043a \u043a\u0430\u043a Linux \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 NTFS, \u043d\u043e \u0432\u043e\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext4 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442 \u043c\u0430\u0439\u043a\u0440\u043e\u0441\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. \u0412 \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f ext4 \u0432 Windows. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u044d\u0442\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 Windows \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0451 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows 10 \u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 ext4 \u0434\u043b\u044f windows \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c ext2fsd. 1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 ext2fsd \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u041e\u0421 \u043c\u043e\u0436\u043d\u043e \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b . \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0430\u0436\u0438\u043c\u0430\u043d\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0432 Windows. \u0418\u043d\u0442\u0435\u0440\u0435\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043e\u043a\u043d\u043e: \u0417\u0434\u0435\u0441\u044c: Make Ex2Fsd automatically started when system boots - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c. Enable write support for ext2 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext2 Enable force writing support on Ext3 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0433\u0430\u043b\u043e\u0447\u043a\u0438 \u0438 \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0414\u0430\u043b\u0435\u0435 . 2. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b, \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0449\u0435\u043b\u0447\u043e\u043a: \u0417\u0434\u0435\u0441\u044c \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Automaticly mount via Ext2Mgr - \u0440\u0430\u0437\u0434\u0435\u043b \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0441\u0435\u0439\u0447\u0430\u0441, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Mountpoint for fixed disk - \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421 \u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043f\u043e\u043b\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u0443 \u0434\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u043e\u043b\u0435 Hiding files with prefix \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438, \u043a\u0430\u043a \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Linux \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u043e\u0447\u043a\u0430. \u041a\u043e\u0433\u0434\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 Apply . \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u044b\u0432 \u041c\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0441\u043a: \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 Ext2fsd \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438 Linux \u043a\u0430\u043a \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 NTFS \u0438\u043b\u0438 FAT. \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 Ext4 \u0432 Windows \u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043a\u0440\u044b\u0442\u044c ext4 \u0432 windows 10. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b DiskInternals Linux Reader \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 Linux \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0435\u0451 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 \u044f\u0434\u0440\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 : \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 ext4 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c: \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043f\u043e \u043d\u0435\u0439 \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 Save As, \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432\u0430\u0448 \u0444\u0430\u0439\u043b: \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0430\u043f\u043e\u043a \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0444\u043b\u0430\u0436\u043e\u043a Save directory structure . \u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0432\u0441\u0435 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0443\u0436\u0435 \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435. Source","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Windows \u0440\u044f\u0434\u043e\u043c \u0441 Linux, \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0434\u0440\u0443\u0433\u0443\u044e. \u041f\u0440\u0438 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 Windows \u0432 Linux \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u0442\u0430\u043a \u043a\u0430\u043a Linux \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 NTFS, \u043d\u043e \u0432\u043e\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext4 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442 \u043c\u0430\u0439\u043a\u0440\u043e\u0441\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. \u0412 \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f ext4 \u0432 Windows. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u044d\u0442\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 Windows \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0451 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows-10","text":"\u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 ext4 \u0434\u043b\u044f windows \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c ext2fsd.","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows 10"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#1-ext2fsd","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u041e\u0421 \u043c\u043e\u0436\u043d\u043e \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b . \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0430\u0436\u0438\u043c\u0430\u043d\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0432 Windows. \u0418\u043d\u0442\u0435\u0440\u0435\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043e\u043a\u043d\u043e: \u0417\u0434\u0435\u0441\u044c: Make Ex2Fsd automatically started when system boots - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c. Enable write support for ext2 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext2 Enable force writing support on Ext3 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0433\u0430\u043b\u043e\u0447\u043a\u0438 \u0438 \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0414\u0430\u043b\u0435\u0435 .","title":"1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 ext2fsd"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#2-ext4","text":"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b, \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0449\u0435\u043b\u0447\u043e\u043a: \u0417\u0434\u0435\u0441\u044c \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Automaticly mount via Ext2Mgr - \u0440\u0430\u0437\u0434\u0435\u043b \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0441\u0435\u0439\u0447\u0430\u0441, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Mountpoint for fixed disk - \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421 \u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043f\u043e\u043b\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u0443 \u0434\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u043e\u043b\u0435 Hiding files with prefix \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438, \u043a\u0430\u043a \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Linux \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u043e\u0447\u043a\u0430. \u041a\u043e\u0433\u0434\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 Apply . \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u044b\u0432 \u041c\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0441\u043a: \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 Ext2fsd \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438 Linux \u043a\u0430\u043a \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 NTFS \u0438\u043b\u0438 FAT.","title":"2. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows_1","text":"\u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043a\u0440\u044b\u0442\u044c ext4 \u0432 windows 10. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b DiskInternals Linux Reader \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 Linux \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0435\u0451 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 \u044f\u0434\u0440\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 : \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 ext4 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c: \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043f\u043e \u043d\u0435\u0439 \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 Save As, \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432\u0430\u0448 \u0444\u0430\u0439\u043b: \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0430\u043f\u043e\u043a \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0444\u043b\u0430\u0436\u043e\u043a Save directory structure . \u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0432\u0441\u0435 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0443\u0436\u0435 \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435. Source","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 Ext4 \u0432 Windows"}]}