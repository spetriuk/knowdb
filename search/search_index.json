{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site represents my knowledge base for personal use. For notes that I take from the Internet, I place a link to the source at the bottom of the page. I use Joplin for note keeping, Joplin Web clipper to save web pages from the browser in .md format. For generating this site I use MkDocs , and Github Pages for hosting. The theme I use is Material for MkDocs","title":"Welcome"},{"location":"#welcome","text":"This site represents my knowledge base for personal use. For notes that I take from the Internet, I place a link to the source at the bottom of the page. I use Joplin for note keeping, Joplin Web clipper to save web pages from the browser in .md format. For generating this site I use MkDocs , and Github Pages for hosting. The theme I use is Material for MkDocs","title":"Welcome"},{"location":"algorithms/B-Tree.%201.%20Introduction/","text":"B-Tree. 1. Introduction Introduction: B-Tree is a self-balancing search tree. In most of the other self-balancing search trees (like AVL and Red-Black Trees), it is assumed that everything is in main memory. To understand the use of B-Trees, we must think of the huge amount of data that cannot fit in main memory. When the number of keys is high, the data is read from disk in the form of blocks. Disk access time is very high compared to the main memory access time. The main idea of using B-Trees is to reduce the number of disk accesses. Most of the tree operations (search, insert, delete, max, min, ..etc ) require O(h) disk accesses where h is the height of the tree. B-tree is a fat tree. The height of B-Trees is kept low by putting maximum possible keys in a B-Tree node. Generally, the B-Tree node size is kept equal to the disk block size. Since the height of the B-tree is low so total disk accesses for most of the operations are reduced significantly compared to balanced Binary Search Trees like AVL Tree, Red-Black Tree, ..etc. Time Complexity of B-Tree: Sr. No. Algorithm Time Complexity 1. Search O(log n) 2. Insert O(log n) 3. Delete O(log n) \u201cn\u201d is the total number of elements in the B-tree. Properties of B-Tree: All leaves are at the same level. A B-Tree is defined by the term minimum degree \u2018t\u2019. The value of t depends upon disk block size. Every node except root must contain at least (ceiling)([t-1]/2) keys. The root may contain minimum 1 key. All nodes (including root) may contain at most t \u2013 1 keys. Number of children of a node is equal to the number of keys in it plus 1. All keys of a node are sorted in increasing order. The child between two keys k1 and k2 contains all keys in the range from k1 and k2. B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from downward. Like other balanced Binary Search Trees, time complexity to search, insert and delete is O(log n). Following is an example of B-Tree of minimum order 5. Note that in practical B-Trees, the value of the minimum order is much more than 5. We can see in the above diagram that all the leaf nodes are at the same level and all non-leaf have no empty sub-tree and have keys one less than the number of their children. Interesting Facts: The minimum height of the B-Tree that can exist with n number of nodes and m is the maximum number of children of a node can have is: 2. The maximum height of the B-Tree that can exist with n number of nodes and d is the minimum number of children that a non-root node can have is: and Traversel in B-Tree: Traversal is also similar to Inorder traversal of Binary Tree. We start from the leftmost child, recursively print the leftmost child, then repeat the same process for remaining children and keys. In the end, recursively print the rightmost child. Search Operation in B-Tree: Search is similar to the search in Binary Search Tree. Let the key to be searched be k. We start from the root and recursively traverse down. For every visited non-leaf node, if the node has the key, we simply return the node. Otherwise, we recur down to the appropriate child (The child which is just before the first greater key) of the node. If we reach a leaf node and don\u2019t find k in the leaf node, we return NULL. Logic: Searching a B-Tree is similar to searching a binary tree. The algorithm is similar and goes with recursion. At each level, the search is optimised as if the key value is not present in the range of parent then the key is present in another branch. As these values limit the search they are also known as limiting value or separation value. If we reach a leaf node and don\u2019t find the desired key then it will display NULL. Example: Searching 120 in the given B-Tree. Solution: In this example, we can see that our search was reduced by just limiting the chances where the key containing the value could be present. Similarly if within the above example we\u2019ve to look for 180, then the control will stop at step 2 because the program will find that the key 180 is present within the current node. And similarly, if it\u2019s to seek out 90 then as 90 < 100 so it\u2019ll go to the left subtree automatically and therefore the control flow will go similarly as shown within the above example. // Java program to illustrate the sum of two numbers // A BTree class Btree { public BTreeNode root ; // Pointer to root node public int t ; // Minimum degree // Constructor (Initializes tree as empty) Btree ( int t ) { this . root = null ; this . t = t ; } // function to traverse the tree public void traverse () { if ( this . root != null ) this . root . traverse (); System . out . println (); } // function to search a key in this tree public BTreeNode search ( int k ) { if ( this . root == null ) return null ; else return this . root . search ( k ); } } // A BTree node class BTreeNode { int [] keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode [] C ; // An array of child pointers int n ; // Current number of keys boolean leaf ; // Is true when node is leaf. Otherwise false // Constructor BTreeNode ( int t , boolean leaf ) { this . t = t ; this . leaf = leaf ; this . keys = new int [ 2 * t - 1 ] ; this . C = new BTreeNode [ 2 * t ] ; this . n = 0 ; } // A function to traverse all nodes in a subtree rooted with this node public void traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i = 0 ; for ( i = 0 ; i < this . n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( this . leaf == false ) { C [ i ] . traverse (); } System . out . print ( keys [ i ] + \" \" ); } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] . traverse (); } // A function to search a key in the subtree rooted with this node. BTreeNode search ( int k ) { // returns NULL if k is not present. // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ] ) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If the key is not found here and this is a leaf node if ( leaf == true ) return null ; // Go to the appropriate child return C [ i ] . search ( k ); } } The above code doesn\u2019t contain the driver program. We will be covering the complete program in our next post on B-Tree Insertion . There are two conventions to define a B-Tree, one is to define by minimum degree (followed in Cormen book ), second is define by order. We have followed the minimum degree convention and will be following same in coming posts on B-Tree. The variable names used in the above program are also kept same as Cormen book for better readability. Insertion and Deletion B-Tree Insertion B-Tree Deletion References: Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don\u2019t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course . Source","title":"B Tree. 1. Introduction"},{"location":"algorithms/B-Tree.%202.%20Insert%20Operation/","text":"B-Tree. 2. Insert Operation In the previous post , we introduced B-Tree. We also discussed search() and traverse() functions. In this post, insert() operation is discussed. A new key is always inserted at the leaf node. Let the key to be inserted be k. Like BST, we start from the root and traverse down till we reach a leaf node. Once we reach a leaf node, we insert the key in that leaf node. Unlike BSTs, we have a predefined range on the number of keys that a node can contain. So before inserting a key to the node, we make sure that the node has extra space. How to make sure that a node has space available for a key before the key is inserted? We use an operation called splitChild() that is used to split a child of a node. See the following diagram to understand split. In the following diagram, child y of x is being split into two nodes y and z. Note that the splitChild operation moves a key up and this is the reason B-Trees grow up, unlike BSTs which grow down. As discussed above, to insert a new key, we go down from root to leaf. Before traversing down to a node, we first check if the node is full. If the node is full, we split it to create space. Following is the complete algorithm. Insertion 1) Initialize x as root. 2) While x is not leaf, do following .. a) Find the child of x that is going to be traversed next. Let the child be y. .. b) If y is not full, change x to point to y. .. c) If y is full, split it and change x to point to one of the two parts of y. If k is smaller than mid key in y, then set x as the first part of y. Else second part of y. When we split y, we move a key from y to its parent x. 3) The loop in step 2 stops when x is leaf. x must have space for 1 extra key as we have been splitting all nodes in advance. So simply insert k to x. Note that the algorithm follows the Cormen book. It is actually a proactive insertion algorithm where before going down to a node, we split it if it is full. The advantage of splitting before is, we never traverse a node twice. If we don\u2019t split a node before going down to it and split it only if a new key is inserted (reactive), we may end up traversing all nodes again from leaf to root. This happens in cases when all nodes on the path from the root to leaf are full. So when we come to the leaf node, we split it and move a key up. Moving a key up will cause a split in parent node (because the parent was already full). This cascading effect never happens in this proactive insertion algorithm. There is a disadvantage of this proactive insertion though, we may do unnecessary splits. Let us understand the algorithm with an example tree of minimum degree \u2018t\u2019 as 3 and a sequence of integers 10, 20, 30, 40, 50, 60, 70, 80 and 90 in an initially empty B-Tree. Initially root is NULL. Let us first insert 10. Let us now insert 20, 30, 40 and 50. They all will be inserted in root because the maximum number of keys a node can accommodate is 2*t \u2013 1 which is 5. Let us now insert 60. Since root node is full, it will first split into two, then 60 will be inserted into the appropriate child. Let us now insert 70 and 80. These new keys will be inserted into the appropriate leaf without any split. Let us now insert 90. This insertion will cause a split. The middle key will go up to the parent. Following is C++ implementation of the above proactive algorithm. // C++ program for B-Tree insertion #include <iostream> using namespace std ; // A BTree node class BTreeNode { int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false public : BTreeNode ( int _t , bool _leaf ); // Constructor // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void insertNonFull ( int k ); // A utility function to split the child y of this node. i is index of y in // child array C[]. The Child y must be full when this function is called void splitChild ( int i , BTreeNode * y ); // A function to traverse all nodes in a subtree rooted with this node void traverse (); // A function to search a key in the subtree rooted with this node. BTreeNode * search ( int k ); // returns NULL if k is not present. // Make BTree friend of this so that we can access private members of this // class in BTree functions friend class BTree ; }; // A BTree class BTree { BTreeNode * root ; // Pointer to root node int t ; // Minimum degree public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } // function to traverse the tree void traverse () { if ( root != NULL ) root -> traverse (); } // function to search a key in this tree BTreeNode * search ( int k ) { return ( root == NULL ) ? NULL : root -> search ( k ); } // The main function that inserts a new key in this B-Tree void insert ( int k ); }; // Constructor for BTreeNode class BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t -1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: traverse () { // There are n keys and n+1 children, traverse through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> search ( k ); } // The main function that inserts a new key in this B-Tree void BTree :: insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t -1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> splitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> insertNonFull ( k ); // Change root root = s ; } else // If root is not full, call insertNonFull for root root -> insertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: insertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n -1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t -1 ) { // If the child is full, then split it splitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> insertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: splitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t -1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find the location of // new key and move all greater keys one space ahead for ( int j = n -1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t -1 ]; // Increment count of keys in this node n = n + 1 ; } // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . insert ( 10 ); t . insert ( 20 ); t . insert ( 5 ); t . insert ( 6 ); t . insert ( 12 ); t . insert ( 30 ); t . insert ( 7 ); t . insert ( 17 ); cout << \"Traversal of the constucted tree is \" ; t . traverse (); int k = 6 ; ( t . search ( k ) != NULL ) ? cout << \" \\n Present\" : cout << \" \\n Not Present\" ; k = 15 ; ( t . search ( k ) != NULL ) ? cout << \" \\n Present\" : cout << \" \\n Not Present\" ; return 0 ; } Output: Traversal of the constucted tree is 5 6 7 10 12 17 20 30 Present Not Present References: Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest http://www.cs.utexas.edu/users/djimenez/utsa/cs3343/lecture17.html Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don\u2019t stop learning now. Get hold of all the important DSA concepts with the DSA Self Paced Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course . Source","title":"B Tree. 2. Insert Operation"},{"location":"algorithms/B-Tree.%203.%20Delete%20Operation/","text":"B-Tree. 3. Delete Operation B-Tree is a type of a multi-way search tree. So, if you are not familiar with multi-way search trees in general, it is better to take a look at this video lecture from IIT-Delhi , before proceeding further. Once you get the basics of a multi-way search tree clear, B-Tree operations will be easier to understand. Source of the following explanation and algorithm is Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Deletion process: Deletion from a B-tree is more complicated than insertion, because we can delete a key from any node-not just a leaf\u2014and when we delete a key from an internal node, we will have to rearrange the node\u2019s children. As in insertion, we must make sure the deletion doesn\u2019t violate the B-tree properties . Just as we had to ensure that a node didn\u2019t get too big due to insertion, we must ensure that a node doesn\u2019t get too small during deletion (except that the root is allowed to have fewer than the minimum number t-1 of keys). Just as a simple insertion algorithm might have to back up if a node on the path to where the key was to be inserted was full, a simple approach to deletion might have to back up if a node (other than the root) along the path to where the key is to be deleted has the minimum number of keys. The deletion procedure deletes the key k from the subtree rooted at x. This procedure guarantees that whenever it calls itself recursively on a node x, the number of keys in x is at least the minimum degree t . Note that this condition requires one more key than the minimum required by the usual B-tree conditions, so that sometimes a key may have to be moved into a child node before recursion descends to that child. This strengthened condition allows us to delete a key from the tree in one downward pass without having to \u201cback up\u201d (with one exception, which we\u2019ll explain). You should interpret the following specification for deletion from a B-tree with the understanding that if the root node x ever becomes an internal node having no keys (this situation can occur in cases 2c and 3b then we delete x, and x\u2019s only child x.c1 becomes the new root of the tree, decreasing the height of the tree by one and preserving the property that the root of the tree contains at least one key (unless the tree is empty). We sketch how deletion works with various cases of deleting keys from a B-tree. 1. If the key k is in node x and x is a leaf, delete the key k from x. 2. If the key k is in node x and x is an internal node, do the following. a) If the child y that precedes k in node x has at least t keys, then find the predecessor k0 of k in the sub-tree rooted at y. Recursively delete k0, and replace k by k0 in x. (We can find k0 and delete it in a single downward pass.) b) If y has fewer than t keys, then, symmetrically, examine the child z that follows k in node x. If z has at least t keys, then find the successor k0 of k in the subtree rooted at z. Recursively delete k0, and replace k by k0 in x. (We can find k0 and delete it in a single downward pass.) c) Otherwise, if both y and z have only t-1 keys, merge k and all of z into y, so that x loses both k and the pointer to z, and y now contains 2t-1 keys. Then free z and recursively delete k from y. 3. If the key k is not present in internal node x, determine the root x.c(i) of the appropriate subtree that must contain k, if k is in the tree at all. If x.c(i) has only t-1 keys, execute step 3a or 3b as necessary to guarantee that we descend to a node containing at least t keys. Then finish by recursing on the appropriate child of x. a) If x.c(i) has only t-1 keys but has an immediate sibling with at least t keys, give x.c(i) an extra key by moving a key from x down into x.c(i), moving a key from x.c(i) \u2019s immediate left or right sibling up into x, and moving the appropriate child pointer from the sibling into x.c(i). b) If x.c(i) and both of x.c(i)\u2019s immediate siblings have t-1 keys, merge x.c(i) with one sibling, which involves moving a key from x down into the new merged node to become the median key for that node. Since most of the keys in a B-tree are in the leaves, deletion operations are most often used to delete keys from leaves. The recursive delete procedure then acts in one downward pass through the tree, without having to back up. When deleting a key in an internal node, however, the procedure makes a downward pass through the tree but may have to return to the node from which the key was deleted to replace the key with its predecessor or successor (cases 2a and 2b). The following figures explain the deletion process. Implementation: Following is C++ implementation of deletion process. /* The following program performs deletion on a B-Tree. It contains functions specific for deletion along with all the other functions provided in the previous articles on B-Trees. See https://www.geeksforgeeks.org/b-tree-set-1-introduction-2/ for previous article. The deletion function has been compartmentalized into 8 functions for ease of understanding and clarity The following functions are exclusive for deletion In class BTreeNode: 1) remove 2) removeFromLeaf 3) removeFromNonLeaf 4) getPred 5) getSucc 6) borrowFromPrev 7) borrowFromNext 8) merge 9) findKey In class BTree: 1) remove The removal of a key from a B-Tree is a fairly complicated process. The program handles all the 6 different cases that might arise while removing a key. Testing: The code has been tested using the B-Tree provided in the CLRS book( included in the main function ) along with other cases. Reference: CLRS3 - Chapter 18 - (499-502) It is advised to read the material in CLRS before taking a look at the code. */ #include <iostream> using namespace std ; // A BTree node class BTreeNode { int * keys ; // An array of keys int t ; // Minimum degree (defines the range for number of keys) BTreeNode ** C ; // An array of child pointers int n ; // Current number of keys bool leaf ; // Is true when node is leaf. Otherwise false public : BTreeNode ( int _t , bool _leaf ); // Constructor // A function to traverse all nodes in a subtree rooted with this node void traverse (); // A function to search a key in subtree rooted with this node. BTreeNode * search ( int k ); // returns NULL if k is not present. // A function that returns the index of the first key that is greater // or equal to k int findKey ( int k ); // A utility function to insert a new key in the subtree rooted with // this node. The assumption is, the node must be non-full when this // function is called void insertNonFull ( int k ); // A utility function to split the child y of this node. i is index // of y in child array C[]. The Child y must be full when this // function is called void splitChild ( int i , BTreeNode * y ); // A wrapper function to remove the key k in subtree rooted with // this node. void remove ( int k ); // A function to remove the key present in idx-th position in // this node which is a leaf void removeFromLeaf ( int idx ); // A function to remove the key present in idx-th position in // this node which is a non-leaf node void removeFromNonLeaf ( int idx ); // A function to get the predecessor of the key- where the key // is present in the idx-th position in the node int getPred ( int idx ); // A function to get the successor of the key- where the key // is present in the idx-th position in the node int getSucc ( int idx ); // A function to fill up the child node present in the idx-th // position in the C[] array if that child has less than t-1 keys void fill ( int idx ); // A function to borrow a key from the C[idx-1]-th node and place // it in C[idx]th node void borrowFromPrev ( int idx ); // A function to borrow a key from the C[idx+1]-th node and place it // in C[idx]th node void borrowFromNext ( int idx ); // A function to merge idx-th child of the node with (idx+1)th child of // the node void merge ( int idx ); // Make BTree friend of this so that we can access private members of // this class in BTree functions friend class BTree ; }; class BTree { BTreeNode * root ; // Pointer to root node int t ; // Minimum degree public : // Constructor (Initializes tree as empty) BTree ( int _t ) { root = NULL ; t = _t ; } void traverse () { if ( root != NULL ) root -> traverse (); } // function to search a key in this tree BTreeNode * search ( int k ) { return ( root == NULL ) ? NULL : root -> search ( k ); } // The main function that inserts a new key in this B-Tree void insert ( int k ); // The main function that removes a new key in thie B-Tree void remove ( int k ); }; BTreeNode :: BTreeNode ( int t1 , bool leaf1 ) { // Copy the given minimum degree and leaf property t = t1 ; leaf = leaf1 ; // Allocate memory for maximum number of possible keys // and child pointers keys = new int [ 2 * t -1 ]; C = new BTreeNode * [ 2 * t ]; // Initialize the number of keys as 0 n = 0 ; } // A utility function that returns the index of the first key that is // greater than or equal to k int BTreeNode :: findKey ( int k ) { int idx = 0 ; while ( idx < n && keys [ idx ] < k ) ++ idx ; return idx ; } // A function to remove the key k from the sub-tree rooted with this node void BTreeNode :: remove ( int k ) { int idx = findKey ( k ); // The key to be removed is present in this node if ( idx < n && keys [ idx ] == k ) { // If the node is a leaf node - removeFromLeaf is called // Otherwise, removeFromNonLeaf function is called if ( leaf ) removeFromLeaf ( idx ); else removeFromNonLeaf ( idx ); } else { // If this node is a leaf node, then the key is not present in tree if ( leaf ) { cout << \"The key \" << k << \" is does not exist in the tree \\n \" ; return ; } // The key to be removed is present in the sub-tree rooted with this node // The flag indicates whether the key is present in the sub-tree rooted // with the last child of this node bool flag = ( ( idx == n ) ? true : false ); // If the child where the key is supposed to exist has less that t keys, // we fill that child if ( C [ idx ] -> n < t ) fill ( idx ); // If the last child has been merged, it must have merged with the previous // child and so we recurse on the (idx-1)th child. Else, we recurse on the // (idx)th child which now has atleast t keys if ( flag && idx > n ) C [ idx -1 ] -> remove ( k ); else C [ idx ] -> remove ( k ); } return ; } // A function to remove the idx-th key from this node - which is a leaf node void BTreeNode :: removeFromLeaf ( int idx ) { // Move all the keys after the idx-th pos one place backward for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i -1 ] = keys [ i ]; // Reduce the count of keys n -- ; return ; } // A function to remove the idx-th key from this node - which is a non-leaf node void BTreeNode :: removeFromNonLeaf ( int idx ) { int k = keys [ idx ]; // If the child that precedes k (C[idx]) has atleast t keys, // find the predecessor 'pred' of k in the subtree rooted at // C[idx]. Replace k by pred. Recursively delete pred // in C[idx] if ( C [ idx ] -> n >= t ) { int pred = getPred ( idx ); keys [ idx ] = pred ; C [ idx ] -> remove ( pred ); } // If the child C[idx] has less that t keys, examine C[idx+1]. // If C[idx+1] has atleast t keys, find the successor 'succ' of k in // the subtree rooted at C[idx+1] // Replace k by succ // Recursively delete succ in C[idx+1] else if ( C [ idx + 1 ] -> n >= t ) { int succ = getSucc ( idx ); keys [ idx ] = succ ; C [ idx + 1 ] -> remove ( succ ); } // If both C[idx] and C[idx+1] has less that t keys,merge k and all of C[idx+1] // into C[idx] // Now C[idx] contains 2t-1 keys // Free C[idx+1] and recursively delete k from C[idx] else { merge ( idx ); C [ idx ] -> remove ( k ); } return ; } // A function to get predecessor of keys[idx] int BTreeNode :: getPred ( int idx ) { // Keep moving to the right most node until we reach a leaf BTreeNode * cur = C [ idx ]; while ( ! cur -> leaf ) cur = cur -> C [ cur -> n ]; // Return the last key of the leaf return cur -> keys [ cur -> n -1 ]; } int BTreeNode :: getSucc ( int idx ) { // Keep moving the left most node starting from C[idx+1] until we reach a leaf BTreeNode * cur = C [ idx + 1 ]; while ( ! cur -> leaf ) cur = cur -> C [ 0 ]; // Return the first key of the leaf return cur -> keys [ 0 ]; } // A function to fill child C[idx] which has less than t-1 keys void BTreeNode :: fill ( int idx ) { // If the previous child(C[idx-1]) has more than t-1 keys, borrow a key // from that child if ( idx != 0 && C [ idx -1 ] -> n >= t ) borrowFromPrev ( idx ); // If the next child(C[idx+1]) has more than t-1 keys, borrow a key // from that child else if ( idx != n && C [ idx + 1 ] -> n >= t ) borrowFromNext ( idx ); // Merge C[idx] with its sibling // If C[idx] is the last child, merge it with with its previous sibling // Otherwise merge it with its next sibling else { if ( idx != n ) merge ( idx ); else merge ( idx -1 ); } return ; } // A function to borrow a key from C[idx-1] and insert it // into C[idx] void BTreeNode :: borrowFromPrev ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx -1 ]; // The last key from C[idx-1] goes up to the parent and key[idx-1] // from parent is inserted as the first key in C[idx]. Thus, the loses // sibling one key and child gains one key // Moving all key in C[idx] one step ahead for ( int i = child -> n -1 ; i >= 0 ; -- i ) child -> keys [ i + 1 ] = child -> keys [ i ]; // If C[idx] is not a leaf, move all its child pointers one step ahead if ( ! child -> leaf ) { for ( int i = child -> n ; i >= 0 ; -- i ) child -> C [ i + 1 ] = child -> C [ i ]; } // Setting child's first key equal to keys[idx-1] from the current node child -> keys [ 0 ] = keys [ idx -1 ]; // Moving sibling's last child as C[idx]'s first child if ( ! child -> leaf ) child -> C [ 0 ] = sibling -> C [ sibling -> n ]; // Moving the key from the sibling to the parent // This reduces the number of keys in the sibling keys [ idx -1 ] = sibling -> keys [ sibling -> n -1 ]; child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to borrow a key from the C[idx+1] and place // it in C[idx] void BTreeNode :: borrowFromNext ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // keys[idx] is inserted as the last key in C[idx] child -> keys [( child -> n )] = keys [ idx ]; // Sibling's first child is inserted as the last child // into C[idx] if ( ! ( child -> leaf )) child -> C [( child -> n ) + 1 ] = sibling -> C [ 0 ]; //The first key from sibling is inserted into keys[idx] keys [ idx ] = sibling -> keys [ 0 ]; // Moving all keys in sibling one step behind for ( int i = 1 ; i < sibling -> n ; ++ i ) sibling -> keys [ i -1 ] = sibling -> keys [ i ]; // Moving the child pointers one step behind if ( ! sibling -> leaf ) { for ( int i = 1 ; i <= sibling -> n ; ++ i ) sibling -> C [ i -1 ] = sibling -> C [ i ]; } // Increasing and decreasing the key count of C[idx] and C[idx+1] // respectively child -> n += 1 ; sibling -> n -= 1 ; return ; } // A function to merge C[idx] with C[idx+1] // C[idx+1] is freed after merging void BTreeNode :: merge ( int idx ) { BTreeNode * child = C [ idx ]; BTreeNode * sibling = C [ idx + 1 ]; // Pulling a key from the current node and inserting it into (t-1)th // position of C[idx] child -> keys [ t -1 ] = keys [ idx ]; // Copying the keys from C[idx+1] to C[idx] at the end for ( int i = 0 ; i < sibling -> n ; ++ i ) child -> keys [ i + t ] = sibling -> keys [ i ]; // Copying the child pointers from C[idx+1] to C[idx] if ( ! child -> leaf ) { for ( int i = 0 ; i <= sibling -> n ; ++ i ) child -> C [ i + t ] = sibling -> C [ i ]; } // Moving all keys after idx in the current node one step before - // to fill the gap created by moving keys[idx] to C[idx] for ( int i = idx + 1 ; i < n ; ++ i ) keys [ i -1 ] = keys [ i ]; // Moving the child pointers after (idx+1) in the current node one // step before for ( int i = idx + 2 ; i <= n ; ++ i ) C [ i -1 ] = C [ i ]; // Updating the key count of child and the current node child -> n += sibling -> n + 1 ; n -- ; // Freeing the memory occupied by sibling delete ( sibling ); return ; } // The main function that inserts a new key in this B-Tree void BTree :: insert ( int k ) { // If tree is empty if ( root == NULL ) { // Allocate memory for root root = new BTreeNode ( t , true ); root -> keys [ 0 ] = k ; // Insert key root -> n = 1 ; // Update number of keys in root } else // If tree is not empty { // If root is full, then tree grows in height if ( root -> n == 2 * t -1 ) { // Allocate memory for new root BTreeNode * s = new BTreeNode ( t , false ); // Make old root as child of new root s -> C [ 0 ] = root ; // Split the old root and move 1 key to the new root s -> splitChild ( 0 , root ); // New root has two children now. Decide which of the // two children is going to have new key int i = 0 ; if ( s -> keys [ 0 ] < k ) i ++ ; s -> C [ i ] -> insertNonFull ( k ); // Change root root = s ; } else // If root is not full, call insertNonFull for root root -> insertNonFull ( k ); } } // A utility function to insert a new key in this node // The assumption is, the node must be non-full when this // function is called void BTreeNode :: insertNonFull ( int k ) { // Initialize index as index of rightmost element int i = n -1 ; // If this is a leaf node if ( leaf == true ) { // The following loop does two things // a) Finds the location of new key to be inserted // b) Moves all greater keys to one place ahead while ( i >= 0 && keys [ i ] > k ) { keys [ i + 1 ] = keys [ i ]; i -- ; } // Insert the new key at found location keys [ i + 1 ] = k ; n = n + 1 ; } else // If this node is not leaf { // Find the child which is going to have the new key while ( i >= 0 && keys [ i ] > k ) i -- ; // See if the found child is full if ( C [ i + 1 ] -> n == 2 * t -1 ) { // If the child is full, then split it splitChild ( i + 1 , C [ i + 1 ]); // After split, the middle key of C[i] goes up and // C[i] is splitted into two. See which of the two // is going to have the new key if ( keys [ i + 1 ] < k ) i ++ ; } C [ i + 1 ] -> insertNonFull ( k ); } } // A utility function to split the child y of this node // Note that y must be full when this function is called void BTreeNode :: splitChild ( int i , BTreeNode * y ) { // Create a new node which is going to store (t-1) keys // of y BTreeNode * z = new BTreeNode ( y -> t , y -> leaf ); z -> n = t - 1 ; // Copy the last (t-1) keys of y to z for ( int j = 0 ; j < t -1 ; j ++ ) z -> keys [ j ] = y -> keys [ j + t ]; // Copy the last t children of y to z if ( y -> leaf == false ) { for ( int j = 0 ; j < t ; j ++ ) z -> C [ j ] = y -> C [ j + t ]; } // Reduce the number of keys in y y -> n = t - 1 ; // Since this node is going to have a new child, // create space of new child for ( int j = n ; j >= i + 1 ; j -- ) C [ j + 1 ] = C [ j ]; // Link the new child to this node C [ i + 1 ] = z ; // A key of y will move to this node. Find location of // new key and move all greater keys one space ahead for ( int j = n -1 ; j >= i ; j -- ) keys [ j + 1 ] = keys [ j ]; // Copy the middle key of y to this node keys [ i ] = y -> keys [ t -1 ]; // Increment count of keys in this node n = n + 1 ; } // Function to traverse all nodes in a subtree rooted with this node void BTreeNode :: traverse () { // There are n keys and n+1 children, travers through n keys // and first n children int i ; for ( i = 0 ; i < n ; i ++ ) { // If this is not leaf, then before printing key[i], // traverse the subtree rooted with child C[i]. if ( leaf == false ) C [ i ] -> traverse (); cout << \" \" << keys [ i ]; } // Print the subtree rooted with last child if ( leaf == false ) C [ i ] -> traverse (); } // Function to search key k in subtree rooted with this node BTreeNode * BTreeNode :: search ( int k ) { // Find the first key greater than or equal to k int i = 0 ; while ( i < n && k > keys [ i ]) i ++ ; // If the found key is equal to k, return this node if ( keys [ i ] == k ) return this ; // If key is not found here and this is a leaf node if ( leaf == true ) return NULL ; // Go to the appropriate child return C [ i ] -> search ( k ); } void BTree :: remove ( int k ) { if ( ! root ) { cout << \"The tree is empty \\n \" ; return ; } // Call the remove function for root root -> remove ( k ); // If the root node has 0 keys, make its first child as the new root // if it has a child, otherwise set root as NULL if ( root -> n == 0 ) { BTreeNode * tmp = root ; if ( root -> leaf ) root = NULL ; else root = root -> C [ 0 ]; // Free the old root delete tmp ; } return ; } // Driver program to test above functions int main () { BTree t ( 3 ); // A B-Tree with minium degree 3 t . insert ( 1 ); t . insert ( 3 ); t . insert ( 7 ); t . insert ( 10 ); t . insert ( 11 ); t . insert ( 13 ); t . insert ( 14 ); t . insert ( 15 ); t . insert ( 18 ); t . insert ( 16 ); t . insert ( 19 ); t . insert ( 24 ); t . insert ( 25 ); t . insert ( 26 ); t . insert ( 21 ); t . insert ( 4 ); t . insert ( 5 ); t . insert ( 20 ); t . insert ( 22 ); t . insert ( 2 ); t . insert ( 17 ); t . insert ( 12 ); t . insert ( 6 ); cout << \"Traversal of tree constructed is \\n \" ; t . traverse (); cout << endl ; t . remove ( 6 ); cout << \"Traversal of tree after removing 6 \\n \" ; t . traverse (); cout << endl ; t . remove ( 13 ); cout << \"Traversal of tree after removing 13 \\n \" ; t . traverse (); cout << endl ; t . remove ( 7 ); cout << \"Traversal of tree after removing 7 \\n \" ; t . traverse (); cout << endl ; t . remove ( 4 ); cout << \"Traversal of tree after removing 4 \\n \" ; t . traverse (); cout << endl ; t . remove ( 2 ); cout << \"Traversal of tree after removing 2 \\n \" ; t . traverse (); cout << endl ; t . remove ( 16 ); cout << \"Traversal of tree after removing 16 \\n \" ; t . traverse (); cout << endl ; return 0 ; } Output: Traversal of tree constructed is 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 6 1 2 3 4 5 7 10 11 12 13 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 13 1 2 3 4 5 7 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 7 1 2 3 4 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 4 1 2 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 2 1 3 5 10 11 12 14 15 16 17 18 19 20 21 22 24 25 26 Traversal of tree after removing 16 1 3 5 10 11 12 14 15 17 18 19 20 21 22 24 25 26 Source","title":"B Tree. 3. Delete Operation"},{"location":"docker/Exec%20Docker%20Command/","text":"Exec Docker Command Luckily, there is a command that you can use in order to execute commands on running containers : docker exec. In this tutorial, we are going to focus on the docker exec command . Docker Exec Syntax In order to execute commands on running containers, you have to execute \u201cdocker exec\u201d and specify the container name (or ID) as well as the command to be executed on this container. $ docker exec <options> <container> <command> As an example, let\u2019s say that you want to execute the \u201cls\u201d command on one of your containers. The first thing that you need to do is to identify the container name (if you gave your container one) or the container ID. In order to determine the container name or ID, you can simply execute the \u201cdocker ps\u201d command. $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 49 seconds ago Up 48 seconds Note : the \u201cdocker ps\u201d is also used in order to determine whether a container is running or not. As you can see, the container ID is the first column of the \u2018docker ps\u2019 output. Now, to execute the \u201cls\u201d command on this container , simply append the \u2018ls\u2019 command to the ID of your container. $ docker exec 74f86665f0fd ls bin boot dev etc home Awesome, now that you know how you can use the \u201c docker exec \u201d command, let\u2019s see some custom examples on usage of this command. Docker Exec Bash The most popular usage of the \u201c docker exec \u201d command is to launch a Bash terminal within a container. In order to start a Bash shell in a Docker container, execute the \u201cdocker exec\u201d command with the \u201c-it\u201d option and specify the container ID as well as the path to the bash shell. If the Bash is part of your PATH, you can simply type \u201cbash\u201d and have a Bash terminal in your container. $ docker exec -it <container> /bin/bash # Use this if bash is part of your PATH $ docker exec -it <container> bash When executing this command, you will have an interactive Bash terminal where you can execute all the commands that you want. Awesome, you are now running an interactive Bash terminal within your container. As you can see, we used an option that we did not use before to execute our command : the I and T options. What is the purpose of those options? Docker Exec Interactive Option (IT) If you are familiar with Linux operating systems, you have probably already heard about the concept of file descriptors . Whenever you are executing a command, you are creating three file descriptors : STDIN : also called the standard input that will be used in order to type and submit your commands (for example a keyboard, a terminal etc..); STDOUT : called the standard output, this is where the process outputs will be written (the terminal itself, a file, a database etc..); STDERR : called the standard error, it is very related to the standard output and is used in order to display errors. So how are file descriptors related to the \u201c docker exec \u201c? When running \u201c docker exec \u201d with the \u201c-i\u201d option, you are binding the standard input of your host to the standard input of the process you are running in the container. In order to get the results from your command, you are also binding the standard output and the standard error to the ones from your host machine. As you are binding the standard input from your host to the standard input of your container, you are running the command \u201cinteractively\u201d. If you don\u2019t specify the \u201cIT\u201d option, Bash will still get executed in the container but you won\u2019t be able to submit commands to it. Docker Exec as Root In some cases, you are interested in running commands in your container as the root user. In order to execute a command as root on a container, use the \u201cdocker exec\u201d command and specify the \u201c-u\u201d with a value of 0 for the root user. $ docker exec -u 0 <container> <command> For example, in order to make sure that we execute the command as root, let\u2019s have a command that prints the user currently logged in the container. $ docker exec -u 0 74f86665f0fd whoami root Great, you are now able to run commands as the root user within a container with docker exec. Docker Exec Multiple Commands In order to execute multiple commands using the \u201cdocker exec\u201d command, execute \u201cdocker exec\u201d with the \u201cbash\u201d process and use the \u201c-c\u201d option to read the command as a string. $ docker exec <container> bash -c \"command1 ; command2 ; command3\" Note : simple quotes may not work in your host terminal, you will have to use double quotes to execute multiple commands. For example, let\u2019s say that you want to change the current directory within the container and read a specific log file in your container. To achieve that, you are going to execute two commands : \u201ccd\u201d to change directory and \u201ccat\u201d to read the file content. $ docker exec 74f86665f0fd bash -c \"cd /var/log ; cat dmesg \" (Nothing has been logged yet.) Executing a command in a specific directory In some cases, the purpose of executing multiple commands is to navigate to a directory in order to execute a specific command in this directory. You can use the method we have seen before, but Docker provides a special option for this. In order to execute a command within a specific directory in your container, use \u201cdocker exec\u201d with the \u201c-w\u201d and specify the working directory to execute the command. $ docker exec -w /path/to/directory <container> <command> Given the example we have seen before, where we inspected the content of a specific log file, it could be shortened to $ docker exec -w /var/log 74f86665f0fd cat dmesg (Nothing has been logged yet.) Docker Run vs Exec Now that we have seen multiple ways of using the \u201cdocker exec\u201d command, you may wonder what is the difference with the \u201c docker run \u201d command. The difference between \u201cdocker run\u201d and \u201cdocker exec\u201d is that \u201cdocker exec\u201d executes a command on a running container. On the other hand, \u201cdocker run\u201d creates a temporary container, executes the command in it and stops the container when it is done. For example, you can execute a Bash shell using the \u201cdocker run\u201d command but your container will be stopped when exiting the Bash shell. $ docker run -it ubuntu:18.04 bash root@b8d2670657e3:/# exit $ docker ps (No containers.) On the other hand, if a container is started, you can start a Bash shell in it and exit it without the container stopping at the same time. $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 49 seconds ago Up 48 seconds $ docker exec -it 74f86665f0fd bash root@74f86665f0fd:/# exit $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 58 seconds ago Up 58 seconds Awesome, you know the difference between \u201cdocker run\u201d and \u201cdocker exec\u201d now. Set Environment Variables Setting environment variables is crucial for Docker : you may run databases that need specific environment variables to work properly. Famous examples are Redis, MongoDB or MySQL databases. In order to set environment variables, execute \u201cdocker exec\u201d with the \u201c-e\u201d option and specify the environment variable name and value next to it. $ docker exec -e var='value' <container> <command> As an example, let\u2019s have a command that sets the \u201cUID\u201d environment variable just to print it out within the container. To achieve that, we would use the \u201c-e\u201d option in order to set the environment variable. $ docker exec -e UID='myuser' 74f86665f0fd printenv UID 'myuser' Source","title":"Exec Docker Command"},{"location":"docker/Exec%20Docker%20Command/#docker-exec-syntax","text":"In order to execute commands on running containers, you have to execute \u201cdocker exec\u201d and specify the container name (or ID) as well as the command to be executed on this container. $ docker exec <options> <container> <command> As an example, let\u2019s say that you want to execute the \u201cls\u201d command on one of your containers. The first thing that you need to do is to identify the container name (if you gave your container one) or the container ID. In order to determine the container name or ID, you can simply execute the \u201cdocker ps\u201d command. $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 49 seconds ago Up 48 seconds Note : the \u201cdocker ps\u201d is also used in order to determine whether a container is running or not. As you can see, the container ID is the first column of the \u2018docker ps\u2019 output. Now, to execute the \u201cls\u201d command on this container , simply append the \u2018ls\u2019 command to the ID of your container. $ docker exec 74f86665f0fd ls bin boot dev etc home Awesome, now that you know how you can use the \u201c docker exec \u201d command, let\u2019s see some custom examples on usage of this command.","title":"Docker Exec Syntax"},{"location":"docker/Exec%20Docker%20Command/#docker-exec-bash","text":"The most popular usage of the \u201c docker exec \u201d command is to launch a Bash terminal within a container. In order to start a Bash shell in a Docker container, execute the \u201cdocker exec\u201d command with the \u201c-it\u201d option and specify the container ID as well as the path to the bash shell. If the Bash is part of your PATH, you can simply type \u201cbash\u201d and have a Bash terminal in your container. $ docker exec -it <container> /bin/bash # Use this if bash is part of your PATH $ docker exec -it <container> bash When executing this command, you will have an interactive Bash terminal where you can execute all the commands that you want. Awesome, you are now running an interactive Bash terminal within your container. As you can see, we used an option that we did not use before to execute our command : the I and T options. What is the purpose of those options?","title":"Docker Exec Bash"},{"location":"docker/Exec%20Docker%20Command/#docker-exec-interactive-option-it","text":"If you are familiar with Linux operating systems, you have probably already heard about the concept of file descriptors . Whenever you are executing a command, you are creating three file descriptors : STDIN : also called the standard input that will be used in order to type and submit your commands (for example a keyboard, a terminal etc..); STDOUT : called the standard output, this is where the process outputs will be written (the terminal itself, a file, a database etc..); STDERR : called the standard error, it is very related to the standard output and is used in order to display errors. So how are file descriptors related to the \u201c docker exec \u201c? When running \u201c docker exec \u201d with the \u201c-i\u201d option, you are binding the standard input of your host to the standard input of the process you are running in the container. In order to get the results from your command, you are also binding the standard output and the standard error to the ones from your host machine. As you are binding the standard input from your host to the standard input of your container, you are running the command \u201cinteractively\u201d. If you don\u2019t specify the \u201cIT\u201d option, Bash will still get executed in the container but you won\u2019t be able to submit commands to it.","title":"Docker Exec Interactive Option (IT)"},{"location":"docker/Exec%20Docker%20Command/#docker-exec-as-root","text":"In some cases, you are interested in running commands in your container as the root user. In order to execute a command as root on a container, use the \u201cdocker exec\u201d command and specify the \u201c-u\u201d with a value of 0 for the root user. $ docker exec -u 0 <container> <command> For example, in order to make sure that we execute the command as root, let\u2019s have a command that prints the user currently logged in the container. $ docker exec -u 0 74f86665f0fd whoami root Great, you are now able to run commands as the root user within a container with docker exec.","title":"Docker Exec as Root"},{"location":"docker/Exec%20Docker%20Command/#docker-exec-multiple-commands","text":"In order to execute multiple commands using the \u201cdocker exec\u201d command, execute \u201cdocker exec\u201d with the \u201cbash\u201d process and use the \u201c-c\u201d option to read the command as a string. $ docker exec <container> bash -c \"command1 ; command2 ; command3\" Note : simple quotes may not work in your host terminal, you will have to use double quotes to execute multiple commands. For example, let\u2019s say that you want to change the current directory within the container and read a specific log file in your container. To achieve that, you are going to execute two commands : \u201ccd\u201d to change directory and \u201ccat\u201d to read the file content. $ docker exec 74f86665f0fd bash -c \"cd /var/log ; cat dmesg \" (Nothing has been logged yet.)","title":"Docker Exec Multiple Commands"},{"location":"docker/Exec%20Docker%20Command/#executing-a-command-in-a-specific-directory","text":"In some cases, the purpose of executing multiple commands is to navigate to a directory in order to execute a specific command in this directory. You can use the method we have seen before, but Docker provides a special option for this. In order to execute a command within a specific directory in your container, use \u201cdocker exec\u201d with the \u201c-w\u201d and specify the working directory to execute the command. $ docker exec -w /path/to/directory <container> <command> Given the example we have seen before, where we inspected the content of a specific log file, it could be shortened to $ docker exec -w /var/log 74f86665f0fd cat dmesg (Nothing has been logged yet.)","title":"Executing a command in a specific directory"},{"location":"docker/Exec%20Docker%20Command/#docker-run-vs-exec","text":"Now that we have seen multiple ways of using the \u201cdocker exec\u201d command, you may wonder what is the difference with the \u201c docker run \u201d command. The difference between \u201cdocker run\u201d and \u201cdocker exec\u201d is that \u201cdocker exec\u201d executes a command on a running container. On the other hand, \u201cdocker run\u201d creates a temporary container, executes the command in it and stops the container when it is done. For example, you can execute a Bash shell using the \u201cdocker run\u201d command but your container will be stopped when exiting the Bash shell. $ docker run -it ubuntu:18.04 bash root@b8d2670657e3:/# exit $ docker ps (No containers.) On the other hand, if a container is started, you can start a Bash shell in it and exit it without the container stopping at the same time. $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 49 seconds ago Up 48 seconds $ docker exec -it 74f86665f0fd bash root@74f86665f0fd:/# exit $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS 74f86665f0fd ubuntu:18.04 \"/bin/bash\" 58 seconds ago Up 58 seconds Awesome, you know the difference between \u201cdocker run\u201d and \u201cdocker exec\u201d now.","title":"Docker Run vs Exec"},{"location":"docker/Exec%20Docker%20Command/#set-environment-variables","text":"Setting environment variables is crucial for Docker : you may run databases that need specific environment variables to work properly. Famous examples are Redis, MongoDB or MySQL databases. In order to set environment variables, execute \u201cdocker exec\u201d with the \u201c-e\u201d option and specify the environment variable name and value next to it. $ docker exec -e var='value' <container> <command> As an example, let\u2019s have a command that sets the \u201cUID\u201d environment variable just to print it out within the container. To achieve that, we would use the \u201c-e\u201d option in order to set the environment variable. $ docker exec -e UID='myuser' 74f86665f0fd printenv UID 'myuser' Source","title":"Set Environment Variables"},{"location":"docker/Install%20Docker%20Engine%20on%20Ubuntu/","text":"Install Docker Engine on Ubuntu Set up the repository Update the apt package index and install packages: sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Set up the repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Install Docker Engine Update the apt package index, and install Docker Engine: sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io Verify that Docker Engine is installed correctly by running the hello-world image. sudo docker run hello-world Run docker commands without sudo Docker Engine is installed and running. The docker group is created but no users are added to it. You need to use sudo to run Docker commands. If Docker group is not created: Create the docker group if it has not been created: sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated. Verify that you can run docker commands without sudo .","title":"Install Docker Engine on Ubuntu"},{"location":"docker/Install%20Docker%20Engine%20on%20Ubuntu/#set-up-the-repository","text":"Update the apt package index and install packages: sudo apt-get update sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg \\ lsb-release Add Docker\u2019s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg Set up the repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null","title":"Set up the repository"},{"location":"docker/Install%20Docker%20Engine%20on%20Ubuntu/#install-docker-engine","text":"Update the apt package index, and install Docker Engine: sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io Verify that Docker Engine is installed correctly by running the hello-world image. sudo docker run hello-world","title":"Install Docker Engine"},{"location":"docker/Install%20Docker%20Engine%20on%20Ubuntu/#run-docker-commands-without-sudo","text":"Docker Engine is installed and running. The docker group is created but no users are added to it. You need to use sudo to run Docker commands. If Docker group is not created: Create the docker group if it has not been created: sudo groupadd docker Add your user to the docker group. sudo usermod -aG docker $USER Log out and log back in so that your group membership is re-evaluated. Verify that you can run docker commands without sudo .","title":"Run docker commands without sudo"},{"location":"docker/Keycloak%20Docker/","text":"Keycloak Docker Run container docker run -p 8090 :8090 -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -v $( pwd ) :/tmp --name keyc quay.io/keycloak/keycloak:12.0.3 -v $(pwd) stands for folder to save exported realm Export realm docker exec -it keyc /opt/jboss/keycloak/bin/standalone.sh \\ -Djboss.socket.binding.port-offset = 100 -Dkeycloak.migration.action = export \\ -Dkeycloak.migration.provider = singleFile \\ -Dkeycloak.migration.realmName = usersapp \\ -Dkeycloak.migration.usersExportStrategy = REALM_FILE \\ -Dkeycloak.migration.file = /tmp/my_realm.json Start keycloak container with importing realm docker-compose.yml version: '3' services: keycloak: image: quay.io/keycloak/keycloak:12.0.3 volumes: - /tmp:/opt/jboss/keycloak/imports command: -Djboss.socket.binding.port-offset=10 environment: - KEYCLOAK_USER=admin - KEYCLOAK_PASSWORD=admin - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/my_realm.json - DB_VENDOR=h2 ports: - 8090:8090 Run docker-compose up","title":"Keycloak Docker"},{"location":"docker/Keycloak%20Docker/#run-container","text":"docker run -p 8090 :8090 -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -v $( pwd ) :/tmp --name keyc quay.io/keycloak/keycloak:12.0.3 -v $(pwd) stands for folder to save exported realm","title":"Run container"},{"location":"docker/Keycloak%20Docker/#export-realm","text":"docker exec -it keyc /opt/jboss/keycloak/bin/standalone.sh \\ -Djboss.socket.binding.port-offset = 100 -Dkeycloak.migration.action = export \\ -Dkeycloak.migration.provider = singleFile \\ -Dkeycloak.migration.realmName = usersapp \\ -Dkeycloak.migration.usersExportStrategy = REALM_FILE \\ -Dkeycloak.migration.file = /tmp/my_realm.json","title":"Export realm"},{"location":"docker/Keycloak%20Docker/#start-keycloak-container-with-importing-realm","text":"","title":"Start keycloak container with importing realm"},{"location":"docker/Keycloak%20Docker/#docker-composeyml","text":"version: '3' services: keycloak: image: quay.io/keycloak/keycloak:12.0.3 volumes: - /tmp:/opt/jboss/keycloak/imports command: -Djboss.socket.binding.port-offset=10 environment: - KEYCLOAK_USER=admin - KEYCLOAK_PASSWORD=admin - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/my_realm.json - DB_VENDOR=h2 ports: - 8090:8090","title":"docker-compose.yml"},{"location":"docker/Keycloak%20Docker/#run","text":"docker-compose up","title":"Run"},{"location":"docker/Mongodb%20Docker/","text":"Mongodb Docker docker run -p 27018 :27017 --name mongo -d mongo docker exec -it mongo bash","title":"Mongodb Docker"},{"location":"docker/PgAdmin%204%20docker/","text":"PgAdmin 4 docker PgAdmin 4 docker PgAdmin 4 docker container has exposed port 80 and 443 by default. You can check the Dockerfile here So the port mapping parameter in the command has to be updated (-p host_port: container_port) Below is the updated command to access pgadmin4 via http (port 80) docker run -p 5050 :80 -e \"PGADMIN_DEFAULT_EMAIL=myemail@gmail.com\" -e \"PGADMIN_DEFAULT_PASSWORD=a12345678\" -d dpage/pgadmin4 After starting the container you should be able to access it via http://localhost:5050 Adding docker db server We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool.","title":"PgAdmin 4 docker"},{"location":"docker/PgAdmin%204%20docker/#pgadmin-4-docker","text":"PgAdmin 4 docker container has exposed port 80 and 443 by default. You can check the Dockerfile here So the port mapping parameter in the command has to be updated (-p host_port: container_port) Below is the updated command to access pgadmin4 via http (port 80) docker run -p 5050 :80 -e \"PGADMIN_DEFAULT_EMAIL=myemail@gmail.com\" -e \"PGADMIN_DEFAULT_PASSWORD=a12345678\" -d dpage/pgadmin4 After starting the container you should be able to access it via http://localhost:5050","title":"PgAdmin 4 docker"},{"location":"docker/PgAdmin%204%20docker/#adding-docker-db-server","text":"We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool.","title":"Adding docker db server"},{"location":"docker/PostgreSQL%20Docker/","text":"PostgreSQL Docker An easy way to set up your local environment for developing SQL with Docker containers Download an image: docker pull postgres After downloading the image you can check that is available to use: docker images >>> REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 2 weeks ago 314MB We will create a local folder and mount it as a data volume for our running container to store all the database files in a known location for you. In the \u201crun\u201d command, we will map also the ports from the host to the running container and a password for the Postgres default user. 1. Create a folder in a known location for you mkdir ${ HOME } /postgres-data/ 2. run the postgres image docker run -d \\ --name dev-postgres \\ -e POSTGRES_PASSWORD = pass \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p 5432 :5432 \\ postgres 3. check that the container is running docker ps >>> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dfa570d6e843 postgres \"docker-entrypoint.s\u2026\" 27 hours ago Up 3 seconds 0.0.0.0:5432->5432/tcp postgres-test Great, you have a running PostgreSQL instance and you should be able to enter the container from your command line and test the database instance: docker exec -it dev-postgres bash Now you are in the container's bash console. Connect to the database psql -h localhost -U postgres Starting the pgAdmin instance pgAdmin is the most popular and feature-rich Open Source administration and development platform for PostgreSQL. You will use it to manage the DB instance as well as to run your queries against the tables of it. You will be using this docker image to deploy it in a container. Get the image and run the instance of the image with the following commands: docker pull dpage/pgadmin4 docker run \\ -p 80 :80 \\ -e 'PGADMIN\\_DEFAULT\\_EMAIL=user@domain.local' \\ -e 'PGADMIN\\_DEFAULT\\_PASSWORD=SuperSecret' \\ --name dev-pgadmin \\ -d dpage/pgadmin4 The parameters that we are passing to the docker run command are: -p 80:80: This parameter tells docker to map the port 80 in the container to port 80 in your computer (Docker host) -e 'PGADMIN_DEFAULT_EMAIL: Environment variable for default user\u2019s email, you will use this to log in the portal afterwards -e 'PGADMIN_DEFAULT_PASSWORD': Environment variable for default user\u2019s password -d: This parameters tells docker to start the container in detached mode dpage/pgadmin4: This parameter tells docker to use the image that we have previously downloaded Let\u2019s check that the container is up and running, you should also see the previous container running: docker ps Accessing the PostgreSQL from the pgAdmin tool We haven\u2019t defined any network for these containers so they should be running on the default one, and if you try to access the database or the web portal through their ports, connecting via \u2018localhost\u2019 or \u2018127.0.0.1\u2019 would work just fine; but if you try connecting from one container to the other, you might encounter some connectivity issues. We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool. The next step is to go to your web browser and type http://localhost:80 . pgAdmin login portal, http://localhost:80. Source: Local You should type the user email and the password you wrote when running the container. Once you are in the portal, you will need to add a new server by clicking on the \u201cAdd New Server\u201d and adding the right information on the pop-up window, make sure you add the IPAdress that you copied previously in the Host name/address under the Connection tab. Welcome page from pgAdmin tool. Source: Local Once you have created the connection you should see the server on the right side of your screen. At this moment you are ready to start building your databases and tables, uploading data and querying for your analysis or applications. Server dashboard on pgAdmin tool. Source: Local Source","title":"PostgreSQL Docker"},{"location":"docker/PostgreSQL%20Docker/#an-easy-way-to-set-up-your-local-environment-for-developing-sql-with-docker-containers","text":"Download an image: docker pull postgres After downloading the image you can check that is available to use: docker images >>> REPOSITORY TAG IMAGE ID CREATED SIZE postgres latest 9907cacf0c01 2 weeks ago 314MB We will create a local folder and mount it as a data volume for our running container to store all the database files in a known location for you. In the \u201crun\u201d command, we will map also the ports from the host to the running container and a password for the Postgres default user.","title":"An easy way to set up your local environment for developing SQL with Docker containers"},{"location":"docker/PostgreSQL%20Docker/#1-create-a-folder-in-a-known-location-for-you","text":"mkdir ${ HOME } /postgres-data/","title":"1. Create a folder in a known location for you"},{"location":"docker/PostgreSQL%20Docker/#2-run-the-postgres-image","text":"docker run -d \\ --name dev-postgres \\ -e POSTGRES_PASSWORD = pass \\ -v ${ HOME } /postgres-data/:/var/lib/postgresql/data \\ -p 5432 :5432 \\ postgres","title":"2. run the postgres image"},{"location":"docker/PostgreSQL%20Docker/#3-check-that-the-container-is-running","text":"docker ps >>> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dfa570d6e843 postgres \"docker-entrypoint.s\u2026\" 27 hours ago Up 3 seconds 0.0.0.0:5432->5432/tcp postgres-test Great, you have a running PostgreSQL instance and you should be able to enter the container from your command line and test the database instance: docker exec -it dev-postgres bash Now you are in the container's bash console. Connect to the database psql -h localhost -U postgres","title":"3. check that the container is running"},{"location":"docker/PostgreSQL%20Docker/#starting-the-pgadmin-instance","text":"pgAdmin is the most popular and feature-rich Open Source administration and development platform for PostgreSQL. You will use it to manage the DB instance as well as to run your queries against the tables of it. You will be using this docker image to deploy it in a container. Get the image and run the instance of the image with the following commands: docker pull dpage/pgadmin4 docker run \\ -p 80 :80 \\ -e 'PGADMIN\\_DEFAULT\\_EMAIL=user@domain.local' \\ -e 'PGADMIN\\_DEFAULT\\_PASSWORD=SuperSecret' \\ --name dev-pgadmin \\ -d dpage/pgadmin4 The parameters that we are passing to the docker run command are: -p 80:80: This parameter tells docker to map the port 80 in the container to port 80 in your computer (Docker host) -e 'PGADMIN_DEFAULT_EMAIL: Environment variable for default user\u2019s email, you will use this to log in the portal afterwards -e 'PGADMIN_DEFAULT_PASSWORD': Environment variable for default user\u2019s password -d: This parameters tells docker to start the container in detached mode dpage/pgadmin4: This parameter tells docker to use the image that we have previously downloaded Let\u2019s check that the container is up and running, you should also see the previous container running: docker ps","title":"Starting the pgAdmin instance"},{"location":"docker/PostgreSQL%20Docker/#accessing-the-postgresql-from-the-pgadmin-tool","text":"We haven\u2019t defined any network for these containers so they should be running on the default one, and if you try to access the database or the web portal through their ports, connecting via \u2018localhost\u2019 or \u2018127.0.0.1\u2019 would work just fine; but if you try connecting from one container to the other, you might encounter some connectivity issues. We will need to look for the IP address of the PostgreSQL container on our host, you can run this command for it: docker inspect dev-postgres -f \"{{json .NetworkSettings.Networks }}\" docker inspect return low-level information of Docker objects, in this case, the \u2018dev-postgres\u2019 instance\u2019s IP Adress. The -f parameter is to format the output as a JSON given a Go template. The output should look like this: { \"bridge\" : { \"IPAMConfig\" : null , \"Links\" : null , \"Aliases\" : null , \"NetworkID\" : \"60c21f5cfcaaff424a0e4a22463dc8f9a285993de04e7ac19ce5fd96bba56a47\" , \"EndpointID\" : \"be6e45b659c30bd12aa766d7003a2887607053684b68574e426f8823104b18a2\" , \"Gateway\" : \"172.17.0.1\" , \"IPAddress\" : \"172.17.0.2\" , \"IPPrefixLen\" : 16 , \"IPv6Gateway\" : \"\" , \"GlobalIPv6Address\" : \"\" , \"GlobalIPv6PrefixLen\" : 0 , \"MacAddress\" : \"02:42:ac:11:00:02\" , \"DriverOpts\" : null } } Copy the IPAddress value into the clipboard, which is 172.17.0.2 in my case, you will need to define the connection in the pgAdmin tool. The next step is to go to your web browser and type http://localhost:80 . pgAdmin login portal, http://localhost:80. Source: Local You should type the user email and the password you wrote when running the container. Once you are in the portal, you will need to add a new server by clicking on the \u201cAdd New Server\u201d and adding the right information on the pop-up window, make sure you add the IPAdress that you copied previously in the Host name/address under the Connection tab. Welcome page from pgAdmin tool. Source: Local Once you have created the connection you should see the server on the right side of your screen. At this moment you are ready to start building your databases and tables, uploading data and querying for your analysis or applications. Server dashboard on pgAdmin tool. Source: Local Source","title":"Accessing the PostgreSQL from the pgAdmin tool"},{"location":"git/Create%20Empty%20Branch%20in%20Git/","text":"Create Empty Branch in Git Create Empty Branch in Git $ git checkout --orphan NEWBRANCH $ git rm -rf . --orphan creates a new branch, but it starts without any commit. After running the above command you are on a new branch \"NEWBRANCH\", and the first commit you create from this state will start a new history without any ancestry. You can then start adding files and commit them and they will live in their own branch. If you take a look at the log, you will see that it is isolated from the original log.","title":"Create Empty Branch in Git"},{"location":"git/Create%20Empty%20Branch%20in%20Git/#create-empty-branch-in-git","text":"$ git checkout --orphan NEWBRANCH $ git rm -rf . --orphan creates a new branch, but it starts without any commit. After running the above command you are on a new branch \"NEWBRANCH\", and the first commit you create from this state will start a new history without any ancestry. You can then start adding files and commit them and they will live in their own branch. If you take a look at the log, you will see that it is isolated from the original log.","title":"Create Empty Branch in Git"},{"location":"git/Delete%20branch%20local_remote/","text":"Delete branch local/remote Delete branch locally git branch -d localBranchName Delete branch remotely git push origin --delete remoteBranchName","title":"Delete branch local remote"},{"location":"git/Delete%20branch%20local_remote/#delete-branch-locally","text":"git branch -d localBranchName","title":"Delete branch locally"},{"location":"git/Delete%20branch%20local_remote/#delete-branch-remotely","text":"git push origin --delete remoteBranchName","title":"Delete branch remotely"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/","text":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!! \u0401\u0431\u0430\u043d\u044b\u0439 Git!!! Git \u0441\u043b\u043e\u0436\u0435\u043d: \u043b\u0435\u0433\u043a\u043e \u0432\u0441\u0451 \u043f\u0440\u043e\u0435\u0431\u0430\u0442\u044c, \u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Git - \u044d\u0442\u043e \u0444\u0438\u043d\u0438\u0448: \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u0434\u043e \u0437\u043d\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0448\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0441\u0451 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f. \u0411\u043b\u044f, \u044f \u043d\u0430\u043a\u043e\u0441\u044f\u0447\u0438\u043b, \u0433\u0434\u0435 \u0443 git \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438!?! git reflog # \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0433\u043e, # \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0432 git, \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0435\u0442\u043a\u0430\u0445! # \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0435\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 HEAD@{\u0438\u043d\u0434\u0435\u043a\u0441} # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u043e\u0441\u044c git reset HEAD@ { index } # \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435 \u0448\u0442\u0443\u043a\u0438, \u0438\u043b\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u043e \u0447\u0435\u043c \u0412\u044b \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u0438, \u0438\u043b\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u0438\u044f\u043d\u0438\u044f, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0442\u0443\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u042f \u041e\u0427\u0415\u041d\u042c \u0427\u0410\u0421\u0422\u041e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e reflog . \u0421\u043d\u0438\u043c\u0430\u044e \u0448\u043b\u044f\u043f\u0443 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e. \u0411\u043b\u044f, \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0438 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043b, \u0447\u0442\u043e \u043a\u043e\u0435-\u0447\u0442\u043e \u0437\u0430\u0431\u044b\u043b! # \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 git commit --amend --no-edit # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435! # \u041f\u0420\u0415\u0414\u0423\u041f\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b! \u041e\u0431\u044b\u0447\u043d\u043e \u044f \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043c\u0438\u0447\u0443, \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e \u0442\u0435\u0441\u0442\u044b/\u0441\u043a\u0430\u043d\u0435\u0440\u044b... \u0438 \u0431\u043b\u0438\u043d, \u044f \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 \u0440\u0430\u0432\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c rebase -i \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u043e\u0431\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435, \u043d\u043e \u0442\u0430\u043a \u0432 \u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0440\u0430\u0437 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443! \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435, \u0438\u043d\u0430\u0447\u0435 \u0412\u0430\u043c \u043d\u0435 \u043f\u043e\u0437\u0434\u043e\u0440\u043e\u0432\u0438\u0442\u0441\u044f. \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! git commit --amend # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0401\u0431\u0430\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e. \u0411\u043b\u044f, \u042f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0447\u0442\u043e-\u0442\u043e \u0432 \u043c\u0430\u0441\u0442\u0435\u0440, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435! # \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git branch \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0443\u0434\u0430\u043b\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git reset HEAD~ --hard git checkout \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0432\u0430\u0448 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0436\u0438\u0432\u0451\u0442 \u0432 \u044d\u0442\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 :) NB: \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a-\u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c git reset HEAD@{\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-\u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432-\u043d\u0430\u0437\u0430\u0434} \u0432\u043c\u0435\u0441\u0442\u043e HEAD~ . \u0401\u0431\u0443\u0448\u043a\u0438-\u0432\u043e\u0440\u043e\u0431\u0443\u0448\u043a\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u043a\u043e\u0440\u043e\u0447\u0435. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c! \u0411\u043b\u044f, \u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u043d\u0435 \u0432 \u0442\u0443 \u0432\u0435\u0442\u043a\u0443! # \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043d\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 git reset HEAD~ --soft git stash # \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443 git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 git stash pop git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git commit -m \"\u0432\u0430\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0434\u0435\u0441\u044c\" # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u041c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c cherry-pick \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435, \u0442\u043e \u0447\u0442\u043e \u0432\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f! git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git cherry-pick master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git checkout master git reset HEAD~ --hard \u0411\u043b\u044f, \u044f \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c diff, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?! \u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b, \u043d\u043e diff \u043f\u0443\u0441\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f ( add ) \u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043b\u0430\u0433. git diff --staged \u00af\\ (\u30c4) /\u00af (\u0434\u0430, \u044f \u0437\u043d\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0431\u0430\u0433, \u0430 \u0444\u0438\u0447\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0438\u0445\u0443\u044f \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u0430!) \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b 5 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043d\u0430\u0437\u0430\u0434! # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git revert [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] # git \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043e\u0442\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 # \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 # \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u0437\u0430\u0434 \u0438 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439! \u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b\u0438 \u0445\u0440\u0435\u043d\u044c, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0441 revert . \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b \u0432\u043c\u0435\u0441\u0442\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! \u041d\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e, (\u043a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u0443 git`\u0430) \u044d\u0442\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0451\u0440\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434... \u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0435! # \u043d\u0430\u0439\u0442\u0438 \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u0438\u0442\u044c\u0441\u044f git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git checkout [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] -- \u043f\u0443\u0442\u044c/\u043a/\u0444\u0430\u0439\u043b\u0443 # \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 git commit -m \"\u041e\u0433\u043e, \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f!\" \u041a\u043e\u0433\u0434\u0430 \u0434\u043e \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0434\u043e\u0448\u043b\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u041e\u0425\u0423\u0415\u041d\u041d\u041e. \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e, \u0442\u043e \u0441\u0445\u0443\u044f\u043b\u0438 checkout -- \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f? :\u0443\u0433\u0440\u043e\u0436\u0430\u0435\u0442-\u043b\u0438\u043d\u0443\u0441\u0443-\u0442\u043e\u0440\u0432\u0430\u043b\u044c\u0434\u0441\u0443: \u041d\u0430\u0445\u0443\u0439 \u0432\u0441\u0451, \u044f \u0441\u0434\u0430\u044e\u0441\u044c. cd .. sudo rm -r \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git git clone https://some.github.url/\u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git.git cd \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git \u0421\u043f\u0430\u0441\u0438\u0431\u043e Eric V. \u0437\u0430 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. \u0412\u0441\u0435 \u0436\u0430\u043b\u043e\u0431\u044b \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e sudo \u0432 \u044d\u0442\u043e\u0439 \u0448\u0443\u0442\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0440\u0430\u0437\u0443 \u0435\u043c\u0443. \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0432\u0435\u0442\u043a\u0430 \u043d\u0430\u0441\u0442\u043e\u043e\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u0430\u0436\u0435\u043d\u0430, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0432 \"git-\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435\" \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0440\u0430\u0442\u0438\u043c\u043e! # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 origin git fetch origin git checkout master git reset --hard origin/master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git clean -d --force # \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c checkout/reset/clean \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0441\u043f\u043e\u0440\u0447\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438 *\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u042d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0438\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c. \u0414\u0430, \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u044f \u043f\u0440\u0438\u0448\u0451\u043b \u043a \u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a, \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u044e\u0441\u044c \u044d\u0442\u0438\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043e\u0437\u043e\u0439 \u043b\u0435\u0433\u043a\u043e\u043c\u044b\u0441\u043b\u0438\u044f \u0438 \u0440\u0443\u0433\u0430\u043d\u0438. \u041f\u0440\u0438\u043c\u0438\u0442\u0435 \u044d\u0442\u043e \u0438\u043b\u0438 \u0443\u0439\u0434\u0438\u0442\u0435! Source","title":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#git","text":"Git \u0441\u043b\u043e\u0436\u0435\u043d: \u043b\u0435\u0433\u043a\u043e \u0432\u0441\u0451 \u043f\u0440\u043e\u0435\u0431\u0430\u0442\u044c, \u0438 \u043d\u0435\u0440\u0435\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u0430\u043a \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Git - \u044d\u0442\u043e \u0444\u0438\u043d\u0438\u0448: \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u0434\u043e \u0437\u043d\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0438\u0448\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0441\u0451 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e. \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f.","title":"\u0401\u0431\u0430\u043d\u044b\u0439 Git!!!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#git_1","text":"git reflog # \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0433\u043e, # \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0432 git, \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0435\u0442\u043a\u0430\u0445! # \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0435\u0441\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441 HEAD@{\u0438\u043d\u0434\u0435\u043a\u0441} # \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u043e\u0441\u044c git reset HEAD@ { index } # \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u0435 \u0448\u0442\u0443\u043a\u0438, \u0438\u043b\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u043e \u0447\u0435\u043c \u0412\u044b \u0432\u0441\u0451 \u0441\u043b\u043e\u043c\u0430\u043b\u0438, \u0438\u043b\u0438 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0441\u043b\u0438\u044f\u043d\u0438\u044f, \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0442\u0443\u0434\u0430, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e. \u042f \u041e\u0427\u0415\u041d\u042c \u0427\u0410\u0421\u0422\u041e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e reflog . \u0421\u043d\u0438\u043c\u0430\u044e \u0448\u043b\u044f\u043f\u0443 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u043e.","title":"\u0411\u043b\u044f, \u044f \u043d\u0430\u043a\u043e\u0441\u044f\u0447\u0438\u043b, \u0433\u0434\u0435 \u0443 git \u0432\u043e\u043b\u0448\u0435\u0431\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438!?!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#-","text":"# \u0441\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 git commit --amend --no-edit # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u044d\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435! # \u041f\u0420\u0415\u0414\u0423\u041f\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b! \u041e\u0431\u044b\u0447\u043d\u043e \u044f \u044d\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u043a\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043c\u0438\u0447\u0443, \u043f\u043e\u0442\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e \u0442\u0435\u0441\u0442\u044b/\u0441\u043a\u0430\u043d\u0435\u0440\u044b... \u0438 \u0431\u043b\u0438\u043d, \u044f \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 \u0440\u0430\u0432\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c rebase -i \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u043b\u0435\u0438\u0442\u044c \u043e\u0431\u0430 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435, \u043d\u043e \u0442\u0430\u043a \u0432 \u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0440\u0430\u0437 \u0431\u044b\u0441\u0442\u0440\u0435\u0435. \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443! \u0418\u0437\u043c\u0435\u043d\u044f\u0439\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435, \u0438\u043d\u0430\u0447\u0435 \u0412\u0430\u043c \u043d\u0435 \u043f\u043e\u0437\u0434\u043e\u0440\u043e\u0432\u0438\u0442\u0441\u044f.","title":"\u0411\u043b\u044f, \u044f \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0438 \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u043b, \u0447\u0442\u043e \u043a\u043e\u0435-\u0447\u0442\u043e \u0437\u0430\u0431\u044b\u043b!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_1","text":"git commit --amend # \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0401\u0431\u0430\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044e.","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#-_1","text":"# \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git branch \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0443\u0434\u0430\u043b\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git reset HEAD~ --hard git checkout \u043a\u0430\u043a\u043e\u0435-\u0442\u043e-\u0438\u043c\u044f-\u043d\u043e\u0432\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0432\u0430\u0448 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0436\u0438\u0432\u0451\u0442 \u0432 \u044d\u0442\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 :) NB: \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0436\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a-\u0442\u043e \u043f\u043e-\u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u043e\u0447\u044c git reset HEAD@{\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e-\u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432-\u043d\u0430\u0437\u0430\u0434} \u0432\u043c\u0435\u0441\u0442\u043e HEAD~ . \u0401\u0431\u0443\u0448\u043a\u0438-\u0432\u043e\u0440\u043e\u0431\u0443\u0448\u043a\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u043a\u043e\u0440\u043e\u0447\u0435. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0432\u0441\u0435\u043c!","title":"\u0411\u043b\u044f, \u042f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u0447\u0442\u043e-\u0442\u043e \u0432 \u043c\u0430\u0441\u0442\u0435\u0440, \u0445\u043e\u0442\u044f \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0442\u043a\u0435!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_2","text":"# \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043d\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c\u0438 git reset HEAD~ --soft git stash # \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443 git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 git stash pop git add . # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git commit -m \"\u0432\u0430\u0448\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0434\u0435\u0441\u044c\" # \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0443\u0436\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0435 \u041c\u043d\u043e\u0433\u0438\u0435 \u043b\u044e\u0434\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c cherry-pick \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u0442\u0430\u043a \u0447\u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0439\u0442\u0435, \u0442\u043e \u0447\u0442\u043e \u0432\u0430\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f! git checkout \u0438\u043c\u044f-\u043d\u0443\u0436\u043d\u043e\u0439-\u0432\u0435\u0442\u043a\u0438 # \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git cherry-pick master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0438\u0437 \u043c\u0430\u0441\u0442\u0435\u0440\u0430 git checkout master git reset HEAD~ --hard","title":"\u0411\u043b\u044f, \u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b \u043d\u0435 \u0432 \u0442\u0443 \u0432\u0435\u0442\u043a\u0443!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#diff","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438 \u0444\u0430\u0439\u043b\u044b, \u043d\u043e diff \u043f\u0443\u0441\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f ( add ) \u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0444\u043b\u0430\u0433. git diff --staged \u00af\\ (\u30c4) /\u00af (\u0434\u0430, \u044f \u0437\u043d\u0430\u044e, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0431\u0430\u0433, \u0430 \u0444\u0438\u0447\u0430, \u043d\u043e \u044d\u0442\u043e \u043d\u0438\u0445\u0443\u044f \u043d\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0440\u0430\u0437\u0430!)","title":"\u0411\u043b\u044f, \u044f \u043f\u044b\u0442\u0430\u044e\u0441\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u044c diff, \u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442?!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#5","text":"# \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git revert [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] # git \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442, \u043e\u0442\u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 # \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 # \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0412\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430\u0437\u0430\u0434 \u0438 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439! \u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u0438\u043b\u0438 \u0445\u0440\u0435\u043d\u044c, \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u0441 revert . \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b \u0432\u043c\u0435\u0441\u0442\u043e \u0446\u0435\u043b\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430! \u041d\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u043e, (\u043a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430 \u0443 git`\u0430) \u044d\u0442\u043e \u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u043d\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0447\u0451\u0440\u0442\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434...","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b 5 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u043d\u0430\u0437\u0430\u0434!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_3","text":"# \u043d\u0430\u0439\u0442\u0438 \u0445\u0435\u0448 \u043a\u043e\u043c\u043c\u0438\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0442\u0438\u0442\u044c\u0441\u044f git log # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043e\u0447\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044e # \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0445\u0435\u0448 \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 git checkout [ \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d\u043d\u044b\u0439 \u0445\u0435\u0448 ] -- \u043f\u0443\u0442\u044c/\u043a/\u0444\u0430\u0439\u043b\u0443 # \u0441\u0442\u0430\u0440\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0444\u0430\u0439\u043b\u0430 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0432\u0430\u0448\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u0435 git commit -m \"\u041e\u0433\u043e, \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f!\" \u041a\u043e\u0433\u0434\u0430 \u0434\u043e \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0434\u043e\u0448\u043b\u043e, \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u041e\u0425\u0423\u0415\u041d\u041d\u041e. \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u043e, \u0442\u043e \u0441\u0445\u0443\u044f\u043b\u0438 checkout -- \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f? :\u0443\u0433\u0440\u043e\u0436\u0430\u0435\u0442-\u043b\u0438\u043d\u0443\u0441\u0443-\u0442\u043e\u0440\u0432\u0430\u043b\u044c\u0434\u0441\u0443:","title":"\u0411\u043b\u044f, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0435!"},{"location":"git/%D0%81%D0%B1%D0%B0%D0%BD%D1%8B%D0%B9%20Git%21%21%21/#_4","text":"cd .. sudo rm -r \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git git clone https://some.github.url/\u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git.git cd \u0447\u0451\u0440\u0442\u043e\u0432-\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439-git \u0421\u043f\u0430\u0441\u0438\u0431\u043e Eric V. \u0437\u0430 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. \u0412\u0441\u0435 \u0436\u0430\u043b\u043e\u0431\u044b \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e sudo \u0432 \u044d\u0442\u043e\u0439 \u0448\u0443\u0442\u043a\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u0440\u0430\u0437\u0443 \u0435\u043c\u0443. \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0432\u043e\u0440\u044f, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448\u0430 \u0432\u0435\u0442\u043a\u0430 \u043d\u0430\u0441\u0442\u043e\u043e\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u0430\u0436\u0435\u043d\u0430, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0432 \"git-\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435\" \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u043d\u043e \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0440\u0430\u0442\u0438\u043c\u043e! # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 origin git fetch origin git checkout master git reset --hard origin/master # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b git clean -d --force # \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c checkout/reset/clean \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0441\u043f\u043e\u0440\u0447\u0435\u043d\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438 *\u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: \u042d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0447\u0435\u0440\u043f\u044b\u0432\u0430\u044e\u0449\u0438\u043c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u043c. \u0414\u0430, \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u044f \u043f\u0440\u0438\u0448\u0451\u043b \u043a \u044d\u0442\u043e\u043c\u0443 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0431 \u0438 \u043e\u0448\u0438\u0431\u043e\u043a, \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u0435\u043b\u044e\u0441\u044c \u044d\u0442\u0438\u043c \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043e\u0437\u043e\u0439 \u043b\u0435\u0433\u043a\u043e\u043c\u044b\u0441\u043b\u0438\u044f \u0438 \u0440\u0443\u0433\u0430\u043d\u0438. \u041f\u0440\u0438\u043c\u0438\u0442\u0435 \u044d\u0442\u043e \u0438\u043b\u0438 \u0443\u0439\u0434\u0438\u0442\u0435! Source","title":"\u041d\u0430\u0445\u0443\u0439 \u0432\u0441\u0451, \u044f \u0441\u0434\u0430\u044e\u0441\u044c."},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 Git stash. \u041a\u0430\u043a \u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 Git \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0430 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445, \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c git stash \u043f\u0440\u044f\u0447\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0445 \u0432\u0435\u0440\u043d\u0443\u0442\u044c. \u0414\u043b\u044f \u0447\u0435\u0433\u043e \u043d\u0443\u0436\u0435\u043d git stash \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0430\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b git stash \u043c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u2014 \u0432 \u0441\u0442\u0435\u043a, \u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443. \u0412\u0441\u0451, \u0447\u0442\u043e \u0432\u044b \u043f\u0440\u044f\u0447\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e git stash , \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043e\u0442\u0442\u0443\u0434\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0442\u0443\u0434\u0430 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0438 \u2014 \u0432\u0430\u0448\u0438 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb (\u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 git stash Git stash \u0427\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: git stash Git stash save \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash save \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 git stash, \u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. git stash save \"\u041a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" Git stash \u043d\u0435 \u043f\u0440\u044f\u0447\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0427\u0442\u043e\u0431\u044b \u0438\u0445 \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0446\u0438\u044f --include-untracked (\u0438\u043b\u0438 -u): git stash save -u Git stash list \u041a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git stash \u0438\u043b\u0438 git stash save \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432 \u0441\u0442\u0435\u043a). \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash list \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u044f\u0442\u0430\u043d\u0438\u0439: git stash list \u0421\u0430\u043c\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432\u043d\u0438\u0437\u0443 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0430\u043c\u044b\u0435 \u0441\u0432\u0435\u0436\u0438\u0435 \u0441\u0432\u0435\u0440\u0445\u0443. \u041a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 \u0438\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, stash@{0} Git stash apply \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply \u0431\u0435\u0440\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u0441\u0432\u0435\u0436\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}) \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u042d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0432\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u043f\u0430\u0442\u0447, \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0442\u0447\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0430\u0448\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash apply \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: git stash apply stash@ { 1 } Git stash pop \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash pop \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply, \u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. git stash pop \u0411\u044b\u043b\u043e: \u0421\u0442\u0430\u043b\u043e \u043f\u043e\u0441\u043b\u0435 git stash pop : \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash pop stash@ { 1 } Git stash show \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash show \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash show \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f (\u0434\u043b\u044f stash@{0}): \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 diff, \u0442\u043e \u0435\u0441\u0442\u044c \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u044e\u0447 -p: git stash show -p \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u043c: git stash show stash@ { 1 } Git stash branch <\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash branch <\u043d\u043e\u0432\u0430\u044f_\u0432\u0435\u0442\u043a\u0430> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435\u043c, \u0438 \u0437\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (\u043a\u0430\u043a git stash pop ). git stash branch new-branch-name \u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash branch new-branch-name stash@ { 1 } Git stash drop \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash drop \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}). git stash drop \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c: git stash drop stash@ { 1 } Git stash clear \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash clear \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f. \u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. git stash clear Source","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 Git stash. \u041a\u0430\u043a \u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 Git"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash","text":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0438 \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443, \u043d\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0430\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b git stash \u043c\u043e\u0436\u043d\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u044d\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u0449\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u2014 \u0432 \u0441\u0442\u0435\u043a, \u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e \u0432\u0435\u0442\u043a\u0443. \u0412\u0441\u0451, \u0447\u0442\u043e \u0432\u044b \u043f\u0440\u044f\u0447\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e git stash , \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a. \u0417\u0430\u0442\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u043e\u0442\u0442\u0443\u0434\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0442\u0443\u0434\u0430 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0438 \u2014 \u0432\u0430\u0448\u0438 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb (\u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e \u0441\u043b\u043e\u0432\u043e). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 git stash","title":"\u0414\u043b\u044f \u0447\u0435\u0433\u043e \u043d\u0443\u0436\u0435\u043d git stash"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash_1","text":"\u0427\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443: git stash","title":"Git stash"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-save","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash save \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 git stash, \u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u2014 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u043f\u0440\u044f\u0442\u0430\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. git stash save \"\u041a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" Git stash \u043d\u0435 \u043f\u0440\u044f\u0447\u0435\u0442 \u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439. \u0427\u0442\u043e\u0431\u044b \u0438\u0445 \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0446\u0438\u044f --include-untracked (\u0438\u043b\u0438 -u): git stash save -u","title":"Git stash save"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-list","text":"\u041a\u0430\u0436\u0434\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 git stash \u0438\u043b\u0438 git stash save \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432 \u0441\u0442\u0435\u043a). \u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash list \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u0430\u0448\u0438\u0445 \u043f\u0440\u044f\u0442\u0430\u043d\u0438\u0439: git stash list \u0421\u0430\u043c\u044b\u0435 \u0441\u0442\u0430\u0440\u044b\u0435 \u00ab\u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f\u00bb \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432\u043d\u0438\u0437\u0443 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0430\u043c\u044b\u0435 \u0441\u0432\u0435\u0436\u0438\u0435 \u0441\u0432\u0435\u0440\u0445\u0443. \u041a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 \u0438\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, stash@{0}","title":"Git stash list"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-apply","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply \u0431\u0435\u0440\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u0441\u0432\u0435\u0436\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}) \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u0422\u043e \u0435\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. \u042d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0432\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u043f\u0430\u0442\u0447, \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0442\u0447\u0430 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432\u0430\u0448\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash apply \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435-\u043d\u0438\u0431\u0443\u0434\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440: git stash apply stash@ { 1 }","title":"Git stash apply"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-pop","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash pop \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 git stash apply, \u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044e. git stash pop \u0411\u044b\u043b\u043e: \u0421\u0442\u0430\u043b\u043e \u043f\u043e\u0441\u043b\u0435 git stash pop : \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash pop stash@ { 1 }","title":"Git stash pop"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-show","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash show \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0432 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435. git stash show \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f (\u0434\u043b\u044f stash@{0}): \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 diff, \u0442\u043e \u0435\u0441\u0442\u044c \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0430\u043c\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u044e\u0447 -p: git stash show -p \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u043c: git stash show stash@ { 1 }","title":"Git stash show"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-branch","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash branch <\u043d\u043e\u0432\u0430\u044f_\u0432\u0435\u0442\u043a\u0430> \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435\u043c, \u0438 \u0437\u0430\u0442\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (\u043a\u0430\u043a git stash pop ). git stash branch new-branch-name \u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f: git stash branch new-branch-name stash@ { 1 }","title":"Git stash branch &lt;\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435&gt;"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-drop","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash drop \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u0435 (stash@{0}). git stash drop \u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c: git stash drop stash@ { 1 }","title":"Git stash drop"},{"location":"git/%D0%9A%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D0%B0%20Git%20stash.%20%D0%9A%D0%B0%D0%BA%20%D0%BF%D1%80%D1%8F%D1%82%D0%B0%D1%82%D1%8C%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%20Git/#git-stash-clear","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 git stash clear \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u044f\u0442\u0430\u043d\u044c\u044f. \u0411\u0443\u0434\u044c\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0435\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. git stash clear Source","title":"Git stash clear"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/","text":"\u0421hange author of commit 4 Easy Steps to Change Author Name of a Commit After Push Rebase the repository to the previous commit of the one you want to change by running: git rebase \u2013i {{ previous-commit-hash }} The script above prompts you with a list of your commits in descendent order. On this vi/vim view, replace the word pick to edit per each commit you want to edit. Then quit and save. When the rebase process starts, change the author of a commit by running: git commit --amend --author = \"Author <email@email.com>\" Then, continue to next commit using: git rebase \u2013continue Once the rebase process finishes, push your changes by running: git push -f origin branch The steps above will change the author of a commit. But what is the meaning of each commands above and what it means to change a git repository\u2019s history? I came across this question recently after changing the settings on GitHub page and seen that commits were logged with invalid an invalid name. Reading through Git\u2019s documentation made it tricky to find the answer. This Stack Overflow answer nail it but I still decided to write about it to review the concepts behind scenes. What does the rebase commit do? The rebase command basically integrates changes from one branch into another. It is an alternative to the \u201cmerge\u201d command. The difference between rebase and merge is that rebase rewrites the commit history and creates a linear succession of commits, while merging adds a new commit to the destination branch. The image bellow perfectly shows a visual representation of both processes. Git amend command The amend command allows git users to change details of a commit. The amend structure is simple: git commit \u2013amend This will prompt a vi/vim view where the details of a git commit can be changed: update changelog file It is possible to change the author of a git commit directly as seen before: git commit --amend --author = \"Author < email@email.com > \" Change git history\u2026 Caution! Those who are familiar with rebasing know how powerful the tool it is. It might be tempting to use it all the time as well. When getting conflicts during a rebase, Git pauses on the conflicting commit and allows to fix conflict before proceeding. However, solving conflicts in the middle of a long chain of commits is often confusing and another source of potential errors. Rebasing creates this linear mind-set and give less priority to the actual goal of git. That is why it is not recommended to change the history of a git repository unless there is no alternative to it. In my case, I was the only user interacting with the repository so it was safe. However, when multiple developers are working on multiple branches, change to the git history can become a real source of problems. References https://git-scm.com/docs/git-rebase https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit https://www.git-tower.com/learn/git/glossary/rebase https://hackernoon.com/git-merge-vs-rebase-whats-the-diff-76413c117333 https://git-scm.com/docs/git-commit Source","title":"\u0421hange author of  commit"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/#4-easy-steps-to-change-author-name-of-a-commit-after-push","text":"Rebase the repository to the previous commit of the one you want to change by running: git rebase \u2013i {{ previous-commit-hash }} The script above prompts you with a list of your commits in descendent order. On this vi/vim view, replace the word pick to edit per each commit you want to edit. Then quit and save. When the rebase process starts, change the author of a commit by running: git commit --amend --author = \"Author <email@email.com>\" Then, continue to next commit using: git rebase \u2013continue Once the rebase process finishes, push your changes by running: git push -f origin branch The steps above will change the author of a commit. But what is the meaning of each commands above and what it means to change a git repository\u2019s history? I came across this question recently after changing the settings on GitHub page and seen that commits were logged with invalid an invalid name. Reading through Git\u2019s documentation made it tricky to find the answer. This Stack Overflow answer nail it but I still decided to write about it to review the concepts behind scenes.","title":"4 Easy Steps to Change Author Name of a Commit After Push"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/#what-does-the-rebase-commit-do","text":"The rebase command basically integrates changes from one branch into another. It is an alternative to the \u201cmerge\u201d command. The difference between rebase and merge is that rebase rewrites the commit history and creates a linear succession of commits, while merging adds a new commit to the destination branch. The image bellow perfectly shows a visual representation of both processes.","title":"What does the rebase commit do?"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/#git-amend-command","text":"The amend command allows git users to change details of a commit. The amend structure is simple: git commit \u2013amend This will prompt a vi/vim view where the details of a git commit can be changed: update changelog file It is possible to change the author of a git commit directly as seen before: git commit --amend --author = \"Author < email@email.com > \"","title":"Git amend command"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/#change-git-history-caution","text":"Those who are familiar with rebasing know how powerful the tool it is. It might be tempting to use it all the time as well. When getting conflicts during a rebase, Git pauses on the conflicting commit and allows to fix conflict before proceeding. However, solving conflicts in the middle of a long chain of commits is often confusing and another source of potential errors. Rebasing creates this linear mind-set and give less priority to the actual goal of git. That is why it is not recommended to change the history of a git repository unless there is no alternative to it. In my case, I was the only user interacting with the repository so it was safe. However, when multiple developers are working on multiple branches, change to the git history can become a real source of problems.","title":"Change git history\u2026 Caution!"},{"location":"git/%D0%A1hange%20author%20of%20%20commit/#references","text":"https://git-scm.com/docs/git-rebase https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit https://www.git-tower.com/learn/git/glossary/rebase https://hackernoon.com/git-merge-vs-rebase-whats-the-diff-76413c117333 https://git-scm.com/docs/git-commit Source","title":"References"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/","text":"@Before @BeforeClass @BeforeEach @BeforeAll @Before vs @BeforeClass vs @BeforeEach vs @BeforeAll Learn about the difference between JUnit annotations that can be used to run logic before tests. 1. Introduction In this short tutorial, we're going to explain the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit 4 and 5 \u2013 with practical examples of how to use them. We'll also cover briefly their @After complementary annotations. Let's start with JUnit 4. 2. @Before Methods annotated with the @Before annotation are executed before each test. This is useful when we want to execute some common code before running a test. Let's see an example where we initialize a list and add some values: @RunWith ( JUnit4 . class ) public class BeforeAndAfterAnnotationsUnitTest { private List < String > list ; @Before public void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @After public void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } Notice that we also added another method annotated with @After in order to clear the list after the execution of each test. After that, let's add some tests to check the size of our list: @Test public void whenCheckingListSize_thenSizeEqualsToInit () { LOG . info ( \"executing test\" ); assertEquals ( 2 , list . size ()); list . add ( \"another test\" ); } @Test public void whenCheckingListSizeAgain_thenSizeEqualsToInit () { LOG . info ( \"executing another test\" ); assertEquals ( 2 , list . size ()); list . add ( \"yet another test\" ); } In this case, it's crucial to make sure that test environment is properly set up before running each test since the list is modified during every test execution. If we take a look at the log output we can check that the init and teardown methods were executed once per test: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown 3. @BeforeClass When we want to execute an expensive common operation before each test, it's preferable to execute it only once before running all tests using @BeforeClass . Some examples of common expensive operations are the creation of a database connection or the startup of a server. Let's create a simple test class that simulates the creation of a database connection: @RunWith ( JUnit4 . class ) public class BeforeClassAndAfterClassAnnotationsUnitTest { @BeforeClass public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterClass public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } Notice that these methods have to be static , so they'll be executed before running the tests of the class. As we did before, let's also add some simple tests: @Test public void simpleTest () { LOG . info ( \"simple test\" ); } @Test public void anotherSimpleTest () { LOG . info ( \"another simple test\" ); } This time, if we take a look at the log output we can check that the setup and tearDown methods were executed only once: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection 4. @BeforeEach and @BeforeAll @BeforeEac_h and @BeforeAll_ are the JUnit 5 equivalents of @Before and @BeforeClass . These annotations were renamed with clearer names to avoid confusion. Let's duplicate our previous classes using these new annotations, starting with the @BeforeEach and @AfterEach annotations: @RunWith ( JUnitPlatform . class ) class BeforeEachAndAfterEachAnnotationsUnitTest { private List < String > list ; @BeforeEach void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @AfterEach void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } If we check logs, we can confirm that it works in the same way as with the @Before and @After annotations: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown Finally, let's do the same with the other test class to see the @BeforeAll and @AfterAll annotations in action: @RunWith ( JUnitPlatform . class ) public class BeforeAllAndAfterAllAnnotationsUnitTest { @BeforeAll public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterAll public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } And the output is the same as with the old annotation: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection 5. Conclusion In this article, we showed the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit and when each of them should be used. As always, the full source code of the examples is available over on GitHub . Source","title":"@Before @BeforeClass @BeforeEach @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#before-vs-beforeclass-vs-beforeeach-vs-beforeall","text":"Learn about the difference between JUnit annotations that can be used to run logic before tests.","title":"@Before vs @BeforeClass vs @BeforeEach vs @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#1-introduction","text":"In this short tutorial, we're going to explain the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit 4 and 5 \u2013 with practical examples of how to use them. We'll also cover briefly their @After complementary annotations. Let's start with JUnit 4.","title":"1. Introduction"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#2-before","text":"Methods annotated with the @Before annotation are executed before each test. This is useful when we want to execute some common code before running a test. Let's see an example where we initialize a list and add some values: @RunWith ( JUnit4 . class ) public class BeforeAndAfterAnnotationsUnitTest { private List < String > list ; @Before public void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @After public void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } Notice that we also added another method annotated with @After in order to clear the list after the execution of each test. After that, let's add some tests to check the size of our list: @Test public void whenCheckingListSize_thenSizeEqualsToInit () { LOG . info ( \"executing test\" ); assertEquals ( 2 , list . size ()); list . add ( \"another test\" ); } @Test public void whenCheckingListSizeAgain_thenSizeEqualsToInit () { LOG . info ( \"executing another test\" ); assertEquals ( 2 , list . size ()); list . add ( \"yet another test\" ); } In this case, it's crucial to make sure that test environment is properly set up before running each test since the list is modified during every test execution. If we take a look at the log output we can check that the init and teardown methods were executed once per test: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown","title":"2. @Before"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#3-beforeclass","text":"When we want to execute an expensive common operation before each test, it's preferable to execute it only once before running all tests using @BeforeClass . Some examples of common expensive operations are the creation of a database connection or the startup of a server. Let's create a simple test class that simulates the creation of a database connection: @RunWith ( JUnit4 . class ) public class BeforeClassAndAfterClassAnnotationsUnitTest { @BeforeClass public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterClass public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } Notice that these methods have to be static , so they'll be executed before running the tests of the class. As we did before, let's also add some simple tests: @Test public void simpleTest () { LOG . info ( \"simple test\" ); } @Test public void anotherSimpleTest () { LOG . info ( \"another simple test\" ); } This time, if we take a look at the log output we can check that the setup and tearDown methods were executed only once: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection","title":"3.\u00a0@BeforeClass"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#4-beforeeach-and-beforeall","text":"@BeforeEac_h and @BeforeAll_ are the JUnit 5 equivalents of @Before and @BeforeClass . These annotations were renamed with clearer names to avoid confusion. Let's duplicate our previous classes using these new annotations, starting with the @BeforeEach and @AfterEach annotations: @RunWith ( JUnitPlatform . class ) class BeforeEachAndAfterEachAnnotationsUnitTest { private List < String > list ; @BeforeEach void init () { LOG . info ( \"startup\" ); list = new ArrayList <> ( Arrays . asList ( \"test1\" , \"test2\" )); } @AfterEach void teardown () { LOG . info ( \"teardown\" ); list . clear (); } } If we check logs, we can confirm that it works in the same way as with the @Before and @After annotations: ... startup ... executing another test ... teardown ... startup ... executing test ... teardown Finally, let's do the same with the other test class to see the @BeforeAll and @AfterAll annotations in action: @RunWith ( JUnitPlatform . class ) public class BeforeAllAndAfterAllAnnotationsUnitTest { @BeforeAll public static void setup () { LOG . info ( \"startup - creating DB connection\" ); } @AfterAll public static void tearDown () { LOG . info ( \"closing DB connection\" ); } } And the output is the same as with the old annotation: ... startup - creating DB connection ... simple test ... another simple test ... closing DB connection","title":"4.\u00a0@BeforeEach and @BeforeAll"},{"location":"java/%40Before%20%40BeforeClass%20%40BeforeEach%20%40BeforeAll/#5-conclusion","text":"In this article, we showed the differences between the @Before , @BeforeClass , @BeforeEach and @BeforeAll annotations in JUnit and when each of them should be used. As always, the full source code of the examples is available over on GitHub . Source","title":"5. Conclusion"},{"location":"java/Access%20value%20in%20application.properties%20Spring%20Boot/","text":"Access value in application.properties Spring Boot Spring-boot allows us several methods to provide externalized configurations , you can try using application.yml or yaml files instead of the property file and provide different property files setup according to different environments. We can separate out the properties for each environment into separate yml files under separate spring profiles.Then during deployment you can use : java -jar -Drun.profiles=SpringProfileName to specify which spring profile to use.Note that the yml files should be name like application-{environmentName}.yml for them to be automatically taken up by springboot. Reference : https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-profile-specific-properties To read from the application.yml or property file : The easiest way to read a value from the property file or yml is to use the spring @value annotation.Spring automatically loads all values from the yml to the spring environment , so we can directly use those values from the environment like : @Component public class MySampleBean { @Value ( \"${name}\" ) private String sampleName ; } Or another method that spring provides to read strongly typed beans is as follows: ymca: remote-address: 192.168.1.1 security: username: admin Corresponding POJO to read the yml : @ConfigurationProperties ( \"ymca\" ) public class YmcaProperties { private InetAddress remoteAddress ; private final Security security = new Security (); public boolean isEnabled () { ... } public void setEnabled ( boolean enabled ) { ... } public InetAddress getRemoteAddress () { ... } public void setRemoteAddress ( InetAddress remoteAddress ) { ... } public Security getSecurity () { ... } public static class Security { private String username ; private String password ; public String getUsername () { ... } public void setUsername ( String username ) { ... } public String getPassword () { ... } public void setPassword ( String password ) { ... } } } The above method works well with yml files. Reference: https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html","title":"Access value in application.properties Spring Boot"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/","text":"Change the Default Port in Spring Boot 1. Overview Spring Boot provides sensible defaults for many configuration properties. But we sometimes need to customize these with our case-specific values. And a common use case is changing the default port for the embedded server. In this quick tutorial, we'll cover several ways to achieve this. 2. Using Property Files The fastest and easiest way to customize Spring Boot is by overriding the values of the default properties. For the server port, the property we want to change is server.port . By default, the embedded server starts on port 8080. So, let's see how to provide a different value in an application.properties file : server.port=8081 Now the server will start on port 8081. And we can do the same if we're using an application.yml file: server: port : 8081 Both files are loaded automatically by Spring Boot if placed in the src/main/resources directory of a Maven application. 2.1. Environment-Specific Ports If we have an application deployed in different environments, we may want it to run on different ports on each system. We can easily achieve this by combining the property files approach with Spring profiles. Specifically, we can create a property file for each environment. For example, we'll have an application-dev.properties file with this content: server.port=8081 Then we'll add another application-qa.properties file with a different port: server.port=8082 Now, the property files configuration should be sufficient for most cases. However, there are other options for this goal, so let's explore them as well. 3. Programmatic Configuration We can configure the port programmatically either by setting the specific property when starting the application or by customizing the embedded server configuration. First, let's see how to set the property in the main @SpringBootApplication class: @SpringBootApplication public class CustomApplication { public static void main ( String [] args ) { SpringApplication app = new SpringApplication ( CustomApplication . class ); app . setDefaultProperties ( Collections . singletonMap ( \"server.port\" , \"8083\" )); app . run ( args ); } } Next, to customize the server configuration, we have to implement the WebServerFactoryCustomizer interface: @Component public class ServerPortCustomizer implements WebServerFactoryCustomizer < ConfigurableWebServerFactory > { @Override public void customize ( ConfigurableWebServerFactory factory ) { factory . setPort ( 8086 ); } } Note that this applies to the Spring Boot 2.x version. For Spring Boot 1.x, we can similarly implement the EmbeddedServletContainerCustomizer interface. 4. Using Command-Line Arguments When packaging and running our application as a jar, we can set the server.port argument with the java command: java -jar spring-5.jar --server.port=8083 or by using the equivalent syntax: java -jar -Dserver.port=8083 spring-5.jar 5. Order of Evaluation As a final note, let's look at the order in which these approaches are evaluated by Spring Boot. Basically, the configurations priority is embedded server configuration command-line arguments property files main @SpringBootApplication configuration 6. Conclusion In this article, we saw how to configure the server port in a Spring Boot application. As always, the source code for the examples is available over on GitHub . Source","title":"Change the Default Port in Spring Boot"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#1-overview","text":"Spring Boot provides sensible defaults for many configuration properties. But we sometimes need to customize these with our case-specific values. And a common use case is changing the default port for the embedded server. In this quick tutorial, we'll cover several ways to achieve this.","title":"1. Overview"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#2-using-property-files","text":"The fastest and easiest way to customize Spring Boot is by overriding the values of the default properties. For the server port, the property we want to change is server.port . By default, the embedded server starts on port 8080. So, let's see how to provide a different value in an application.properties file : server.port=8081 Now the server will start on port 8081. And we can do the same if we're using an application.yml file: server: port : 8081 Both files are loaded automatically by Spring Boot if placed in the src/main/resources directory of a Maven application.","title":"2. Using Property Files"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#21-environment-specific-ports","text":"If we have an application deployed in different environments, we may want it to run on different ports on each system. We can easily achieve this by combining the property files approach with Spring profiles. Specifically, we can create a property file for each environment. For example, we'll have an application-dev.properties file with this content: server.port=8081 Then we'll add another application-qa.properties file with a different port: server.port=8082 Now, the property files configuration should be sufficient for most cases. However, there are other options for this goal, so let's explore them as well.","title":"2.1. Environment-Specific Ports"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#3-programmatic-configuration","text":"We can configure the port programmatically either by setting the specific property when starting the application or by customizing the embedded server configuration. First, let's see how to set the property in the main @SpringBootApplication class: @SpringBootApplication public class CustomApplication { public static void main ( String [] args ) { SpringApplication app = new SpringApplication ( CustomApplication . class ); app . setDefaultProperties ( Collections . singletonMap ( \"server.port\" , \"8083\" )); app . run ( args ); } } Next, to customize the server configuration, we have to implement the WebServerFactoryCustomizer interface: @Component public class ServerPortCustomizer implements WebServerFactoryCustomizer < ConfigurableWebServerFactory > { @Override public void customize ( ConfigurableWebServerFactory factory ) { factory . setPort ( 8086 ); } } Note that this applies to the Spring Boot 2.x version. For Spring Boot 1.x, we can similarly implement the EmbeddedServletContainerCustomizer interface.","title":"3. Programmatic Configuration"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#4-using-command-line-arguments","text":"When packaging and running our application as a jar, we can set the server.port argument with the java command: java -jar spring-5.jar --server.port=8083 or by using the equivalent syntax: java -jar -Dserver.port=8083 spring-5.jar","title":"4. Using Command-Line Arguments"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#5-order-of-evaluation","text":"As a final note, let's look at the order in which these approaches are evaluated by Spring Boot. Basically, the configurations priority is embedded server configuration command-line arguments property files main @SpringBootApplication configuration","title":"5. Order of Evaluation"},{"location":"java/Change%20the%20Default%20Port%20in%20Spring%20Boot/#6-conclusion","text":"In this article, we saw how to configure the server port in a Spring Boot application. As always, the source code for the examples is available over on GitHub . Source","title":"6. Conclusion"},{"location":"java/Circuit%20Breaker%20pattern/","text":"Circuit Breaker pattern \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u0445\u043e\u0447\u0443 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u043f\u043e\u043d\u044f\u0442\u0438\u044f, \u043a\u0430\u043a \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0435 Circuit Breaker. \u041d\u0430\u0432\u0435\u0440\u043d\u044f\u043a\u0430 \u043c\u043d\u043e\u0433\u0438\u0435 \u0441\u043b\u044b\u0448\u0430\u043b\u0438 (\u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438) \u0441 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u043e\u0439 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u041d\u0435 \u0431\u0443\u0434\u0443 \u0443\u0433\u043b\u0443\u0431\u043b\u044f\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u0442\u0430\u043b\u0438, \u043d\u043e \u0435\u0441\u043b\u0438 \u0432 \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432\u0430\u0445: \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043d\u0430 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0430\u0445: \u043c\u043e\u043d\u043e\u043b\u0438\u0442 \u0438 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u044b. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0435\u0441\u0442\u044c \u0441\u0432\u043e\u0438 \u043f\u043b\u044e\u0441\u044b \u0438 \u043c\u0438\u043d\u0443\u0441\u044b. \u041c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043d\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u2014 \u044d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0434\u0438\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043a\u0430\u043a \u043d\u0430\u0431\u043e\u0440 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u0446\u0438\u0440\u0443\u0435\u0442 \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u044d\u0442\u043e \u0432\u043e\u043f\u043b\u043e\u0449\u0435\u043d\u0438\u0435 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u0432 High Cohesion \u0438 Low Coupling. \u0422\u0430\u043a \u0447\u0442\u043e \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441 \u043e\u0431\u044f\u0437\u0430\u043d \u0431\u044b\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u043c. \u0414\u043e\u043f\u0443 \u0441\u0442\u0438\u043c \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u0412\u0441\u0435 \u043e\u043d\u0438 \u043e\u0431\u0449\u0430\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0431\u0430\u0437\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u0442\u043e\u0442 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0445, \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 id \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0443 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435. \u0415\u0441\u043b\u0438 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432 \u043a\u0430\u043a\u043e\u043c-\u043b\u0438\u0431\u043e \u0431\u043b\u043e\u043a\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043a\u0430\u043a\u0430\u044f-\u043b\u0438\u0431\u043e \u043e\u0448\u0438\u0431\u043a\u0430 (\u0438\u043b\u0438 \u0411\u0414), \u043e\u0434\u0438\u043d \u0438\u0437 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043e\u0442\u0432\u0430\u043b\u0438\u043b\u0441\u044f \u0438 \u0432\u0441\u0435 \u0441\u0442\u0430\u043b\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u043b\u043e\u0445\u043e. \u0425\u043e\u0447\u0443 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u0441 \u0434\u0432\u0443\u043c\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 (\u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u0435\u043d, \u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0440\u0435\u0434\u0435, \u0433\u0434\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432) \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441 \u0410 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441 B. \u0421\u0435\u0440\u0432\u0438\u0441 \u0410 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0443 B, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0411\u0414, \u0430 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0434\u0430\u043b\u044c\u0448\u0435. \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0435\u0441\u043b\u0438 \u043d\u0430\u0448 \u0441\u0435\u0440\u0432\u0438\u0441 B \u0438\u043c\u0435\u0435\u0442 \u0440\u0435\u043f\u043b\u0438\u043a\u0443. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u0430\u043a\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e, \u043a\u043e\u0433\u0434\u0430 \u043e\u0431\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u043a\u0430\u0436\u0443\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u043c\u0438, \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0435\u0441\u0442\u0438 \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f ? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0438 \u043f\u043e\u043a\u0443\u043f\u043a\u0435 \u0442\u043e\u0432\u0430\u0440\u0430 \u0432\u044b \u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0439. \u0412\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u043e\u043f\u043b\u0430\u0442\u0443 \u0442\u043e\u0432\u0430\u0440\u0430 \u0438 \u043e\u043d\u0438 \u043e\u0431\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438\u0441\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e. \u042d\u0442\u043e \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u0440\u0438\u044f\u0442\u043d\u043e. \u041d\u043e \u043a\u0430\u043a \u0436\u0435 \u0431\u044b\u0442\u044c \u0432 \u0442\u0430\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 ? \u0414\u0430\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 2. Idempotency Key \u041a\u0430\u0436\u0434\u044b\u0439 \u043d\u0430\u0448 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u0437 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0410 \u043c\u044b \u0441\u043d\u0430\u0431\u0436\u0430\u0435\u043c \u043a\u043b\u044e\u0447\u0435\u043c, \u043f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c, \u0433\u043e\u0432\u043e\u0440\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0443 B \u0447\u0442\u043e \u0432\u043e\u0442 \u044d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430\u0448 \u0438 \u0443 \u043d\u0435\u0433\u043e \u0442\u0430\u043a\u043e\u0439 \u0432\u043e\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440. \u0421\u0435\u0440\u0432\u0438\u0441 B \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u0432 \u0431\u0430\u0437\u0443 \u0438 \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u043e\u0442 \u044d\u0442\u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u043d \u0441\u0435\u0439\u0447\u0430\u0441 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442. \u0412 \u0438\u0442\u043e\u0433\u0435 2 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u043a\u043b\u044e\u0447\u0430 \u043c\u044b \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u0432 \u0411\u0414 => \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e \u043d\u0430\u0448 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u043e\u0436\u0434\u044b. \u0412\u0440\u043e\u0434\u0435 \u0431\u044b \u0432\u0441\u0435 \u043f\u043e\u043a\u0430 \u0445\u043e\u0440\u043e\u0448\u043e. \u0414\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u043d\u0435 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u0432\u0435\u0440\u0435\u043d\u044b, \u0447\u0442\u043e: + \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u043f\u043b\u0438\u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0430 B, + \u0437\u0430\u043f\u0440\u043e\u0441 \u0438\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u0435\u043d (\u0442\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0442.\u043a. \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442). \u0418\u0434\u0435\u043c\u043f\u043e\u0442\u0435\u043d\u0442\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 GET, HEAD, PUT, DELETE. + \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Idempotency key, + \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a\u0430\u044f-\u043b\u0438\u0431\u043e \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u0442.\u043a. \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0439 \u0441\u0435\u0440\u0432\u0438\u0441 (\u0438\u043b\u0438 \u0411\u0414) \u0438 \u043c\u044b \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043c\u043e\u0436\u0435\u043c \u043d\u0430 \u043d\u0435\u0433\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u0442\u044c. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0447\u0442\u043e-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0435\u0434\u043e\u043c\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0435. \u0415\u0441\u043b\u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u043b\u0430\u0442\u044b \u0442\u043e\u0432\u0430\u0440\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0431\u0430\u043d\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0439 (\u043c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u0435\u0433\u043e \u0432\u044b\u0448\u0435). 3. \u041f\u0435\u0440\u0435\u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (Retry pattern) \u041c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043e\u043d \u043d\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u043c. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0440\u0430\u0437 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c ? \u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u043e\u0448\u0438\u0431\u043a\u0430. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u0435\u043b \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u044b, \u0442\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b \u043c\u044b \u043d\u0435 \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u0440\u0430\u0437 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c, \u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0442\u044c \u0443\u0434\u0430\u0447\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441. \u0415\u0441\u043b\u0438 \u0438\u0441\u0447\u0435\u0440\u043f\u0430\u043b\u0438 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a,\u0442\u043e \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435 \u0434\u043e \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 timeout exception \u0438\u043b\u0438 too many request, \u0442\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043d\u043e\u0432\u0430. \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c \u043c\u044b \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u043e\u043c\u0435\u043d\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0417\u0434\u0435\u0441\u044c \u043b\u0443\u0447\u0448\u0435 \u0434\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043b \u0441\u0432\u043e\u044e \u0440\u0430\u0431\u043e\u0442\u0443 (\u0443\u0441\u043b\u043e\u0432\u043d\u043e 1\u20132 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435) \u0438 \u0441\u043d\u043e\u0432\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441. \u0421\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0431\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0443\u0434\u044e\u0449\u0438\u0435: \u0431\u0435\u0437 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f (no delay) , \u043a\u043e\u0433\u0434\u0430 \u0441\u0440\u0430\u0437\u0443 \u0431\u0435\u0437 \u043f\u0430\u0443\u0437\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (constant) , \u043a\u043e\u0433\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043b\u0438\u043c\u0438\u0442 \u0441 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (linear) \u0441 \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (exponencial) \u0418 \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0421\u0435\u0440\u0432\u0438\u0441\u044b \u0436\u0434\u0443\u0442 \u043a\u0430\u043a\u043e\u0435 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0438 \u043e\u043f\u044f\u0442\u044c \u0448\u043b\u044e\u0442 \u0441\u0432\u043e\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043d\u0435 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0438 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0438 (delay) \u2014 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435 (\u0432\u043f\u0435\u0440\u0435\u0434, \u043d\u0430\u0437\u0430\u0434) \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0435. \u0427\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043d\u0435 \u043e\u0442\u0441\u044b\u043b\u0430\u043b\u0438 \u0441\u0432\u043e\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u0441\u0435 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438. \u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Retry \u043f\u0430\u0442\u0442\u0435\u0440\u043d ? \u041a\u043e\u0433\u0434\u0430 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c \u043c\u043e\u0433\u0443\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438. \u042d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043a\u0440\u0430\u0442\u043a\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440 \u0438 \u0432\u044b\u0441\u043e\u043a\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e (\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0438\u043b\u0438 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442\u044b \u0438\u0437-\u0437\u0430 \u043f\u0438\u043a\u043e\u0432\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441). \u041a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d ? \u041a\u043e\u0433\u0434\u0430 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u0434\u043e\u043b\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440, \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u043d\u0430 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0443\u043c\u0430\u0442\u044c\u0441\u044f \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Circuit Breaker ) \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0438\u0441 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0447\u0430\u0441\u0442\u043e \u0441\u0438\u0433\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u201c\u0437\u0430\u043d\u044f\u0442\u201d, \u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u043d \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 4. Circuit Breaker pattern \u0412 Spring \u043e\u0431\u044b\u0447\u043d\u043e \u0431\u0435\u0440\u0443\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438\u0437 Netflix \u0441\u0442\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Hystrix. Hystrix \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0437\u0430\u0434\u0435\u0440\u0436\u0435\u043a \u0438 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438, \u044d\u0442\u043e \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 Circuit Breaker. \u041a\u0430\u043a \u0441\u043a\u0430\u0437\u0430\u043d\u043e \u0438\u0437 \u043e\u0444\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438: Hystrix \u2014 \u044d\u0442\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432\u0430\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u0440\u043f\u0438\u043c\u043e\u0441\u0442\u044c \u043a \u0437\u0430\u0434\u0435\u0440\u0436\u043a\u0430\u043c \u0438 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0442\u043a\u0430\u0437\u043e\u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u0438. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0438 \u043e\u0442 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 Retry, \u043f\u0430\u0442\u0442\u0435\u0440\u043d Circuit Breaker \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d \u043d\u0430 \u043c\u0435\u043d\u0435\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0434\u043b\u0438\u0442\u044c\u0441\u044f \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0434\u043e\u043b\u044c\u0448\u0435: \u043e\u0431\u0440\u044b\u0432 \u0441\u0435\u0442\u0438, \u043e\u0442\u043a\u0430\u0437 \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0412 \u044d\u0442\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445 \u043f\u0440\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u043e\u043b\u0435\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u043d\u0435\u043a\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c, \u0438 \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0430\u0439\u043c-\u0430\u0443\u0442, \u043f\u043e \u0438\u0441\u0442\u0435\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u0442\u0432\u0435\u0442, \u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u044d\u0442\u0438\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c, \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0430\u0436\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b (\u043f\u0430\u043c\u044f\u0442\u044c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u044d\u0442\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u0441\u0431\u043e\u044e \u0434\u0440\u0443\u0433\u0438\u0445, \u043d\u0435\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b. \u0412 \u044d\u0442\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u043b\u0430\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438 \u043d\u0435 \u043f\u044b\u0442\u0430\u043b\u0430\u0441\u044c \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0436\u0431\u0443 \u0441\u043d\u043e\u0432\u0430 \u0438 \u0441\u043d\u043e\u0432\u0430. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0435\u0441\u043b\u0438 \u0441\u043b\u0443\u0436\u0431\u0430 \u0437\u0430\u043d\u044f\u0442\u0430, \u0441\u0431\u043e\u0439 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0447\u0430\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043b\u0430\u0432\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u043c\u0443 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u044e \u0441\u0431\u043e\u0435\u0432. \u0415\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c: \u041f\u0430\u0442\u0442\u0435\u0440\u043d Circuit Breaker \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u043d\u0435\u0443\u0434\u0430\u0447\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0434\u0430\u043b\u044c\u0448\u0435 \u043d\u0435 \u0442\u0440\u0430\u0442\u044f \u0432\u0430\u0436\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b, \u043f\u043e\u043a\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0441\u0431\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0435\u0433\u043e. \u041e\u043d \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c, \u0431\u044b\u043b\u0430 \u043b\u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430 \u043d\u0435\u0438\u0441\u043f\u0440\u0430\u0432\u043d\u043e\u0441\u0442\u044c. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430, \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u043d\u043e\u0432\u0430. Circuit Breaker \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043a\u0430\u043a \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c. \u041f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u0448\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438, \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0440\u0430\u0437\u0443 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443. \u0415\u0441\u043b\u0438 \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0435 B \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a, \u0442\u043e \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u0443 \u0410 \u043e\u0448\u0438\u0431\u043a\u0443 \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u0442, \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438, \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441 B. \u041c\u044b \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435. \u0423 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c 3 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f: Closed : \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0443. \u0421\u0447\u0435\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a = 0 \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043f\u043e\u043a\u043e\u0439\u043d\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u0442 \u0438 \u0448\u043b\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430\u043f\u0440\u0430\u0432\u043e \u0438 \u043d\u0430\u043b\u0435\u0432\u043e. \u0412\u0441\u0435 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b. \u041f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a, \u0435\u0441\u043b\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0430\u0441\u044c \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e. \u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u0437\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u043e \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0430\u0439\u043c\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f. \u041a\u043e\u0433\u0434\u0430 \u0442\u0430\u0439\u043c\u0435\u0440 \u0438\u0441\u0442\u0435\u043a\u0430\u0435\u0442, \u043e\u043d \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Half-Open . \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u0439\u043c\u0435\u0440\u0430 \u2014 \u0434\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u0443 \u0432\u0440\u0435\u043c\u044f \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0435\u0449\u0435 \u0440\u0430\u0437. 2) Open : \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. 3) Half-Open: \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043e\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0443. \u0415\u0441\u043b\u0438 \u044d\u0442\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u044b, \u0442\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0438 \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Closed (\u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a \u0441\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 0). \u0415\u0441\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u043e\u0439, \u0442\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e\u0433\u0434\u0430 \u043f\u0440\u043e\u043a\u0441\u0438-\u0441\u0435\u0440\u0432\u0438\u0441 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0442\u0430\u0439\u043c\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435 \u0441\u0431\u043e\u044f. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Half-Open \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0440\u043e\u0441\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0443. \u0422.\u043a. \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u0430, \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u0435\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u043e \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u0428\u0430\u0431\u043b\u043e\u043d Circuit Breaker \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0441\u0431\u043e\u044f \u0438 \u0441\u043d\u0438\u0436\u0430\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043e\u0442\u043a\u043b\u0438\u043a\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0442\u043a\u043b\u043e\u043d\u044f\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0441\u043e \u0441\u0431\u043e\u0435\u043c, \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0436\u0434\u0430\u0442\u044c, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0438\u0441\u0442\u0435\u0447\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0436\u0434\u0430\u0442\u044c \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 (\u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u0442\u0441\u044f). \u0421\u0445\u0435\u043c\u0430\u0442\u0438\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430 Circuit Breaker \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043e\u043f\u043b\u0430\u0442\u043e\u0439 \u043a\u0430\u0440\u0442\u043e\u0439: \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432 \u043a\u0430\u043a\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 circuit breaker \u0435\u0441\u043b\u0438 \u0437\u0430\u043a\u0440\u044b\u0442 (Closed) , \u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440, \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u043f\u044b\u0442\u043a\u0443 \u043e\u043f\u043b\u0430\u0442\u044b, \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u0438 \u0432\u0441\u0435 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Open , \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0442\u0430\u0439\u043c\u0435\u0440, \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u043c \u0441\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0443\u0436\u0435 \u043d\u0435 Closed , \u0430 Open , \u0442\u043e \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u043e\u0442 \u0441\u0430\u043c\u044b\u0439 \u0442\u0430\u0439\u043c\u0435\u0440 (\u0442\u0430\u0439\u043c\u0435\u0440 \u2014 \u044d\u0442\u043e \u0442\u043e \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0434\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043d\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435). \u0415\u0441\u043b\u0438 \u043e\u043d \u043d\u0435 \u0438\u0441\u0442\u0435\u043a, \u0442.\u0435. \u044d\u0442\u0430 \u0443\u0441\u043b\u043e\u0432\u043d\u0430\u044f \u0441\u043a\u0430\u0436\u0435\u043c \u043c\u0438\u043d\u0443\u0442\u0430 \u0435\u0449\u0435 \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0430, \u0442\u043e \u043c\u044b \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c\u0441\u044f \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u044b\u043b\u0430 \u0432 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u0439\u043c\u0435\u0440 \u0438\u0441\u0442\u0435\u043a \u2014 \u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c, \u0432\u0441\u0435 \u0445\u043e\u0440\u043e\u0448\u043e \u2014 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 Closed , \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0442\u0430\u0439\u043c\u0435\u0440 \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u043f\u043b\u0430\u0442\u0443 \u0437\u0430\u043a\u0430\u0437\u0430. \u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u043f\u043b\u043e\u0445\u043e \u2014 \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043d\u0430 \u0448\u0430\u0433 Open . \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u043e\u043c Retry , \u0432\u0435\u0434\u044c \u043d\u0435 \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438 \u0441\u0442\u043e\u0438\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0435\u0441\u043b\u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u043a\u0440\u0430\u0442\u043a\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430 (\u043a\u0430\u043a \u0443\u0436\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u043b\u043e\u0441\u044c \u0440\u0430\u043d\u0435\u0435), \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0435\u0449\u0435 \u0440\u0430\u0437, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430. \u041a\u0430\u043a\u043e\u0439 \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 ? \u041f\u0430\u0442\u0442\u0435\u0440\u043d Circuit Breaker \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0433\u0434\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u0430\u0434\u0435\u043d\u0438\u044f \u0438 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c. \u041c\u043e\u0436\u043d\u043e \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043f\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0443 \u0434\u043b\u044f \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u043e \u0432\u043e\u0437\u043d\u0438\u043a\u0448\u0435\u0439 \u043e\u0448\u0438\u0431\u043a\u0435. \u041a\u043e\u0433\u0434\u0430 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ? \u0414\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u044b\u0442\u043e\u043a \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u0441\u0435\u0440\u0432\u0438\u0441\u0443 \u0438\u043b\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c, \u043a\u043e\u0433\u0434\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u044b\u0441\u043e\u043a\u0430 \u0438 \u044d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440. \u041a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ? \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u2014 \u044d\u0442\u043e \u0434\u0430\u0441\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 overhead \u041a\u0430\u043a \u0437\u0430\u043c\u0435\u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041d\u0430\u0434\u0435\u044e\u0441\u044c \u0447\u0442\u043e \u0441\u043c\u043e\u0433 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0432 \u043a\u0440\u0430\u0442\u0446\u0435 \u0438\u0437\u043b\u043e\u0436\u0438\u0442\u044c \u0441\u0443\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u0430. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0435\u043c\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0442 \u0438 \u043a\u043e\u0433\u0434\u0430 \u0443 \u043c\u0435\u043d\u044f \u0431\u044b\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u0438\u043c, \u0443 \u043c\u0435\u043d\u044f \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u043b\u0438 \u043d\u0435\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u0435. \u0421\u043a\u0430\u0436\u0443, \u0447\u0442\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u043a\u0443\u0434\u043d\u0430\u044f. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0442\u0435\u043c\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u043e \u043d\u0435\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432.","title":"Circuit Breaker pattern"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/","text":"Export & Download Data as CSV File in Spring Boot A Comma-Separated Values (CSV) file is just a simple plain text file that uses a comma as a delimiter to separate values. It stores data in a tabular format where each row consists of one or more fields and each column represents a specific field. These fields are separated by commas, one of the reasons why these files are called comma-separated values . CSV is a widely used data exchange format in the industry due to its simplicity and better integration with existing applications. These files are usually used for exporting and importing large data sets. In this tutorial, we will learn how to export and download the data as a CSV file in a Spring Boot project. Data export (JSON, CSV, PDF, etc.) is a very common feature implemented in many Java enterprise applications. Project Dependencies Since Java does not provide native support for creating and parsing CSV files, we will use OpenCSV 3rd-party library for this purpose. Here is how our build.gradle file looks like: build.gradle plugins { id 'org.springframework.boot' version '2.1.3.RELEASE' id 'java' } apply plugin: 'io.spring.dependency-management' group = 'com.attacomsian' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'com.opencsv:opencsv:4.5' } If you are working with a maven project, make sure you include the following maven dependency to the project's pom.xml file: <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 4.5 </version> </dependency> User Model Here is our User model class that will be used to write to a CSV file. User.java package com.attacomsian.exportcsv.data ; import com.opencsv.bean.CsvBindByName ; import com.opencsv.bean.CsvBindByPosition ; public class User { private long id ; private String name ; private String email ; private String country ; private int age ; public User ( long id , String name , String email , String country , int age ) { this . id = id ; this . name = name ; this . email = email ; this . country = country ; this . age = age ; } } Since we want to generate a CSV file from a list of users and then return it back to the client for downloading, let's create a dummy service that acts as a data source and returns a list of users. UserService.java package com.attacomsian.exportcsv.data ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.List ; @Service public class UserService { public List < User > listUsers () { List < User > users = new ArrayList <> (); users . add ( new User ( 1 , \"Jack Lee\" , \"jack@example.com\" , \"Germany\" , 35 )); users . add ( new User ( 2 , \"Jovan Srovoki\" , \"jovan@srovoki.me\" , \"Russia\" , 21 )); users . add ( new User ( 3 , \"Atta\" , \"atta@gmail.com\" , \"Pakistan\" , 29 )); return users ; } } The UserService above is just for demo purposes. You may want to populate a list of users from the database or from any other source. Generate & Download CSV File Finally, below is a Spring MVC controller class that handles the export and download of data as a CSV file. UserController.java package com.attacomsian.exportcsv.controllers ; import com.attacomsian.exportcsv.data.User ; import com.attacomsian.exportcsv.data.UserService ; import com.opencsv.CSVWriter ; import com.opencsv.bean.ColumnPositionMappingStrategy ; import com.opencsv.bean.StatefulBeanToCsv ; import com.opencsv.bean.StatefulBeanToCsvBuilder ; import org.springframework.http.HttpHeaders ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.GetMapping ; import javax.servlet.http.HttpServletResponse ; @Controller public class UserController { private UserService userService ; public UserController ( UserService userService ) { this . userService = userService ; } @GetMapping ( \"/export-users\" ) public void exportCSV ( HttpServletResponse response ) throws Exception { String filename = \"users.csv\" ; response . setContentType ( \"text/csv\" ); response . setHeader ( HttpHeaders . CONTENT_DISPOSITION , \"attachment; filename=\\\"\" + filename + \"\\\"\" ); StatefulBeanToCsv < User > writer = new StatefulBeanToCsvBuilder < User > ( response . getWriter ()) . withQuotechar ( CSVWriter . NO_QUOTE_CHARACTER ) . withSeparator ( CSVWriter . DEFAULT_SEPARATOR ) . withOrderedResults ( false ) . build (); writer . write ( userService . listUsers ()); } } The above UserController class contains an exportCSV() method that is mapped to /export-users HTTP route and returns a CSV file as attachment for browser to download. This method does the following: Set the response's content type to text/csv . Use HttpHeaders.CONTENT_DISPOSITION to add \"Content-Disposition\" response header that indicates file attachment to the browser. It also sets the attachment file name to users.csv Use response writer ( response.writer() returns an object of type PrintWriter ) to build an instance of StatefulBeanToCsv . Use write() method of StatefulBeanToCsv instance to write a list of users to CSV file. Afterwards, the data is pushed to the client where the browser downloads the attached users.csv file. Running the Application Below is the main application class used for running Spring Boot project: Application.java package com.attacomsian.exportcsv ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun After Spring Boot application is started, open http://localhost:8080/export-users link in your favorite browser to generate and download users.csv file. Here is content of the generated CSV file: users.csv age,country,email,id,name 35,Germany,jack@example.com,1,Jack Lee 21,Russia,jovan@srovoki.me,2,Jovan Srovoki 29,Pakistan,atta@gmail.com,3,Atta Notice the first line. OpenCSV automatically generated column headers using User class members. Another important thing to note is the order of the columns in the CSV file. OpenCSV sorts the column names in ascending order before writing into the CSV file. OpenCSV Columns Ordering There is no built-in functionality in OpenCSV that allows writing bean to CSV with custom column names and ordering. However, using @CsvBindByPosition annotation, you can control the column positions in the generated CSV file. But the downside of this annotation is that it removes column headers from the generated CSV file. public class User { @CsvBindByPosition ( position = 0 ) private long id ; @CsvBindByPosition ( position = 1 ) private String name ; @CsvBindByPosition ( position = 2 ) private String email ; @CsvBindByPosition ( position = 3 ) private String country ; @CsvBindByPosition ( position = 4 ) private int age ; } @CsvBindByPosition specifies a binding between a column number of the CSV file and a field in a bean. This column number is zero-based (means position starts from 0 ). Source code: Download the complete source code from GitHub available under MIT license. Conclusion That's all for explaining the usage of the OpenCSV library to generate and download a CSV file in Spring Boot. If you are not comfortable with using a 3rd-party library, you can write your own CSV writer. Writing a CSV file is quite similar to writing a text file with few exceptions. If you have any questions or feedback, please feel free to send me a tweet . Happy learning Spring Boot \ud83d\ude0d Further Reading If you like this article, don't forget to read the below CSV-related articles: Uploading and Parsing CSV File using Spring Boot Reading and writing CSV files using OpenCSV Reading and writing CSV files using core Java Reading and writing CSV files using Apache Commons CSV How to read and parse a CSV file in Java \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Export & Download Data as CSV File in Spring Boot"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#project-dependencies","text":"Since Java does not provide native support for creating and parsing CSV files, we will use OpenCSV 3rd-party library for this purpose. Here is how our build.gradle file looks like: build.gradle plugins { id 'org.springframework.boot' version '2.1.3.RELEASE' id 'java' } apply plugin: 'io.spring.dependency-management' group = 'com.attacomsian' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'com.opencsv:opencsv:4.5' } If you are working with a maven project, make sure you include the following maven dependency to the project's pom.xml file: <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 4.5 </version> </dependency>","title":"Project Dependencies"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#user-model","text":"Here is our User model class that will be used to write to a CSV file. User.java package com.attacomsian.exportcsv.data ; import com.opencsv.bean.CsvBindByName ; import com.opencsv.bean.CsvBindByPosition ; public class User { private long id ; private String name ; private String email ; private String country ; private int age ; public User ( long id , String name , String email , String country , int age ) { this . id = id ; this . name = name ; this . email = email ; this . country = country ; this . age = age ; } } Since we want to generate a CSV file from a list of users and then return it back to the client for downloading, let's create a dummy service that acts as a data source and returns a list of users. UserService.java package com.attacomsian.exportcsv.data ; import org.springframework.stereotype.Service ; import java.util.ArrayList ; import java.util.List ; @Service public class UserService { public List < User > listUsers () { List < User > users = new ArrayList <> (); users . add ( new User ( 1 , \"Jack Lee\" , \"jack@example.com\" , \"Germany\" , 35 )); users . add ( new User ( 2 , \"Jovan Srovoki\" , \"jovan@srovoki.me\" , \"Russia\" , 21 )); users . add ( new User ( 3 , \"Atta\" , \"atta@gmail.com\" , \"Pakistan\" , 29 )); return users ; } } The UserService above is just for demo purposes. You may want to populate a list of users from the database or from any other source.","title":"User Model"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#generate-download-csv-file","text":"Finally, below is a Spring MVC controller class that handles the export and download of data as a CSV file. UserController.java package com.attacomsian.exportcsv.controllers ; import com.attacomsian.exportcsv.data.User ; import com.attacomsian.exportcsv.data.UserService ; import com.opencsv.CSVWriter ; import com.opencsv.bean.ColumnPositionMappingStrategy ; import com.opencsv.bean.StatefulBeanToCsv ; import com.opencsv.bean.StatefulBeanToCsvBuilder ; import org.springframework.http.HttpHeaders ; import org.springframework.stereotype.Controller ; import org.springframework.web.bind.annotation.GetMapping ; import javax.servlet.http.HttpServletResponse ; @Controller public class UserController { private UserService userService ; public UserController ( UserService userService ) { this . userService = userService ; } @GetMapping ( \"/export-users\" ) public void exportCSV ( HttpServletResponse response ) throws Exception { String filename = \"users.csv\" ; response . setContentType ( \"text/csv\" ); response . setHeader ( HttpHeaders . CONTENT_DISPOSITION , \"attachment; filename=\\\"\" + filename + \"\\\"\" ); StatefulBeanToCsv < User > writer = new StatefulBeanToCsvBuilder < User > ( response . getWriter ()) . withQuotechar ( CSVWriter . NO_QUOTE_CHARACTER ) . withSeparator ( CSVWriter . DEFAULT_SEPARATOR ) . withOrderedResults ( false ) . build (); writer . write ( userService . listUsers ()); } } The above UserController class contains an exportCSV() method that is mapped to /export-users HTTP route and returns a CSV file as attachment for browser to download. This method does the following: Set the response's content type to text/csv . Use HttpHeaders.CONTENT_DISPOSITION to add \"Content-Disposition\" response header that indicates file attachment to the browser. It also sets the attachment file name to users.csv Use response writer ( response.writer() returns an object of type PrintWriter ) to build an instance of StatefulBeanToCsv . Use write() method of StatefulBeanToCsv instance to write a list of users to CSV file. Afterwards, the data is pushed to the client where the browser downloads the attached users.csv file.","title":"Generate &amp; Download CSV File"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#running-the-application","text":"Below is the main application class used for running Spring Boot project: Application.java package com.attacomsian.exportcsv ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun After Spring Boot application is started, open http://localhost:8080/export-users link in your favorite browser to generate and download users.csv file. Here is content of the generated CSV file: users.csv age,country,email,id,name 35,Germany,jack@example.com,1,Jack Lee 21,Russia,jovan@srovoki.me,2,Jovan Srovoki 29,Pakistan,atta@gmail.com,3,Atta Notice the first line. OpenCSV automatically generated column headers using User class members. Another important thing to note is the order of the columns in the CSV file. OpenCSV sorts the column names in ascending order before writing into the CSV file.","title":"Running the Application"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#opencsv-columns-ordering","text":"There is no built-in functionality in OpenCSV that allows writing bean to CSV with custom column names and ordering. However, using @CsvBindByPosition annotation, you can control the column positions in the generated CSV file. But the downside of this annotation is that it removes column headers from the generated CSV file. public class User { @CsvBindByPosition ( position = 0 ) private long id ; @CsvBindByPosition ( position = 1 ) private String name ; @CsvBindByPosition ( position = 2 ) private String email ; @CsvBindByPosition ( position = 3 ) private String country ; @CsvBindByPosition ( position = 4 ) private int age ; } @CsvBindByPosition specifies a binding between a column number of the CSV file and a field in a bean. This column number is zero-based (means position starts from 0 ). Source code: Download the complete source code from GitHub available under MIT license.","title":"OpenCSV Columns Ordering"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#conclusion","text":"That's all for explaining the usage of the OpenCSV library to generate and download a CSV file in Spring Boot. If you are not comfortable with using a 3rd-party library, you can write your own CSV writer. Writing a CSV file is quite similar to writing a text file with few exceptions. If you have any questions or feedback, please feel free to send me a tweet . Happy learning Spring Boot \ud83d\ude0d","title":"Conclusion"},{"location":"java/Export%20%26%20Download%20Data%20as%20CSV%20File%20in%20Spring%20Boot/#further-reading","text":"If you like this article, don't forget to read the below CSV-related articles: Uploading and Parsing CSV File using Spring Boot Reading and writing CSV files using OpenCSV Reading and writing CSV files using core Java Reading and writing CSV files using Apache Commons CSV How to read and parse a CSV file in Java \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Further Reading"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/","text":"HTTPS in a Spring Boot Setting up HTTPS for Spring Boot requires two steps: Getting an SSL certificate; Configuring SSL in Spring Boot. We can generate an SSL certificate ourselves (self-signed certificate). Its use is intended just for development and testing purposes. In production, we should use a certificate issued by a trusted Certificate Authority (CA). In either case, we're going to see how to enable HTTPS in a Spring Boot application. Examples will be shown both for Spring Boot 1 and Spring Boot 2. Introduction In this tutorial, we're going to: Get an SSL certificate Generate a self-signed SSL certificate Use an existing SSL certificate Enable HTTPS in Spring Boot Redirect HTTP requests to HTTPS Distribute the SSL certificate to clients. If you don't already have a certificate, follow the step 1a. If you have already got an SSL certificate, you can follow the step 1b. Throughout this tutorial, I'll use the following technologies and tools: Java JDK 8 Spring Boot 2.2.2 and Spring Boot 1.5.22 keytool Keytool is a certificate management utility provided together with the JDK, so if you have the JDK installed, you should already have keytool available. To check it, try running the command keytool --help from your Terminal prompt. Note that if you are on Windows, you might need to launch it from the \\bin folder. For more information about this utility, you can read the official documentation . On GitHub, you can find the source code for the application we are building in this tutorial. 1a. Generate a self-signed SSL certificate First of all, we need to generate a pair of cryptographic keys, use them to produce an SSL certificate and store it in a keystore. The keytool documentation defines a keystore as a database of \"cryptographic keys, X.509 certificate chains, and trusted certificates\". To enable HTTPS, we'll provide a Spring Boot application with this keystore containing the SSL certificate. The two most common formats used for keystores are JKS, a proprietary format specific for Java, and PKCS12, an industry-standard format. JKS used to be the default choice, but now Oracle recommends to adopt the PKCS12 format. We're going to see how to use both. Generate an SSL certificate in a keystore Let's open our Terminal prompt and write the following command to create a JKS keystore : keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650 -storepass password To create a PKCS12 keystore , and we should, the command is the following: keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore.p12 -validity 3650 -storepass password Let's have a closer look at the command we just run: genkeypair : generates a key pair; alias : the alias name for the item we are generating; keyalg : the cryptographic algorithm to generate the key pair; keysize : the size of the key. We have used 2048 bits, but 4096 would be a better choice for production; storetype : the type of keystore; keystore : the name of the keystore; validity : validity number of days; storepass : a password for the keystore. When running the previous command, we will be asked to input some information, but we are free to skip all of it (just press Return to skip an option). When asked if the information is correct, we should type yes . Finally, we hit return to use the keystore password as key password as well. What is your first and last name? [Unknown]: What is the name of your organizational unit? [Unknown]: What is the name of your organization? [Unknown]: What is the name of your City or Locality? [Unknown]: What is the name of your State or Province? [Unknown]: What is the two-letter country code for this unit? [Unknown]: Is CN=localhost, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct? [no]: yes Enter key password for <tomcat> (RETURN if same as keystore password): At the end of this operation, we'll get a keystore containing a brand new SSL certificate. Verify the keystore content To check the content of the keystore following the JKS format, we can use keytool again: keytool -list -v -keystore keystore.jks To test the content of a keystore following the PKCS12 format: keytool -list -v -storetype pkcs12 -keystore keystore.p12 Convert a JKS keystore into PKCS12 Should we have already a JKS keystore, we have the option to migrate it to PKCS12; keytool has a convenient command for that: keytool -importkeystore -srckeystore keystore.jks -destkeystore keystore.p12 -deststoretype pkcs12 1b. Use an existing SSL certificate In case we have already got an SSL certificate, for example, one issued by Let's Encrypt , we can import it into a keystore and use it to enable HTTPS in a Spring Boot application. We can use keytool to import our certificate in a new keystore. keytool -import -alias tomcat -file myCertificate.crt -keystore keystore.p12 -storepass password To get more information about the keystore and its format, please refer to the previous section. 2. Enable HTTPS in Spring Boot Whether our keystore contains a self-signed certificate or one issued by a trusted Certificate Authority, we can now set up Spring Boot to accept requests over HTTPS instead of HTTP by using that certificate. The first thing to do is placing the keystore file inside the Spring Boot project. We want to put it in the resources folder or the root folder. Then, we configure the server to use our brand new keystore and enable https. Let's go through the steps both for Spring Boot 1 and Spring Boot 2. Enable HTTPS in Spring Boot 1 Let's open our application.properties file (or application.yml ) and define the following properties: server.port=8443 server.ssl.key-store-type=PKCS12 server.ssl.key-store=classpath:keystore.p12 server.ssl.key-store-password=password server.ssl.key-alias=tomcat security.require-ssl=true application.properties (Spring Boot 1) Enable HTTPS in Spring Boot 2 To enable HTTPS for our Spring Boot 2 application, let's open our application.yml file (or application.properties ) and define the following properties: server: ssl: key-store: classpath:keystore.p12 key-store-password: password key-store-type: pkcs12 key-alias: tomcat key-password: password port: 8443 application.yml (Spring Boot 2) Configuring SSL in Spring Boot Let's have a closer look at the SSL configuration we have just defined in our Spring Boot application properties. server.port : the port on which the server is listening. We have used 8443 rather than the default 8080 port. server.ssl.key-store : the path to the key store that contains the SSL certificate. In our example, we want Spring Boot to look for it in the classpath. server.ssl.key-store-password : the password used to access the key store. server.ssl.key-store-type : the type of the key store (JKS or PKCS12). server.ssl.key-alias : the alias that identifies the key in the key store. server.ssl.key-password : the password used to access the key in the key store. Configure Spring Security to require HTTPS requests When using Spring Security, we can configure it to require automatically block any request coming from a non-secure HTTP channel. In a Spring Boot 1 application, we can achieve that by setting the security.require-ssl property to true , without explicitly touching our Spring Security configuration class. To achieve the same result in a Spring Boot 2 application, we need to extend the WebSecurityConfigurerAdapter class, since the security.require-ssl property has been deprecated. @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http .requiresChannel() .anyRequest() .requiresSecure(); } } SecurityConfig.java (Spring Boot 2) For more information about how to configure SSL in Spring Boot, you can have a look at the Reference Guide . If you want to find out which properties are available to configure SSL, you can refer to the definition in the code-base. Congratulations! You have successfully enabled HTTPS in your Spring Boot application! Give it a try: run the application, open your browser and check if everything works as it should. 3. Redirect HTTP requests to HTTPS Now that we have enabled HTTPS in our Spring Boot application and blocked any HTTP request, we want to redirect all traffic to HTTPS. Spring allows defining just one network connector in application.properties (or application.yml ). Since we have used it for HTTPS, we have to set the HTTP connector programmatically for our Tomcat web server. The implementations for Spring Boot 1 and Spring Boot 2 are almost the same. The only difference is that some classes for server configuration have been renamed in Spring Boot 2. Configuring Tomcat for Spring Boot 1 @Configuration public class ServerConfig { @Bean public EmbeddedServletContainerFactory servletContainer() { TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory() { @Override protected void postProcessContext(Context context) { SecurityConstraint securityConstraint = new SecurityConstraint(); securityConstraint.setUserConstraint(\"CONFIDENTIAL\"); SecurityCollection collection = new SecurityCollection(); collection.addPattern(\"/*\"); securityConstraint.addCollection(collection); context.addConstraint(securityConstraint); } }; tomcat.addAdditionalTomcatConnectors(getHttpConnector()); return tomcat; } private Connector getHttpConnector() { Connector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\"); connector.setScheme(\"http\"); connector.setPort(8080); connector.setSecure(false); connector.setRedirectPort(8443); return connector; } } ServerConfig.java (Spring Boot 1) Configuring Tomcat for Spring Boot 2 @Configuration public class ServerConfig { @Bean public ServletWebServerFactory servletContainer() { TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() { @Override protected void postProcessContext(Context context) { SecurityConstraint securityConstraint = new SecurityConstraint(); securityConstraint.setUserConstraint(\"CONFIDENTIAL\"); SecurityCollection collection = new SecurityCollection(); collection.addPattern(\"/*\"); securityConstraint.addCollection(collection); context.addConstraint(securityConstraint); } }; tomcat.addAdditionalTomcatConnectors(getHttpConnector()); return tomcat; } private Connector getHttpConnector() { Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL); connector.setScheme(\"http\"); connector.setPort(8080); connector.setSecure(false); connector.setRedirectPort(8443); return connector; } } ServerConfig.java (Spring Boot 2) 4. Distribute the SSL certificate to clients When using a self-signed SSL certificate, our browser won't trust our application and will warn the user that it's not secure. And that'll be the same with any other client. It's possible to make a client trust our application by providing it with our certificate. We have stored our certificate inside a keystore, so we need to extract it. Again, keytool supports us very well: keytool -export -keystore keystore.jks -alias tomcat -file myCertificate.crt The keystore can be in JKS or PKCS12 format. During the execution of this command, keytool will ask us for the keystore password that we set at the beginning of this tutorial (the extremely secure password ). Now we can import our certificate into our client. Later, we'll see how to import the certificate into the JRE in case we need it to trust our application. Make a browser trust an SSL certificate When using a keystore in the industry-standard PKCS12 format, we should be able to use it directly without extracting the certificate. I suggest you check the official guide on how to import a PKCS12 file into your specific client. On macOS, for example, we can directly import a certificate into the Keychain Access (which browsers like Safari, Chrome and Opera rely on to manage certificates). If deploying the application on localhost , we may need to do a further step from our browser: enabling insecure connections with localhost . In Firefox, we are shown an alert message. To access the application, we need to explicitly define an exception for it and make Firefox trust the certificate. In Chrome, we can write the following URL in the search bar: chrome://flags/#allow-insecure-localhost and activate the relative option. Import an SSL certificate inside the JRE keystore To make the JRE trust our certificate, we need to import it inside cacerts : the JRE trust store in charge of holding all certificates that can be trusted. First, we need to know the path to our JDK home. A quick way to find it, if we are using Eclipse or STS as our IDE, is by going to Preferences > Java > Installed JREs . If using IntelliJ IDEA, we can access this information by going to Project Structure > SDKs and look at the value of the JDK home path field. On macOS, it could be something like /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home. In the following, we'll refer to this location by using the placeholder $JDK_HOME . Then, from our Terminal prompt, let's insert the following command (we might need to run it with administrator privileges by prefixing it with sudo ): keytool -importcert -file myCertificate.crt -alias tomcat -keystore $JDK_HOME/jre/lib/security/cacerts We'll be asked to input the JRE keystore password. If you have never changed it, it should be the default one: changeit or changeme , depending on the operating system. Finally, keytool will ask if you want to trust this certificate: let's say yes . If everything went right, we'd see the message Certificate was added to keystore . Great! Conclusion In this tutorial, we have seen how to generate a self-signed SSL certificate, how to import an existing certificate into a keystore, how to use it to enable HTTPS inside a Spring Boot application, how to redirect HTTP to HTTPS and how to extract and distribute the certificate to clients. On GitHub, you can find the source code for the application we have built in this tutorial. If you want to protect the access to some resources of your application, consider using Keycloak for the authentication and authorization of the users visiting your Spring Boot or Spring Security application. References Spring Boot Docs - Configure SSL Spring Boot Docs - SSL Configuration Last update: 15/12/2019 Source","title":"HTTPS in a Spring Boot"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#introduction","text":"In this tutorial, we're going to: Get an SSL certificate Generate a self-signed SSL certificate Use an existing SSL certificate Enable HTTPS in Spring Boot Redirect HTTP requests to HTTPS Distribute the SSL certificate to clients. If you don't already have a certificate, follow the step 1a. If you have already got an SSL certificate, you can follow the step 1b. Throughout this tutorial, I'll use the following technologies and tools: Java JDK 8 Spring Boot 2.2.2 and Spring Boot 1.5.22 keytool Keytool is a certificate management utility provided together with the JDK, so if you have the JDK installed, you should already have keytool available. To check it, try running the command keytool --help from your Terminal prompt. Note that if you are on Windows, you might need to launch it from the \\bin folder. For more information about this utility, you can read the official documentation . On GitHub, you can find the source code for the application we are building in this tutorial.","title":"Introduction"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#1a-generate-a-self-signed-ssl-certificate","text":"First of all, we need to generate a pair of cryptographic keys, use them to produce an SSL certificate and store it in a keystore. The keytool documentation defines a keystore as a database of \"cryptographic keys, X.509 certificate chains, and trusted certificates\". To enable HTTPS, we'll provide a Spring Boot application with this keystore containing the SSL certificate. The two most common formats used for keystores are JKS, a proprietary format specific for Java, and PKCS12, an industry-standard format. JKS used to be the default choice, but now Oracle recommends to adopt the PKCS12 format. We're going to see how to use both.","title":"1a. Generate a self-signed SSL certificate"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#generate-an-ssl-certificate-in-a-keystore","text":"Let's open our Terminal prompt and write the following command to create a JKS keystore : keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -keystore keystore.jks -validity 3650 -storepass password To create a PKCS12 keystore , and we should, the command is the following: keytool -genkeypair -alias tomcat -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore keystore.p12 -validity 3650 -storepass password Let's have a closer look at the command we just run: genkeypair : generates a key pair; alias : the alias name for the item we are generating; keyalg : the cryptographic algorithm to generate the key pair; keysize : the size of the key. We have used 2048 bits, but 4096 would be a better choice for production; storetype : the type of keystore; keystore : the name of the keystore; validity : validity number of days; storepass : a password for the keystore. When running the previous command, we will be asked to input some information, but we are free to skip all of it (just press Return to skip an option). When asked if the information is correct, we should type yes . Finally, we hit return to use the keystore password as key password as well. What is your first and last name? [Unknown]: What is the name of your organizational unit? [Unknown]: What is the name of your organization? [Unknown]: What is the name of your City or Locality? [Unknown]: What is the name of your State or Province? [Unknown]: What is the two-letter country code for this unit? [Unknown]: Is CN=localhost, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct? [no]: yes Enter key password for <tomcat> (RETURN if same as keystore password): At the end of this operation, we'll get a keystore containing a brand new SSL certificate.","title":"Generate an SSL certificate in a keystore"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#verify-the-keystore-content","text":"To check the content of the keystore following the JKS format, we can use keytool again: keytool -list -v -keystore keystore.jks To test the content of a keystore following the PKCS12 format: keytool -list -v -storetype pkcs12 -keystore keystore.p12","title":"Verify the keystore content"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#convert-a-jks-keystore-into-pkcs12","text":"Should we have already a JKS keystore, we have the option to migrate it to PKCS12; keytool has a convenient command for that: keytool -importkeystore -srckeystore keystore.jks -destkeystore keystore.p12 -deststoretype pkcs12","title":"Convert a JKS keystore into PKCS12"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#1b-use-an-existing-ssl-certificate","text":"In case we have already got an SSL certificate, for example, one issued by Let's Encrypt , we can import it into a keystore and use it to enable HTTPS in a Spring Boot application. We can use keytool to import our certificate in a new keystore. keytool -import -alias tomcat -file myCertificate.crt -keystore keystore.p12 -storepass password To get more information about the keystore and its format, please refer to the previous section.","title":"1b. Use an existing SSL certificate"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#2-enable-https-in-spring-boot","text":"Whether our keystore contains a self-signed certificate or one issued by a trusted Certificate Authority, we can now set up Spring Boot to accept requests over HTTPS instead of HTTP by using that certificate. The first thing to do is placing the keystore file inside the Spring Boot project. We want to put it in the resources folder or the root folder. Then, we configure the server to use our brand new keystore and enable https. Let's go through the steps both for Spring Boot 1 and Spring Boot 2.","title":"2. Enable HTTPS in Spring Boot"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#enable-https-in-spring-boot-1","text":"Let's open our application.properties file (or application.yml ) and define the following properties: server.port=8443 server.ssl.key-store-type=PKCS12 server.ssl.key-store=classpath:keystore.p12 server.ssl.key-store-password=password server.ssl.key-alias=tomcat security.require-ssl=true application.properties (Spring Boot 1)","title":"Enable HTTPS in Spring Boot 1"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#enable-https-in-spring-boot-2","text":"To enable HTTPS for our Spring Boot 2 application, let's open our application.yml file (or application.properties ) and define the following properties: server: ssl: key-store: classpath:keystore.p12 key-store-password: password key-store-type: pkcs12 key-alias: tomcat key-password: password port: 8443 application.yml (Spring Boot 2)","title":"Enable HTTPS in Spring Boot 2"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#configuring-ssl-in-spring-boot","text":"Let's have a closer look at the SSL configuration we have just defined in our Spring Boot application properties. server.port : the port on which the server is listening. We have used 8443 rather than the default 8080 port. server.ssl.key-store : the path to the key store that contains the SSL certificate. In our example, we want Spring Boot to look for it in the classpath. server.ssl.key-store-password : the password used to access the key store. server.ssl.key-store-type : the type of the key store (JKS or PKCS12). server.ssl.key-alias : the alias that identifies the key in the key store. server.ssl.key-password : the password used to access the key in the key store.","title":"Configuring SSL in Spring Boot"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#configure-spring-security-to-require-https-requests","text":"When using Spring Security, we can configure it to require automatically block any request coming from a non-secure HTTP channel. In a Spring Boot 1 application, we can achieve that by setting the security.require-ssl property to true , without explicitly touching our Spring Security configuration class. To achieve the same result in a Spring Boot 2 application, we need to extend the WebSecurityConfigurerAdapter class, since the security.require-ssl property has been deprecated. @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http .requiresChannel() .anyRequest() .requiresSecure(); } } SecurityConfig.java (Spring Boot 2) For more information about how to configure SSL in Spring Boot, you can have a look at the Reference Guide . If you want to find out which properties are available to configure SSL, you can refer to the definition in the code-base. Congratulations! You have successfully enabled HTTPS in your Spring Boot application! Give it a try: run the application, open your browser and check if everything works as it should.","title":"Configure Spring Security to require HTTPS requests"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#3-redirect-http-requests-to-https","text":"Now that we have enabled HTTPS in our Spring Boot application and blocked any HTTP request, we want to redirect all traffic to HTTPS. Spring allows defining just one network connector in application.properties (or application.yml ). Since we have used it for HTTPS, we have to set the HTTP connector programmatically for our Tomcat web server. The implementations for Spring Boot 1 and Spring Boot 2 are almost the same. The only difference is that some classes for server configuration have been renamed in Spring Boot 2.","title":"3. Redirect HTTP requests to HTTPS"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#configuring-tomcat-for-spring-boot-1","text":"@Configuration public class ServerConfig { @Bean public EmbeddedServletContainerFactory servletContainer() { TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory() { @Override protected void postProcessContext(Context context) { SecurityConstraint securityConstraint = new SecurityConstraint(); securityConstraint.setUserConstraint(\"CONFIDENTIAL\"); SecurityCollection collection = new SecurityCollection(); collection.addPattern(\"/*\"); securityConstraint.addCollection(collection); context.addConstraint(securityConstraint); } }; tomcat.addAdditionalTomcatConnectors(getHttpConnector()); return tomcat; } private Connector getHttpConnector() { Connector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\"); connector.setScheme(\"http\"); connector.setPort(8080); connector.setSecure(false); connector.setRedirectPort(8443); return connector; } } ServerConfig.java (Spring Boot 1)","title":"Configuring Tomcat for Spring Boot 1"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#configuring-tomcat-for-spring-boot-2","text":"@Configuration public class ServerConfig { @Bean public ServletWebServerFactory servletContainer() { TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() { @Override protected void postProcessContext(Context context) { SecurityConstraint securityConstraint = new SecurityConstraint(); securityConstraint.setUserConstraint(\"CONFIDENTIAL\"); SecurityCollection collection = new SecurityCollection(); collection.addPattern(\"/*\"); securityConstraint.addCollection(collection); context.addConstraint(securityConstraint); } }; tomcat.addAdditionalTomcatConnectors(getHttpConnector()); return tomcat; } private Connector getHttpConnector() { Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL); connector.setScheme(\"http\"); connector.setPort(8080); connector.setSecure(false); connector.setRedirectPort(8443); return connector; } } ServerConfig.java (Spring Boot 2)","title":"Configuring Tomcat for Spring Boot 2"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#4-distribute-the-ssl-certificate-to-clients","text":"When using a self-signed SSL certificate, our browser won't trust our application and will warn the user that it's not secure. And that'll be the same with any other client. It's possible to make a client trust our application by providing it with our certificate. We have stored our certificate inside a keystore, so we need to extract it. Again, keytool supports us very well: keytool -export -keystore keystore.jks -alias tomcat -file myCertificate.crt The keystore can be in JKS or PKCS12 format. During the execution of this command, keytool will ask us for the keystore password that we set at the beginning of this tutorial (the extremely secure password ). Now we can import our certificate into our client. Later, we'll see how to import the certificate into the JRE in case we need it to trust our application.","title":"4. Distribute the SSL certificate to clients"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#make-a-browser-trust-an-ssl-certificate","text":"When using a keystore in the industry-standard PKCS12 format, we should be able to use it directly without extracting the certificate. I suggest you check the official guide on how to import a PKCS12 file into your specific client. On macOS, for example, we can directly import a certificate into the Keychain Access (which browsers like Safari, Chrome and Opera rely on to manage certificates). If deploying the application on localhost , we may need to do a further step from our browser: enabling insecure connections with localhost . In Firefox, we are shown an alert message. To access the application, we need to explicitly define an exception for it and make Firefox trust the certificate. In Chrome, we can write the following URL in the search bar: chrome://flags/#allow-insecure-localhost and activate the relative option.","title":"Make a browser trust an SSL certificate"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#import-an-ssl-certificate-inside-the-jre-keystore","text":"To make the JRE trust our certificate, we need to import it inside cacerts : the JRE trust store in charge of holding all certificates that can be trusted. First, we need to know the path to our JDK home. A quick way to find it, if we are using Eclipse or STS as our IDE, is by going to Preferences > Java > Installed JREs . If using IntelliJ IDEA, we can access this information by going to Project Structure > SDKs and look at the value of the JDK home path field. On macOS, it could be something like /Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home. In the following, we'll refer to this location by using the placeholder $JDK_HOME . Then, from our Terminal prompt, let's insert the following command (we might need to run it with administrator privileges by prefixing it with sudo ): keytool -importcert -file myCertificate.crt -alias tomcat -keystore $JDK_HOME/jre/lib/security/cacerts We'll be asked to input the JRE keystore password. If you have never changed it, it should be the default one: changeit or changeme , depending on the operating system. Finally, keytool will ask if you want to trust this certificate: let's say yes . If everything went right, we'd see the message Certificate was added to keystore . Great!","title":"Import an SSL certificate inside the JRE keystore"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#conclusion","text":"In this tutorial, we have seen how to generate a self-signed SSL certificate, how to import an existing certificate into a keystore, how to use it to enable HTTPS inside a Spring Boot application, how to redirect HTTP to HTTPS and how to extract and distribute the certificate to clients. On GitHub, you can find the source code for the application we have built in this tutorial. If you want to protect the access to some resources of your application, consider using Keycloak for the authentication and authorization of the users visiting your Spring Boot or Spring Security application.","title":"Conclusion"},{"location":"java/HTTPS%20in%20a%20Spring%20Boot/#references","text":"Spring Boot Docs - Configure SSL Spring Boot Docs - SSL Configuration Last update: 15/12/2019 Source","title":"References"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/","text":"Integration Testing in Spring | Baeldung 1. Overview Integration testing plays an important role in the application development cycle by verifying the end-to-end behavior of a system. In this article, we'll see how we can leverage the Spring MVC test framework in order to write and run integration tests that test controllers without explicitly starting a Servlet container. 2. Preparation Several Maven dependencies are required for running the integration tests we'll use in this article. First and foremost, we'll need the latest junit-jupiter-engine , junit-jupiter-api , and Spring test dependencies: <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-engine </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-api </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.3.3 </version> <scope> test </scope> </dependency> For effective asserting of results, we're going to also use Hamcrest and JSON path : <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-library </artifactId> <version> 2.2 </version> <scope> test </scope> </dependency> <dependency> <groupId> com.jayway.jsonpath </groupId> <artifactId> json-path </artifactId> <version> 2.5.0 </version> <scope> test </scope> </dependency> 3. Spring MVC Test Configuration Let's now introduce how to configure and run the Spring enabled tests. 3.1. Enable Spring in Tests with JUnit 5 JUnit 5 defines an extension interface through which classes can integrate with the JUnit test. We can enable this extension by adding the @ExtendWith annotation to our test classes and specifying the extension class to load . To run the Spring test, we use SpringExtension.class. We also need the @ContextConfiguration annotation to load the context configuration and bootstrap the context that our test will use . Let's have a look: @ExtendWith ( SpringExtension . class ) @ContextConfiguration ( classes = { ApplicationConfig . class }) @WebAppConfiguration public class GreetControllerIntegrationTest { .... } Notice how, in @ContextConfiguration, we provide the ApplicationConfig.class config class, which loads the configuration we need for this particular test. We use a Java configuration class here to specify the context configuration. Similarly, we can use the XML-based configuration: @ContextConfiguration ( locations = { \"\" }) Finally, we also annotate the test with @ WebAppConfiguration , which will load the web application context . By default, it looks for the root web application at path src/main/webapp. We can override this location by simply passing the value attribute: @WebAppConfiguration ( value = \"\" ) 3.2. The WebApplicationContext Object WebApplicationContext provides a web application configuration. It loads all the application beans and controllers into the context. We'll now be able to wire the web application context right into the test: @Autowired private WebApplicationContext webApplicationContext ; 3.3. Mocking Web Context Beans MockMvc provides support for Spring MVC testing. It encapsulates all web application beans and makes them available for testing. Let's see how to use it: private MockMvc mockMvc ; @BeforeEach public void setup () throws Exception { this . mockMvc = MockMvcBuilders . webAppContextSetup ( this . webApplicationContext ). build (); } We initialize the mockMvc object in the @BeforeEach annotated method so that we don't have to initialize it inside every test. 3.4. Verify Test Configuration Let's verify that we're loading the WebApplicationContext object ( webApplicationContext ) properly. We'll also check that the right servletContext is being attached: @Test public void givenWac_whenServletContext_thenItProvidesGreetController () { ServletContext servletContext = webApplicationContext . getServletContext (); Assert . assertNotNull ( servletContext ); Assert . assertTrue ( servletContext instanceof MockServletContext ); Assert . assertNotNull ( webApplicationContext . getBean ( \"greetController\" )); } Notice that we're also checking that a GreetController.java bean exists in the web context. This ensures that Spring beans are loaded properly. At this point, the setup of the integration test is done. Now, let's see how we can test resource methods using the MockMvc object. 4. Writing Integration Tests In this section, we'll go over the basic operations available through the test framework. We'll show how to send requests with path variables and parameters. Also, we'll follow with a few examples that show how to assert that the proper view name is resolved, or that the response body is as expected. The snippets that are shown below use static imports from M ockMvcRequestBuilders or MockMvcResultMatchers classes. 4.1. Verify View Name We can invoke the /homePage endpoint from our test as : http://localhost:8080/spring-mvc-test/ or http://localhost:8080/spring-mvc-test/homePage First, let's see the test code: @Test public void givenHomePageURI_whenMockMVC_thenReturnsIndexJSPViewName () { this . mockMvc . perform ( get ( \"/homePage\" )). andDo ( print ()) . andExpect ( view (). name ( \"index\" )); } Let's break it down: perform() method will call a GET request method, which returns the ResultActions . Using this result, we can have assertion expectations about the response, like its content, HTTP status, or header andDo(print()) will print the request and response. This is helpful to get a detailed view in case of an error andExpect() will expect the provided argument. In our case, we're expecting \u201cindex\u201d to be returned via MockMvcResultMatchers.view() 4.2. Verify Response Body We'll invoke the /greet endpoint from our test as: http://localhost:8080/spring-mvc-test/greet The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } Let's see the test code: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () { MvcResult mvcResult = this . mockMvc . perform ( get ( \"/greet\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); Assert . assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } Let's see exactly what's going on: andExpect(MockMvcResultMatchers.status().isOk()) will verify that response HTTP status is Ok ( 200) . This ensures that the request was successfully executed andExpect(MockMvcResultMatchers.jsonPath(\u201c$.message\u201d).value(\u201cHello World!!!\u201d)) will verify that response content matches with the argument \u201c Hello World!!! \u201c. Here, we used jsonPath , which extracts response content and provides the requested value andReturn() will return the MvcResult object, which is used when we have to verify something that isn't directly achievable by the library. In this case, we've added assertEquals to match the content type of the response that is extracted from the MvcResult object 4. 3. Send GET Request With Path Variable We'll invoke the /greetWithPathVariable/{name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPathVariable/John The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John!!!\" } Let's see the test code: @Test public void givenGreetURIWithPathVariable_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithPathVariable/{name}\" , \"John\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John!!!\" )); } MockMvcRequestBuilders.get(\u201c/greetWithPathVariable/{name}\u201d, \u201cJohn\u201d) will send a request as \u201c /greetWithPathVariable/John \u201c. This becomes easier with respect to readability and knowing what parameters are dynamically set in the URL. Note that we can pass as many path parameters as needed. 4.4. Send GET Request With Query Parameters We'll invoke the /greetWithQueryVariable?name={name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithQueryVariable?name=John%20Doe In this case, the expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Now, let's see the test code: @Test public void givenGreetURIWithQueryParameter_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithQueryVariable\" ) . param ( \"name\" , \"John Doe\" )). andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John Doe!!!\" )); } param(\u201cname\u201d, \u201cJohn Doe\u201d) will append the query parameter in the GET request . This is similar to \u201c /greetWithQueryVariable?name=John%20Doe \u201c. The query parameter can also be implemented using the URI template style: this . mockMvc . perform ( get ( \"/greetWithQueryVariable?name={name}\" , \"John Doe\" )); 4.5. Send POST Request We'll invoke the /greetWithPost endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPost We should obtain as output: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } And our test code is: @Test public void givenGreetURIWithPost_whenMockMVC_thenVerifyResponse () { this . mockMvc . perform ( post ( \"/greetWithPost\" )). andDo ( print ()) . andExpect ( status (). isOk ()). andExpect ( content () . contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )); } MockMvcRequestBuilders.post(\u201c/greetWithPost\u201d) will send the POST request . We can set path variables and query parameters in a similar way as before, whereas form data can be set only via the param() method, similar to query parameters as: http://localhost:8080/spring-mvc-test/greetWithPostAndFormData Then, the data will be: id= 1 ; na me=Joh n % 20 Doe So, we should get: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Let's see our test: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () throws Exception { MvcResult mvcResult = this . mockMvc . perform ( MockMvcRequestBuilders . get ( \"/greet\" )) . andDo ( print ()) . andExpect ( MockMvcResultMatchers . status (). isOk ()) . andExpect ( MockMvcResultMatchers . jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } In the above code snippet, we've added two parameters: id as \u201c1\u201d and name as \u201cJohn Doe\u201d. 5. MockMvc Limitations MockMvc provides an elegant and easy-to-use API to call web endpoints and to inspect and assert their response at the same time. Despite all its benefits, it has a few limitations. First of all, it does use a subclass of the DispatcherServlet to handle test requests. To be more specific, the TestDispatcherServlet is responsible for calling controllers and performing all of the familiar Spring magic. The MockMvc class wraps this TestDispatcherServlet internally. So, every time we send a request using the perform() method, MockMvc will use the underlying TestDispatcherServlet directly. Therefore, there are no real network connections made, and consequently, we won't test the whole network stack while using MockMvc . Also, because Spring prepares a fake web application context to mock the HTTP requests and responses, it may not support all features of a full-blown Spring application . For example, this mock setup does not support HTTP redirections . This may not seem that significant at first. However, Spring Boot handles some errors by redirecting the current request to the /error endpoint. So, if we're using the MockMvc, we may not be able to test some API failures. As an alternative to MockMvc, we can set up a more real application contextand then use RestTemplate or even REST-assured to test our application. For instance, this is easy using Spring Boot: @SpringBootTest ( webEnvironment = DEFINED_PORT ) public class GreetControllerRealIntegrationTest { @Before public void setUp () { RestAssured . port = DEFAULT_PORT ; } @Test public void givenGreetURI_whenSendingReq_thenVerifyResponse () { given (). get ( \"/greet\" ) . then () . statusCode ( 200 ); } } Here, we don't even need to add the @ExtendWith(SpringExtension.class) . This way, every test will make a real HTTP request to the application that listens on a random TCP port. 6. Conclusion In this tutorial, we implemented a few simple Spring-enabled integration tests. We also looked at the WebApplicationContext and MockMvc object creation, which played an important role in calling the endpoints of the application. Looking further, we covered how we can send GET and POST requests with variations of parameter passing and how to verify the HTTP response status, header, and content. As a closing remark, we did also evaluate some limitations of MockMvc. Knowing those limitations can guide us to make an informed decision about how we're going to implement our tests. Finally, the implementation of all these examples and code snippets is available over on GitHub . Get started with Spring 5 and Spring Boot 2, through the Learn Spring course: >> THE COURSE Source","title":"Integration Testing in Spring   Baeldung"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#1-overview","text":"Integration testing plays an important role in the application development cycle by verifying the end-to-end behavior of a system. In this article, we'll see how we can leverage the Spring MVC test framework in order to write and run integration tests that test controllers without explicitly starting a Servlet container.","title":"1. Overview"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#2-preparation","text":"Several Maven dependencies are required for running the integration tests we'll use in this article. First and foremost, we'll need the latest junit-jupiter-engine , junit-jupiter-api , and Spring test dependencies: <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-engine </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.junit.jupiter </groupId> <artifactId> junit-jupiter-api </artifactId> <version> 5.7.0 </version> <scope> test </scope> </dependency> <dependency> <groupId> org.springframework </groupId> <artifactId> spring-test </artifactId> <version> 5.3.3 </version> <scope> test </scope> </dependency> For effective asserting of results, we're going to also use Hamcrest and JSON path : <dependency> <groupId> org.hamcrest </groupId> <artifactId> hamcrest-library </artifactId> <version> 2.2 </version> <scope> test </scope> </dependency> <dependency> <groupId> com.jayway.jsonpath </groupId> <artifactId> json-path </artifactId> <version> 2.5.0 </version> <scope> test </scope> </dependency>","title":"2. Preparation"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#3-spring-mvc-test-configuration","text":"Let's now introduce how to configure and run the Spring enabled tests.","title":"3. Spring MVC Test Configuration"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#31-enable-spring-in-tests-with-junit-5","text":"JUnit 5 defines an extension interface through which classes can integrate with the JUnit test. We can enable this extension by adding the @ExtendWith annotation to our test classes and specifying the extension class to load . To run the Spring test, we use SpringExtension.class. We also need the @ContextConfiguration annotation to load the context configuration and bootstrap the context that our test will use . Let's have a look: @ExtendWith ( SpringExtension . class ) @ContextConfiguration ( classes = { ApplicationConfig . class }) @WebAppConfiguration public class GreetControllerIntegrationTest { .... } Notice how, in @ContextConfiguration, we provide the ApplicationConfig.class config class, which loads the configuration we need for this particular test. We use a Java configuration class here to specify the context configuration. Similarly, we can use the XML-based configuration: @ContextConfiguration ( locations = { \"\" }) Finally, we also annotate the test with @ WebAppConfiguration , which will load the web application context . By default, it looks for the root web application at path src/main/webapp. We can override this location by simply passing the value attribute: @WebAppConfiguration ( value = \"\" )","title":"3.1. Enable Spring in Tests with JUnit 5"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#32-the-webapplicationcontext-object","text":"WebApplicationContext provides a web application configuration. It loads all the application beans and controllers into the context. We'll now be able to wire the web application context right into the test: @Autowired private WebApplicationContext webApplicationContext ;","title":"3.2. The WebApplicationContext Object"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#33-mocking-web-context-beans","text":"MockMvc provides support for Spring MVC testing. It encapsulates all web application beans and makes them available for testing. Let's see how to use it: private MockMvc mockMvc ; @BeforeEach public void setup () throws Exception { this . mockMvc = MockMvcBuilders . webAppContextSetup ( this . webApplicationContext ). build (); } We initialize the mockMvc object in the @BeforeEach annotated method so that we don't have to initialize it inside every test.","title":"3.3. Mocking Web Context Beans"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#34-verify-test-configuration","text":"Let's verify that we're loading the WebApplicationContext object ( webApplicationContext ) properly. We'll also check that the right servletContext is being attached: @Test public void givenWac_whenServletContext_thenItProvidesGreetController () { ServletContext servletContext = webApplicationContext . getServletContext (); Assert . assertNotNull ( servletContext ); Assert . assertTrue ( servletContext instanceof MockServletContext ); Assert . assertNotNull ( webApplicationContext . getBean ( \"greetController\" )); } Notice that we're also checking that a GreetController.java bean exists in the web context. This ensures that Spring beans are loaded properly. At this point, the setup of the integration test is done. Now, let's see how we can test resource methods using the MockMvc object.","title":"3.4. Verify Test Configuration"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#4-writing-integration-tests","text":"In this section, we'll go over the basic operations available through the test framework. We'll show how to send requests with path variables and parameters. Also, we'll follow with a few examples that show how to assert that the proper view name is resolved, or that the response body is as expected. The snippets that are shown below use static imports from M ockMvcRequestBuilders or MockMvcResultMatchers classes.","title":"4. Writing Integration Tests"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#41-verify-view-name","text":"We can invoke the /homePage endpoint from our test as : http://localhost:8080/spring-mvc-test/ or http://localhost:8080/spring-mvc-test/homePage First, let's see the test code: @Test public void givenHomePageURI_whenMockMVC_thenReturnsIndexJSPViewName () { this . mockMvc . perform ( get ( \"/homePage\" )). andDo ( print ()) . andExpect ( view (). name ( \"index\" )); } Let's break it down: perform() method will call a GET request method, which returns the ResultActions . Using this result, we can have assertion expectations about the response, like its content, HTTP status, or header andDo(print()) will print the request and response. This is helpful to get a detailed view in case of an error andExpect() will expect the provided argument. In our case, we're expecting \u201cindex\u201d to be returned via MockMvcResultMatchers.view()","title":"4.1. Verify View Name"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#42-verify-response-body","text":"We'll invoke the /greet endpoint from our test as: http://localhost:8080/spring-mvc-test/greet The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } Let's see the test code: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () { MvcResult mvcResult = this . mockMvc . perform ( get ( \"/greet\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); Assert . assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } Let's see exactly what's going on: andExpect(MockMvcResultMatchers.status().isOk()) will verify that response HTTP status is Ok ( 200) . This ensures that the request was successfully executed andExpect(MockMvcResultMatchers.jsonPath(\u201c$.message\u201d).value(\u201cHello World!!!\u201d)) will verify that response content matches with the argument \u201c Hello World!!! \u201c. Here, we used jsonPath , which extracts response content and provides the requested value andReturn() will return the MvcResult object, which is used when we have to verify something that isn't directly achievable by the library. In this case, we've added assertEquals to match the content type of the response that is extracted from the MvcResult object","title":"4.2. Verify Response Body"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#43-send-get-request-with-path-variable","text":"We'll invoke the /greetWithPathVariable/{name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPathVariable/John The expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John!!!\" } Let's see the test code: @Test public void givenGreetURIWithPathVariable_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithPathVariable/{name}\" , \"John\" )) . andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John!!!\" )); } MockMvcRequestBuilders.get(\u201c/greetWithPathVariable/{name}\u201d, \u201cJohn\u201d) will send a request as \u201c /greetWithPathVariable/John \u201c. This becomes easier with respect to readability and knowing what parameters are dynamically set in the URL. Note that we can pass as many path parameters as needed.","title":"4.3. Send GET Request With Path Variable"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#44-send-get-request-with-query-parameters","text":"We'll invoke the /greetWithQueryVariable?name={name} endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithQueryVariable?name=John%20Doe In this case, the expected output will be: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Now, let's see the test code: @Test public void givenGreetURIWithQueryParameter_whenMockMVC_thenResponseOK () { this . mockMvc . perform ( get ( \"/greetWithQueryVariable\" ) . param ( \"name\" , \"John Doe\" )). andDo ( print ()). andExpect ( status (). isOk ()) . andExpect ( content (). contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World John Doe!!!\" )); } param(\u201cname\u201d, \u201cJohn Doe\u201d) will append the query parameter in the GET request . This is similar to \u201c /greetWithQueryVariable?name=John%20Doe \u201c. The query parameter can also be implemented using the URI template style: this . mockMvc . perform ( get ( \"/greetWithQueryVariable?name={name}\" , \"John Doe\" ));","title":"4.4. Send GET Request With Query Parameters"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#45-send-post-request","text":"We'll invoke the /greetWithPost endpoint from our test as: http://localhost:8080/spring-mvc-test/greetWithPost We should obtain as output: { \"id\" : 1 , \"message\" : \"Hello World!!!\" } And our test code is: @Test public void givenGreetURIWithPost_whenMockMVC_thenVerifyResponse () { this . mockMvc . perform ( post ( \"/greetWithPost\" )). andDo ( print ()) . andExpect ( status (). isOk ()). andExpect ( content () . contentType ( \"application/json;charset=UTF-8\" )) . andExpect ( jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )); } MockMvcRequestBuilders.post(\u201c/greetWithPost\u201d) will send the POST request . We can set path variables and query parameters in a similar way as before, whereas form data can be set only via the param() method, similar to query parameters as: http://localhost:8080/spring-mvc-test/greetWithPostAndFormData Then, the data will be: id= 1 ; na me=Joh n % 20 Doe So, we should get: { \"id\" : 1 , \"message\" : \"Hello World John Doe!!!\" } Let's see our test: @Test public void givenGreetURI_whenMockMVC_thenVerifyResponse () throws Exception { MvcResult mvcResult = this . mockMvc . perform ( MockMvcRequestBuilders . get ( \"/greet\" )) . andDo ( print ()) . andExpect ( MockMvcResultMatchers . status (). isOk ()) . andExpect ( MockMvcResultMatchers . jsonPath ( \"$.message\" ). value ( \"Hello World!!!\" )) . andReturn (); assertEquals ( \"application/json;charset=UTF-8\" , mvcResult . getResponse (). getContentType ()); } In the above code snippet, we've added two parameters: id as \u201c1\u201d and name as \u201cJohn Doe\u201d.","title":"4.5. Send POST Request"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#5-mockmvc-limitations","text":"MockMvc provides an elegant and easy-to-use API to call web endpoints and to inspect and assert their response at the same time. Despite all its benefits, it has a few limitations. First of all, it does use a subclass of the DispatcherServlet to handle test requests. To be more specific, the TestDispatcherServlet is responsible for calling controllers and performing all of the familiar Spring magic. The MockMvc class wraps this TestDispatcherServlet internally. So, every time we send a request using the perform() method, MockMvc will use the underlying TestDispatcherServlet directly. Therefore, there are no real network connections made, and consequently, we won't test the whole network stack while using MockMvc . Also, because Spring prepares a fake web application context to mock the HTTP requests and responses, it may not support all features of a full-blown Spring application . For example, this mock setup does not support HTTP redirections . This may not seem that significant at first. However, Spring Boot handles some errors by redirecting the current request to the /error endpoint. So, if we're using the MockMvc, we may not be able to test some API failures. As an alternative to MockMvc, we can set up a more real application contextand then use RestTemplate or even REST-assured to test our application. For instance, this is easy using Spring Boot: @SpringBootTest ( webEnvironment = DEFINED_PORT ) public class GreetControllerRealIntegrationTest { @Before public void setUp () { RestAssured . port = DEFAULT_PORT ; } @Test public void givenGreetURI_whenSendingReq_thenVerifyResponse () { given (). get ( \"/greet\" ) . then () . statusCode ( 200 ); } } Here, we don't even need to add the @ExtendWith(SpringExtension.class) . This way, every test will make a real HTTP request to the application that listens on a random TCP port.","title":"5. MockMvc Limitations"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#6-conclusion","text":"In this tutorial, we implemented a few simple Spring-enabled integration tests. We also looked at the WebApplicationContext and MockMvc object creation, which played an important role in calling the endpoints of the application. Looking further, we covered how we can send GET and POST requests with variations of parameter passing and how to verify the HTTP response status, header, and content. As a closing remark, we did also evaluate some limitations of MockMvc. Knowing those limitations can guide us to make an informed decision about how we're going to implement our tests. Finally, the implementation of all these examples and code snippets is available over on GitHub .","title":"6. Conclusion"},{"location":"java/Integration%20Testing%20in%20Spring%20_%20Baeldung/#get-started-with-spring-5-and-spring-boot-2-through-the-learn-spring-course","text":">> THE COURSE Source","title":"Get started with Spring 5 and Spring Boot 2, through the Learn Spring course:"},{"location":"java/JVM%20settings/","text":"JVM settings JVM settings list name option Country -Duser.country=US Language -Duser.language=en Skip tets -Dmaven.test.skip=true Spring profiles -Dspring.profiles.active=\"dev,it\"","title":"JVM settings"},{"location":"java/JVM%20settings/#jvm-settings-list","text":"name option Country -Duser.country=US Language -Duser.language=en Skip tets -Dmaven.test.skip=true Spring profiles -Dspring.profiles.active=\"dev,it\"","title":"JVM settings list"},{"location":"java/Jackson%20XML%20annotations/","text":"Jackson XML annotations Jackson XML annotations @JacksonXmlElementWrapper Allows specifying XML element to use for wrapping List and Map properties; or disabling use (with 'useWrapping' set to false). Properties: namespace (default: \"\"): Which XML namespace to use for wrapper element (defaults to: \"\") localName : Local name for wrapper element useWrapping (default:true) Whether to use wrapper element or not: by specifying 'false' one can disable use @JacksonXmlProperty Allows specifying XML namespace and local name for a property; as well as whether property is to be written as an XML element or attribute. Properties: namespace (default: \"\"): Which XML namespace to use for property element or attribute localName : Local name of property element or attribute isAttribute (default: false): Whether property should be serialized as an attribute (true) or element (false) @JacksonXmlRootElement Allows specifying XML element to use for wrapping the root element (default uses 'simple name' of the value class). This only needs to be used for objects serialized as root values: for other values property name is used; for root values there is no referring property and separate annotation is needed on class itself. Properties: namespace (default: \"\"): Which XML namespace to use for root element localName : Local name of root element @JacksonXmlText Allows specifying that value of one property is to be serialized as \"unwrapped\" text, and not in an element. Properties: value (default: true): Whether annotated property value is to be serialized as basic XML text (without surrounding XML element) or not. Source","title":"Jackson XML annotations"},{"location":"java/Jackson%20XML%20annotations/#jackson-xml-annotations","text":"","title":"Jackson XML annotations"},{"location":"java/Jackson%20XML%20annotations/#jacksonxmlelementwrapper","text":"Allows specifying XML element to use for wrapping List and Map properties; or disabling use (with 'useWrapping' set to false). Properties: namespace (default: \"\"): Which XML namespace to use for wrapper element (defaults to: \"\") localName : Local name for wrapper element useWrapping (default:true) Whether to use wrapper element or not: by specifying 'false' one can disable use","title":"@JacksonXmlElementWrapper"},{"location":"java/Jackson%20XML%20annotations/#jacksonxmlproperty","text":"Allows specifying XML namespace and local name for a property; as well as whether property is to be written as an XML element or attribute. Properties: namespace (default: \"\"): Which XML namespace to use for property element or attribute localName : Local name of property element or attribute isAttribute (default: false): Whether property should be serialized as an attribute (true) or element (false)","title":"@JacksonXmlProperty"},{"location":"java/Jackson%20XML%20annotations/#jacksonxmlrootelement","text":"Allows specifying XML element to use for wrapping the root element (default uses 'simple name' of the value class). This only needs to be used for objects serialized as root values: for other values property name is used; for root values there is no referring property and separate annotation is needed on class itself. Properties: namespace (default: \"\"): Which XML namespace to use for root element localName : Local name of root element","title":"@JacksonXmlRootElement"},{"location":"java/Jackson%20XML%20annotations/#jacksonxmltext","text":"Allows specifying that value of one property is to be serialized as \"unwrapped\" text, and not in an element. Properties: value (default: true): Whether annotated property value is to be serialized as basic XML text (without surrounding XML element) or not. Source","title":"@JacksonXmlText"},{"location":"java/Java%20Stream%20API/","text":"Java Stream API \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e Java 8 \u0432\u044b\u0448\u043b\u0430 \u0443\u0436\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u0430\u0432\u043d\u043e, \u0434\u0430\u043b\u0435\u043a\u043e \u043d\u0435 \u0432\u0441\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0435\u0451 \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0433\u043e-\u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0441 Java 7 \u0438\u043b\u0438 \u0434\u0430\u0436\u0435 Java 6, \u043a\u043e\u0433\u043e-\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0441\u0432\u043e\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 GWT, \u043a\u0442\u043e-\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u043e\u0434 Android \u0438 \u043d\u0435 \u0445\u043e\u0447\u0435\u0442 \u0438\u043b\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043b\u044f\u043c\u0431\u0434 \u0438 Stream Api. \u041e\u0434\u043d\u0430\u043a\u043e \u0437\u043d\u0430\u043d\u0438\u0435 \u043b\u044f\u043c\u0431\u0434 \u0438 Stream Api \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u0430 Java \u0437\u0430\u0447\u0430\u0441\u0442\u0443\u044e \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u043d\u0430 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u043d\u0443 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043d\u0430 \u043f\u0440\u043e\u0435\u043a\u0442 \u0433\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f Java 8. \u042f \u0445\u043e\u0442\u0435\u043b \u0431\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0432\u0430\u043c \u043a\u0440\u0430\u0442\u043a\u0443\u044e \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0443 \u043f\u043e Stream Api \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0441 \u043d\u043e\u0432\u044b\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c. \u0417\u043d\u0430\u043d\u0438\u044f \u043b\u044f\u043c\u0431\u0434 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f (\u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u043b\u0441\u044f \u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u0435 \u0431\u044b\u043b\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u043e), \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u043d\u0438\u044f Java \u0438 \u0432\u044b\u0448\u0435. \u0422\u0430\u043a\u0436\u0435, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430, \u0441\u0442\u0430\u0442\u044c\u044f \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430 \u0438\u043b\u0438 \u0438\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c Java Stream Api. \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u0430\u043d\u043e \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0430\u0442\u044c\u0438. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Stream Api Stream API \u044d\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435. \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e stream \u0432 Java 8 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438, \u043d\u043e \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u044d\u0442\u043e\u0442 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. Stream Api \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0441\u0442\u0438\u043b\u0435 SQL, \u0442\u043e \u0435\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0435\u0448\u0430\u043b\u0430\u0441\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c: Integer sumOddOld = 0 ; for ( Integer i : collection ) { if ( i % 2 != 0 ) { sumOddOld += i ; } } \u0422\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream Api \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0438\u043b\u0435: Integer sumOdd = collection . stream (). filter ( o -> o % 2 != 0 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, Stream Api \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0448\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e \u043b\u0438\u0448\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0432 stream() \u043d\u0430 parallelStream() \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u043e\u0433\u043e \u043b\u0438\u0448\u043d\u0435\u0433\u043e \u043a\u043e\u0434\u0430, \u0442.\u0435. Integer sumOdd = collection . parallelStream (). filter ( o -> o % 2 != 0 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); \u0423\u0436\u0435 \u0434\u0435\u043b\u0430\u0435\u0442 \u043a\u043e\u0434 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c, \u0431\u0435\u0437 \u0432\u0441\u044f\u043a\u0438\u0445 \u0441\u0435\u043c\u0430\u0444\u043e\u0440\u043e\u0432, \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0439, \u0440\u0438\u0441\u043a\u043e\u0432 \u0432\u0437\u0430\u0438\u043c\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a \u0438 \u0442.\u043f. \u041e\u0431\u0449\u0435\u0435 \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435 '\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043e\u043a' \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u043d\u0430\u0447\u0430\u043b\u0430, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 stream \u0432 Java 8. I. \u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0421\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430 \u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 1. \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection. stream () <br>Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\");<br> Stream<String> streamFromCollection = collection.stream(); <br> 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Stream.of ( \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351 ,\u2026 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435N ) <br>Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); <br> 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Arrays.stream ( \u043c\u0430\u0441\u0441\u0438\u0432 ) <br>String[] array = {\"a1\",\"a2\",\"a3\"}; <br> Stream<String> streamFromArrays = Arrays.stream(array); <br> 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0441\u0442\u0440\u0438\u043c\u0435) Files.lines ( \u043f\u0443\u0442\u044c_\u043a_\u0444\u0430\u0439\u043b\u0443 ) <br>Stream<String> streamFromFiles = Files.lines(Paths.get(\"file.txt\")) <br> 5. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u00ab\u0441\u0442\u0440\u043e\u043a\u0430\u00bb. chars () <br>IntStream streamFromString = \"123\".chars() <br> 6. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.builder Stream. builder (). add (...).... build () <br>Stream.builder().add(\"a1\").add(\"a2\").add(\"a3\").build() <br> 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 collection. parallelStream () <br>Stream<String> stream = collection.parallelStream(); <br> 8. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.iterate Stream.iterate ( \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435_\u0443\u0441\u043b\u043e\u0432\u0438\u0435 , \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 1) <br> 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.generate Stream.generate ( \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\") <br> \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0432\u0441\u0435 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0441\u043b\u0443\u0436\u0430\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432, \u0432 iterate \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e, \u0442\u043e \u0435\u0441\u0442\u044c Stream.iterate(1, n -> n + 1) \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 1, 2, 3, 4,\u2026 N. Stream.generate \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u00aba1\u00bb. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 n -> n + 1, \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Integer func(Integer n) { return n+1;}, \u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 () -> \u00aba1\u00bb \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f String func() { return \u00aba1\u00bb;} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github 'e System . out . println ( \"Test buildStream start\" ); Stream < String > streamFromValues = Stream . of ( \"a1\" , \"a2\" , \"a3\" ); System . out . println ( \"streamFromValues = \" + streamFromValues . collect ( Collectors . toList ())); String [] array = { \"a1\" , \"a2\" , \"a3\" }; Stream < String > streamFromArrays = Arrays . stream ( array ); System . out . println ( \"streamFromArrays = \" + streamFromArrays . collect ( Collectors . toList ())); Stream < String > streamFromArrays1 = Stream . of ( array ); System . out . println ( \"streamFromArrays1 = \" + streamFromArrays1 . collect ( Collectors . toList ())); File file = new File ( \"1.tmp\" ); file . deleteOnExit (); PrintWriter out = new PrintWriter ( file ); out . println ( \"a1\" ); out . println ( \"a2\" ); out . println ( \"a3\" ); out . close (); Stream < String > streamFromFiles = Files . lines ( Paths . get ( file . getAbsolutePath ())); System . out . println ( \"streamFromFiles = \" + streamFromFiles . collect ( Collectors . toList ())); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" ); Stream < String > streamFromCollection = collection . stream (); System . out . println ( \"streamFromCollection = \" + streamFromCollection . collect ( Collectors . toList ())); IntStream streamFromString = \"123\" . chars (); System . out . print ( \"streamFromString = \" ); streamFromString . forEach (( e ) -> System . out . print ( e + \" , \" )); System . out . println (); Stream . Builder < String > builder = Stream . builder (); Stream < String > streamFromBuilder = builder . add ( \"a1\" ). add ( \"a2\" ). add ( \"a3\" ). build (); System . out . println ( \"streamFromBuilder = \" + streamFromBuilder . collect (( Collectors . toList ()))); Stream < Integer > streamFromIterate = Stream . iterate ( 1 , n -> n + 2 ); System . out . println ( \"streamFromIterate = \" + streamFromIterate . limit ( 3 ). collect ( Collectors . toList ())); Stream < String > streamFromGenerate = Stream . generate (() -> \"a1\" ); System . out . println ( \"streamFromGenerate = \" + streamFromGenerate . limit ( 3 ). collect ( Collectors . toList ())); Stream < String > streamEmpty = Stream . empty (); System . out . println ( \"streamEmpty = \" + streamEmpty . collect ( Collectors . toList ())); Stream < String > parallelStream = collection . parallelStream (); System . out . println ( \"parallelStream = \" + parallelStream . collect ( Collectors . toList ())); II. \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 Java Stream API \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: 1. \u041a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 stream, \u0442\u043e \u0435\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043a\u0430\u043a builder, 2. \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b, \u043e\u0431\u044a\u0435\u043a\u0442\u044b, Optional \u0438 \u0442.\u0434. \u041e \u0442\u043e\u043c \u0447\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b 2.1 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 filter \u041e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e collection.stream().filter(\u00aba1\u00bb::equals).count() skip \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c N \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().skip(collection.size() \u2014 1).findFirst().orElse(\u00ab1\u00bb) distinct \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0438\u043c \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 (\u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 equals) collection.stream().distinct().collect(Collectors.toList()) map \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) peek \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0440\u0438\u043c, \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(\",\" + e)). collect(Collectors.toList()) limit \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().limit(2).collect(Collectors.toList()) sorted \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043b\u0438\u0431\u043e \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043b\u0438\u0431\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u044f Comparator collection.stream().sorted().collect(Collectors.toList()) mapToInt , mapToDouble , mapToLong \u0410\u043d\u0430\u043b\u043e\u0433 map, \u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c (\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432) collection.stream().mapToInt((s) -> Integer.parseInt(s)).toArray() flatMap , flatMapToInt , flatMapToDouble , flatMapToLong \u041f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 map, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) 2.2 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 findFirst \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findFirst().orElse(\u00ab1\u00bb) findAny \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findAny().orElse(\u00ab1\u00bb) collect \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) count \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 collection.stream().filter(\u00aba1\u00bb::equals).count() anyMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().anyMatch(\u00aba1\u00bb::equals) noneMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().noneMatch(\u00aba8\u00bb::equals) allMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) min \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().min(String::compareTo).get() max \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().max(String::compareTo).get() forEach \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f set.stream().forEach((p) -> p.append(\"_1\")); forEachOrdered \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); toArray \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).toArray(String[]::new); reduce \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b findFirst, findAny, anyMatch \u044d\u0442\u043e short-circuiting \u043c\u0435\u0442\u043e\u0434\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u0430 \u043d\u0435 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c. 2.3 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 sum \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).sum() average \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).average() mapToObj \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0439 intStream.mapToObj((id) -> new Key(id)).toArray() 2.4 \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 isParallel \u0423\u0437\u043d\u0430\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c parallel \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f sequential \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e, \u043c\u0435\u0442\u043e\u0434\u043e\u0432 parallel \u0438 sequential \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438. \u0422\u0430\u043a \u0436\u0435 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0442\u043e \u0435\u0441\u0442\u044c: collection . stream (). peek (...). parallel (). map (...). sequential (). reduce (...) \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0434\u043b\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0434\u043e\u043b\u0433\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b, \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439), \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 c \u043e\u0434\u043d\u0438\u043c \u043f\u0443\u043b\u043e\u043c fork/join \u0438 \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0432 JVM \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043f\u0443\u043b\u0435, \u0442.\u0435. \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u0438\u0434\u0435\u0442 \u043d\u0430 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u044b, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b. III. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438. 3.1 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f filter, findFirst, findAny, skip, limit \u0438 count \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b filter, findFirst, findAny, skip \u0438 count: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u00aba1\u00bb collection.stream().filter(\u00aba1\u00bb::equals).count() 2 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 0, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().findFirst().orElse(\u00ab0\u00bb) a1 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u00abempty\u00bb, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().skip(collection.size() \u2014 1).findAny().orElse(\u00abempty\u00bb) a1 \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u044b\u0439 \u00aba3\u00bb \u0438\u043b\u0438 \u043a\u0438\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 collection.stream().filter(\u00aba3\u00bb::equals).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 collection.stream().skip(2).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e collection.stream().skip(1).limit(2).toArray() [a2, a3] \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) [a1, a1] \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 , \u0447\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b findFirst \u0438 findAny \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f Optional, \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0432 Java 8, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c NullPointerException. \u041c\u0435\u0442\u043e\u0434 filter \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043b\u0438\u0448\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 \u043c\u0435\u0442\u043e\u0434 skip \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u00aba3\u00bb::equals \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return \u00aba3\u00bb.equals(s);}, \u0430 (s) -> s.contains(\u00ab1\u00bb) \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return s.contains(\u00ab1\u00bb);} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0443\u0436\u0447\u0438\u043d-\u0432\u043e\u0435\u043d\u043d\u043e\u043e\u0431\u044f\u0437\u0430\u043d\u043d\u044b\u0445 (\u043e\u0442 18 \u0434\u043e 27 \u043b\u0435\u0442) peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()) [{name='\u041f\u0435\u0442\u044f', age=23, sex=MAN}] \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble() 36.0 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (\u0442.\u0435. \u043e\u0442 18 \u043b\u0435\u0442 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0432\u044b\u0445\u043e\u0434\u044f\u0442 \u0432 55 \u043b\u0435\u0442, \u0430 \u043c\u0443\u0436\u0447\u0438\u043d\u0430 \u0432 60) peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) | (p.getSex() == Sex.MAN && p.getAge() < 60)).count() 2 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e: \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 private static void testFilterAndCount () { System . out . println (); System . out . println ( \"Test filter and count start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); long count = collection . stream (). filter ( \"a1\" :: equals ). count (); System . out . println ( \"count = \" + count ); List < String > select = collection . stream (). filter (( s ) -> s . contains ( \"1\" )). collect ( Collectors . toList ()); System . out . println ( \"select = \" + select ); List < People > militaryService = peoples . stream (). filter (( p ) -> p . getAge () >= 18 && p . getAge () < 27 && p . getSex () == Sex . MAN ). collect ( Collectors . toList ()); System . out . println ( \"militaryService = \" + militaryService ); double manAverageAge = peoples . stream (). filter (( p ) -> p . getSex () == Sex . MAN ). mapToInt ( People :: getAge ). average (). getAsDouble (); System . out . println ( \"manAverageAge = \" + manAverageAge ); long peopleHowCanWork = peoples . stream (). filter (( p ) -> p . getAge () >= 18 ). filter ( ( p ) -> ( p . getSex () == Sex . WOMEN && p . getAge () < 55 ) || ( p . getSex () == Sex . MAN && p . getAge () < 60 )). count (); System . out . println ( \"peopleHowCanWork = \" + peopleHowCanWork ); } private static void testFindFirstSkipCount () { Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . println ( \"Test findFirst and skip start\" ); String first = collection . stream (). findFirst (). orElse ( \"1\" ); System . out . println ( \"first = \" + first ); String last = collection . stream (). skip ( collection . size () - 1 ). findAny (). orElse ( \"1\" ); System . out . println ( \"last = \" + last ); String find = collection . stream (). filter ( \"a3\" :: equals ). findFirst (). get (); System . out . println ( \"find = \" + find ); String third = collection . stream (). skip ( 2 ). findFirst (). get (); System . out . println ( \"third = \" + third ); System . out . println (); System . out . println ( \"Test collect start\" ); List < String > select = collection . stream (). filter (( s ) -> s . contains ( \"1\" )). collect ( Collectors . toList ()); System . out . println ( \"select = \" + select ); } private static void testLimit () { System . out . println (); System . out . println ( \"Test limit start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); List < String > limit = collection . stream (). limit ( 2 ). collect ( Collectors . toList ()); System . out . println ( \"limit = \" + limit ); List < String > fromTo = collection . stream (). skip ( 1 ). limit ( 2 ). collect ( Collectors . toList ()); System . out . println ( \"fromTo = \" + fromTo ); String last = collection . stream (). skip ( collection . size () - 1 ). findAny (). orElse ( \"1\" ); System . out . println ( \"last = \" + last ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } } 3.2 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f distinct \u041c\u0435\u0442\u043e\u0434 distinct \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 stream \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 list) \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u0435\u043d, \u0434\u043b\u044f \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 Collection ordered = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb) \u0438 Collection nonOrdered = new HashSet<>(ordered). \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 nonOrdered.stream().distinct().collect(Collectors.toList()) [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 ordered.stream().distinct().collect(Collectors.toList()); [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: 1. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 distinct \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d equals, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c hashCode \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c equals/hashCode (\u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0447\u0442\u043e\u0431\u044b hashCode \u0434\u043b\u044f \u0432\u0441\u0435\u0445 equals \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435), \u0438\u043d\u0430\u0447\u0435 distinct \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 HashSet/HashMap), 2. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0438 \u0432\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u2014 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0440\u0438\u043c \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c unordered(), \u0430 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c distinct(), \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u0438 distinct() \u043d\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043f\u0440\u0438 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u043c, \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testDistinct () { System . out . println (); System . out . println ( \"Test distinct start\" ); Collection < String > ordered = Arrays . asList ( \"a1\" , \"a2\" , \"a2\" , \"a3\" , \"a1\" , \"a2\" , \"a2\" ); Collection < String > nonOrdered = new HashSet <> ( ordered ); List < String > distinct = nonOrdered . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinct = \" + distinct ); List < String > distinctOrdered = ordered . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinctOrdered = \" + distinctOrdered ); } 3.3 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (anyMatch, allMatch, noneMatch) \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba1\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba1\u00bb::equals) true \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba8\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba8\u00bb::equals) false \u041d\u0430\u0439\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u00ab1\u00bb \u0443 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) false \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u00aba7\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().noneMatch(\u00aba7\u00bb::equals) true \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMatch () { System . out . println (); System . out . println ( \"Test anyMatch, allMatch, noneMatch start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); boolean isAnyOneTrue = collection . stream (). anyMatch ( \"a1\" :: equals ); System . out . println ( \"anyOneTrue \" + isAnyOneTrue ); boolean isAnyOneFalse = collection . stream (). anyMatch ( \"a8\" :: equals ); System . out . println ( \"anyOneFlase \" + isAnyOneFalse ); boolean isAll = collection . stream (). allMatch (( s ) -> s . contains ( \"1\" )); System . out . println ( \"isAll \" + isAll ); boolean isNotEquals = collection . stream (). noneMatch ( \"a7\" :: equals ); System . out . println ( \"isNotEquals \" + isNotEquals ); } 3.4 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Map \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (map, mapToInt, FlatMap, FlatMapToInt) \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1 = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb) \u0438 collection2 = Arrays.asList(\u00ab1,2,0\u00bb, \u00ab4,5\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \"_1\" \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) [a1_1, a2_1, a3_1, a1_1] \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b (int[]) collection1.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray() [1, 2, 3, 1] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u0438\u0437 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection2.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) [1, 2, 0, 4, 5] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e collection2.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum() 12 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0432\u0441\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0442\u0438\u043f\u0430 (\u043a\u043b\u0430\u0441\u0441\u0430), \u0442\u043e \u0435\u0441\u0442\u044c map \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u0430\u0442\u044c Stream \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Integer \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u043b\u044e\u0434\u0435\u0439 People, \u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Office, \u0433\u0434\u0435 \u044d\u0442\u0438 \u043b\u044e\u0434\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0438 \u0442.\u043f., flatMap (flatMapToInt \u0438 \u0442.\u043f.) \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0441 \u043e\u0434\u043d\u0438\u043c, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u0441\u043c. \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430). \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMap () { System . out . println (); System . out . println ( \"Test map start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); List < String > transform = collection . stream (). map (( s ) -> s + \"_1\" ). collect ( Collectors . toList ()); System . out . println ( \"transform = \" + transform ); List < Integer > number = collection . stream (). map (( s ) -> Integer . parseInt ( s . substring ( 1 ))). collect ( Collectors . toList ()); System . out . println ( \"number = \" + number ); } private static void testMapToInt () { System . out . println (); System . out . println ( \"Test mapToInt start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); int [] number = collection . stream (). mapToInt (( s ) -> Integer . parseInt ( s . substring ( 1 ))). toArray (); System . out . println ( \"number = \" + Arrays . toString ( number )); } private static void testFlatMap () { System . out . println (); System . out . println ( \"Test flat map start\" ); Collection < String > collection = Arrays . asList ( \"1,2,0\" , \"4,5\" ); String [] number = collection . stream (). flatMap (( p ) -> Arrays . asList ( p . split ( \",\" )). stream ()). toArray ( String [] :: new ); System . out . println ( \"number = \" + Arrays . toString ( number )); } private static void testFlatMapToInt () { System . out . println (); System . out . println ( \"Test flat map start\" ); Collection < String > collection = Arrays . asList ( \"1,2,0\" , \"4,5\" ); int sum = collection . stream (). flatMapToInt (( p ) -> Arrays . asList ( p . split ( \",\" )). stream (). mapToInt ( Integer :: parseInt )). sum (); System . out . println ( \"sum = \" + sum ); } 3.5 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Sorted \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba4\u00bb, \u00aba3\u00bb, \u00aba2\u00bb, \u00aba1\u00bb, \u00aba4\u00bb) \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043b\u044e\u0434\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0430 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 collection.stream().sorted().collect(Collectors.toList()) [a1, a1, a2, a3, a4, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()) [a4, a4, a3, a2, a1, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted().distinct().collect(Collectors.toList()) [a1, a2, a3, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()) [a4, a3, a2, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()) [{'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}, {'\u0412\u0430\u0441\u044f'}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u043f\u043e\u043b\u0443, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex()? o1.getSex(). compareTo(o2.getSex()): o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()) [{'\u0412\u0430\u0441\u044f'}, {'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}] \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testSorted () { System . out . println (); System . out . println ( \"Test sorted start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a4\" , \"a3\" , \"a2\" , \"a1\" , \"a4\" ); List < String > sorted = collection . stream (). sorted (). collect ( Collectors . toList ()); System . out . println ( \"sorted = \" + sorted ); List < String > sortedDistinct = collection . stream (). sorted (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"sortedDistinct = \" + sortedDistinct ); List < String > sortedReverse = collection . stream (). sorted (( o1 , o2 ) -> - o1 . compareTo ( o2 )). collect ( Collectors . toList ()); System . out . println ( \"sortedReverse = \" + sortedReverse ); List < String > distinctReverse = collection . stream (). sorted (( o1 , o2 ) -> - o1 . compareTo ( o2 )). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinctReverse = \" + distinctReverse ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); Collection < People > byName = peoples . stream (). sorted (( o1 , o2 ) -> - o1 . getName (). compareTo ( o2 . getName ())). collect ( Collectors . toList ()); System . out . println ( \"byName = \" + byName ); Collection < People > bySexAndAge = peoples . stream (). sorted (( o1 , o2 ) -> o1 . getSex () != o2 . getSex () ? o1 . getSex (). compareTo ( o2 . getSex ()) : o1 . getAge (). compareTo ( o2 . getAge ())). collect ( Collectors . toList ()); System . out . println ( \"bySexAndAge = \" + bySexAndAge ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } } 3.6 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Max \u0438 Min \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 Peoples \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u043e Sorted \u0438 Filter \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().max(String::compareTo).get() a3 \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().min(String::compareTo).get() a1 \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447', age=69, sex=MAN} \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0412\u0430\u0441\u044f', age=16, sex=MAN} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMinMax () { System . out . println (); System . out . println ( \"Test min and max start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); String max = collection . stream (). max ( String :: compareTo ). get (); System . out . println ( \"max \" + max ); String min = collection . stream (). min ( String :: compareTo ). get (); System . out . println ( \"min \" + min ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); People older = peoples . stream (). max (( p1 , p2 ) -> p1 . getAge (). compareTo ( p2 . getAge ())). get (); System . out . println ( \"older \" + older ); People younger = peoples . stream (). min (( p1 , p2 ) -> p1 . getAge (). compareTo ( p2 . getAge ())). get (); System . out . println ( \"younger \" + younger ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } } 3.7 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ForEach \u0438 Peek \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u041e\u0431\u0435 ForEach \u0438 Peek \u043f\u043e \u0441\u0443\u0442\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435, \u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e ForEach \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043e\u043d\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a Peek \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u0430\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f: Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); \u0418 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \"_new\", \u0442\u043e \u0434\u043b\u044f ForEach \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 list . stream (). forEachOrdered (( p ) -> p . append ( \"_new\" )); \u0430 \u0434\u043b\u044f peek \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 List < StringBuilder > newList = list . stream (). peek (( p ) -> p . append ( \"_new\" )). collect ( Collectors . toList ()); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testForEach () { System . out . println (); System . out . println ( \"For each start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . print ( \"forEach = \" ); collection . stream (). map ( String :: toUpperCase ). forEach (( e ) -> System . out . print ( e + \",\" )); System . out . println (); Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); list . stream (). forEachOrdered (( p ) -> p . append ( \"_new\" )); System . out . println ( \"forEachOrdered = \" + list ); } private static void testPeek () { System . out . println (); System . out . println ( \"Test peek start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . print ( \"peak1 = \" ); List < String > peek = collection . stream (). map ( String :: toUpperCase ). peek (( e ) -> System . out . print ( e + \",\" )). collect ( Collectors . toList ()); System . out . println (); System . out . println ( \"peek2 = \" + peek ); Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); List < StringBuilder > newList = list . stream (). peek (( p ) -> p . append ( \"_new\" )). collect ( Collectors . toList ()); System . out . println ( \"newList = \" + newList ); } 3.8 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Reduce \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u041c\u0435\u0442\u043e\u0434 reduce \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 (\u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0443\u043c\u043c\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.), \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0448\u0430\u0433\u0430\u0445 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4, 2) \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f reduce. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c 0 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) 12 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u043b\u0438 -1 collection.stream().reduce(Integer::max).orElse(-1) 4 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 0 collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0) 4 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testReduce () { System . out . println (); System . out . println ( \"Test reduce start\" ); Collection < Integer > collection = Arrays . asList ( 1 , 2 , 3 , 4 , 2 ); Integer sum = collection . stream (). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumOld = 0 ; for ( Integer i : collection ) { sumOld += i ; } System . out . println ( \"sum = \" + sum + \" : \" + sumOld ); Integer max1 = collection . stream (). reduce (( s1 , s2 ) -> s1 > s2 ? s1 : s2 ). orElse ( 0 ); Integer max2 = collection . stream (). reduce ( Integer :: max ). orElse ( 0 ); Integer maxOld = null ; for ( Integer i : collection ) { maxOld = maxOld != null && maxOld > i ? maxOld : i ; } maxOld = maxOld == null ? 0 : maxOld ; System . out . println ( \"max = \" + max1 + \" : \" + max2 + \" : \" + maxOld ); Integer min = collection . stream (). reduce (( s1 , s2 ) -> s1 < s2 ? s1 : s2 ). orElse ( 0 ); Integer minOld = null ; for ( Integer i : collection ) { minOld = minOld != null && minOld < i ? minOld : i ; } minOld = minOld == null ? 0 : minOld ; System . out . println ( \"min = \" + min + \" : \" + minOld ); Integer last = collection . stream (). reduce (( s1 , s2 ) -> s2 ). orElse ( 0 ); Integer lastOld = null ; for ( Integer i : collection ) { lastOld = i ; } lastOld = lastOld == null ? 0 : lastOld ; System . out . println ( \"last = \" + last + \" : \" + lastOld ); Integer sumMore2 = collection . stream (). filter ( o -> o > 2 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumMore2Old = 0 ; for ( Integer i : collection ) { if ( i > 2 ) { sumMore2Old += i ; } } System . out . println ( \"sumMore2 = \" + sumMore2 + \" : \" + sumMore2Old ); Integer sumOdd = collection . stream (). filter ( o -> o % 2 != 0 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumOddOld = 0 ; for ( Integer i : collection ) { if ( i % 2 != 0 ) { sumOddOld += i ; } } System . out . println ( \"sumOdd = \" + sumOdd + \" : \" + sumOddOld ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); int oldMan = peoples . stream (). filter (( p ) -> p . getSex () == Sex . MAN ). map ( People :: getAge ). reduce (( s1 , s2 ) -> s1 > s2 ? s1 : s2 ). get (); System . out . println ( \"oldMan = \" + oldMan ); int younger = peoples . stream (). filter (( p ) -> p . getName (). contains ( \"\u0435\" )). mapToInt ( People :: getAge ). reduce (( s1 , s2 ) -> s1 < s2 ? s1 : s2 ). orElse ( 0 ); System . out . println ( \"younger = \" + younger ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } } 3.9 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f toArray \u0438 collect \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0415\u0441\u043b\u0438 \u0441 toArray \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c toArray() \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Object[], \u043b\u0438\u0431\u043e toArray(T[]::new) \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u0438\u043f\u0430 T, \u0442\u043e collect \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, map'\u0443 \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 List \u0431\u0443\u0434\u0435\u0442 stream.collect(Collectors.toList()). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors: \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 toList, toCollection, toSet \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 toConcurrentMap, toMap \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0432 map averagingInt, averagingDouble, averagingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 summingInt, summingDouble, summingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 summarizingInt, summarizingDouble, summarizingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 SummaryStatistics \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 partitioningBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u043a\u0430\u043a Map<Boolean, List> groupingBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Map<N, List mapping \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 Collector'\u043e\u0432 \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 collect \u0438 toArray \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445: \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1? p: 0))) 4 \u0412\u044b\u0447\u0435\u0441\u0442\u044c \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 1 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 numbers.stream().collect(Collectors.averagingInt((p) -> p \u2014 1)) 1.5 \u041f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0447\u0438\u0441\u043b\u0430\u043c 3 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)) IntSummaryStatistics{count=4, sum=22, min=4, average=5.5, max=7} \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u0447\u0435\u0442\u043d\u044b\u0435 \u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)) {false=[1, 3], true=[2, 4]} \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00abb2\u00bb, \u00abc3\u00bb, \u00aba1\u00bb), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 strings.stream().distinct().collect(Collectors.toList()) [a1, b2, c3] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new) {A1, B2, C3} \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c: \u0438 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0433\u0430\u043c\u0438 <b>\u2026 </b> strings.stream().collect(Collectors.joining(\": \", \"<b> \", \" </b>\")) <b> a1: b2: c3: a1 </b> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0433\u0434\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043a\u043b\u044e\u0447, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))) {a=1, b=2, c=3} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))) {a=[a1, a1], b=[b2], c=[c3]} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0447\u0435\u0440\u0435\u0437 : strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))) {a=1:1, b=2, c=3} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testCollect () { System . out . println (); System . out . println ( \"Test distinct start\" ); Collection < String > strings = Arrays . asList ( \"a1\" , \"b2\" , \"c3\" , \"a1\" ); List < String > distinct = strings . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinct = \" + distinct ); String [] array = strings . stream (). distinct (). map ( String :: toUpperCase ). toArray ( String [] :: new ); System . out . println ( \"array = \" + Arrays . asList ( array )); String join = strings . stream (). collect ( Collectors . joining ( \" : \" , \"<b> \" , \" </b>\" )); System . out . println ( \"join = \" + join ); Map < String , String > map = strings . stream (). distinct (). collect ( Collectors . toMap (( p ) -> p . substring ( 0 , 1 ), ( p ) -> p . substring ( 1 , 2 ))); System . out . println ( \"map = \" + map ); Map < String , List < String >> groups = strings . stream (). collect ( Collectors . groupingBy (( p ) -> p . substring ( 0 , 1 ))); System . out . println ( \"groups = \" + groups ); Map < String , String > groupJoin = strings . stream (). collect ( Collectors . groupingBy (( p ) -> p . substring ( 0 , 1 ), Collectors . mapping (( p ) -> p . substring ( 1 , 2 ), Collectors . joining ( \":\" )))); System . out . println ( \"groupJoin = \" + groupJoin ); Collection < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 ); long sumOdd = numbers . stream (). collect ( Collectors . summingInt ((( p ) -> p % 2 == 1 ? p : 0 ))); System . out . println ( \"sumOdd = \" + sumOdd ); double average = numbers . stream (). collect ( Collectors . averagingInt (( p ) -> p - 1 )); System . out . println ( \"average = \" + average ); IntSummaryStatistics statistics = numbers . stream (). collect ( Collectors . summarizingInt (( p ) -> p + 3 )); System . out . println ( \"statistics = \" + statistics ); long sumEven = numbers . stream (). collect ( Collectors . summarizingInt (( p ) -> p % 2 == 0 ? p : 0 )). getSum (); System . out . println ( \"sumEven = \" + sumEven ); Map < Boolean , List < Integer >> parts = numbers . stream (). collect ( Collectors . partitioningBy (( p ) -> p % 2 == 0 )); System . out . println ( \"parts = \" + parts ); } 3.10 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e Collector'a \u041a\u0440\u043e\u043c\u0435 Collector'\u043e\u0432 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 Collectors \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 Collector, \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c. \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e Collector'a: Collector < \u0422\u0438\u043f_\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 , \u0422\u0438\u043f_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 , \u0422\u0438\u043f_\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 > \u0441ollector = Collector . of ( \u043c\u0435\u0442\u043e\u0434_\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 , \u043c\u0435\u0442\u043e\u0434_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u043a\u0430\u0436\u0434\u043e\u0433\u043e_\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 , \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 , [ \u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 ] ); \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e Collector'a \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0440\u0438 \u0438\u043b\u0438 \u0447\u0435\u0442\u044b\u0440\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 (\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u0434\u043e Java 8, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438: StringBuilder b = new StringBuilder (); for ( String s : strings ) { b . append ( s ). append ( \" , \" ); } String joinBuilderOld = b . toString (); \u0418 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 Java 8 String joinBuilder = strings . stream (). collect ( Collector . of ( StringBuilder :: new , ( b , s ) -> b . append ( s ). append ( \" , \" ), ( b1 , b2 ) -> b1 . append ( b2 ). append ( \" , \" ), StringBuilder :: toString ) ); \u0412 \u043e\u0431\u0449\u0435\u043c-\u0442\u043e, \u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0438\u0445 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043d\u043e \u0432\u043e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432? \u042d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Collector'a, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 (\u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0442\u0435\u0439), \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440 StringBuilder \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c, \u0442\u043e \u043a\u043e\u0434 \u0434\u043e Java 8 \u043f\u0440\u0438 2 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c: StringBuilder b1 = new StringBuilder (); for ( String s : stringsPart1 ) { b1 . append ( s ). append ( \" , \" ); } StringBuilder b2 = new StringBuilder (); for ( String s : stringsPart2 ) { b2 . append ( s ). append ( \" , \" ); } StringBuilder b = b1 . append ( b2 ). append ( \" , \" ), String joinBuilderOld = b . toString (); \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 Collectors.toList() \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u043e\u043c: Collector < String , List < String > , List < String >> toList = Collector . of ( ArrayList :: new , List :: add , ( l1 , l2 ) -> { l1 . addAll ( l2 ); return l1 ; } ); List < String > distinct1 = strings . stream (). distinct (). collect ( toList ); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e Collector < String , StringBuilder , String > stringBuilderCollector = Collector . of ( StringBuilder :: new , ( b , s ) -> b . append ( s ). append ( \" , \" ), ( b1 , b2 ) -> b1 . append ( b2 ). append ( \" , \" ), StringBuilder :: toString ); String joinBuilder = strings . stream (). collect ( stringBuilderCollector ); System . out . println ( \"joinBuilder = \" + joinBuilder ); StringBuilder b = new StringBuilder (); for ( String s : strings ) { b . append ( s ). append ( \" , \" ); } String joinBuilderOld = b . toString (); System . out . println ( \"joinBuilderOld = \" + joinBuilderOld ); Collector < String , List < String > , List < String >> toList = Collector . of ( ArrayList :: new , List :: add , ( l1 , l2 ) -> { l1 . addAll ( l2 ); return l1 ; } ); List < String > distinct1 = strings . stream (). distinct (). collect ( toList ); System . out . println ( \"distinct1 = \" + distinct1 ); IV. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412\u043e\u0442 \u0438 \u0432\u0441\u0435. \u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043c\u043e\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e stream api \u0431\u044b\u043b\u0430 \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439. \u0412\u0441\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0435\u0441\u0442\u044c \u043d\u0430 github'\u0435 , \u0443\u0434\u0430\u0447\u0438 \u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043a\u043e\u0434\u0430. P.S. \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0430\u0442\u0435\u0439, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e Stream Api: 1. Processing Data with Java SE 8 Streams, Part 1 \u043e\u0442 Oracle, 2. Processing Data with Java SE 8 Streams, Part 2 \u043e\u0442 Oracle, 3. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java 8 Stream P.P.S. \u0422\u0430\u043a \u0436\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043c\u043e\u0439 opensource \u043f\u0440\u043e\u0435\u043a\u0442 useful-java-links \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0435\u043e. \u0422\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e opensource \u043f\u043e\u0434\u043f\u0440\u043e\u0435\u043a\u0442 Hello world \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0432 \u043e\u0434\u043d\u043e\u043c maven \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u0431\u0443\u0434\u0443 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d \u0437\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u043e\u043c\u043e\u0449\u044c). Source","title":"Java Stream API"},{"location":"java/Java%20Stream%20API/#i","text":"\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0421\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430 \u0428\u0430\u0431\u043b\u043e\u043d \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440 1. \u041a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0439: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection. stream () <br>Collection<String> collection = Arrays.asList(\"a1\", \"a2\", \"a3\");<br> Stream<String> streamFromCollection = collection.stream(); <br> 2. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Stream.of ( \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u04351 ,\u2026 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435N ) <br>Stream<String> streamFromValues = Stream.of(\"a1\", \"a2\", \"a3\"); <br> 3. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Arrays.stream ( \u043c\u0430\u0441\u0441\u0438\u0432 ) <br>String[] array = {\"a1\",\"a2\",\"a3\"}; <br> Stream<String> streamFromArrays = Arrays.stream(array); <br> 4. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0432 \u0441\u0442\u0440\u0438\u043c\u0435) Files.lines ( \u043f\u0443\u0442\u044c_\u043a_\u0444\u0430\u0439\u043b\u0443 ) <br>Stream<String> streamFromFiles = Files.lines(Paths.get(\"file.txt\")) <br> 5. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0438\u043c\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u00ab\u0441\u0442\u0440\u043e\u043a\u0430\u00bb. chars () <br>IntStream streamFromString = \"123\".chars() <br> 6. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.builder Stream. builder (). add (...).... build () <br>Stream.builder().add(\"a1\").add(\"a2\").add(\"a3\").build() <br> 7. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 collection. parallelStream () <br>Stream<String> stream = collection.parallelStream(); <br> 8. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.iterate Stream.iterate ( \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435_\u0443\u0441\u043b\u043e\u0432\u0438\u0435 , \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<Integer> streamFromIterate = Stream.iterate(1, n -> n + 1) <br> 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Stream.generate Stream.generate ( \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435_\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 ) <br>Stream<String> streamFromGenerate = Stream.generate(() -> \"a1\") <br> \u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435, \u043a\u0440\u043e\u043c\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0432\u0441\u0435 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0441\u043b\u0443\u0436\u0430\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432, \u0432 iterate \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e, \u0442\u043e \u0435\u0441\u0442\u044c Stream.iterate(1, n -> n + 1) \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f 1, 2, 3, 4,\u2026 N. Stream.generate \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u043d \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u00aba1\u00bb. \u0414\u043b\u044f \u0442\u0435\u0445 \u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 n -> n + 1, \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Integer func(Integer n) { return n+1;}, \u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 () -> \u00aba1\u00bb \u0430\u043d\u0430\u043b\u043e\u0433 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f String func() { return \u00aba1\u00bb;} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github 'e System . out . println ( \"Test buildStream start\" ); Stream < String > streamFromValues = Stream . of ( \"a1\" , \"a2\" , \"a3\" ); System . out . println ( \"streamFromValues = \" + streamFromValues . collect ( Collectors . toList ())); String [] array = { \"a1\" , \"a2\" , \"a3\" }; Stream < String > streamFromArrays = Arrays . stream ( array ); System . out . println ( \"streamFromArrays = \" + streamFromArrays . collect ( Collectors . toList ())); Stream < String > streamFromArrays1 = Stream . of ( array ); System . out . println ( \"streamFromArrays1 = \" + streamFromArrays1 . collect ( Collectors . toList ())); File file = new File ( \"1.tmp\" ); file . deleteOnExit (); PrintWriter out = new PrintWriter ( file ); out . println ( \"a1\" ); out . println ( \"a2\" ); out . println ( \"a3\" ); out . close (); Stream < String > streamFromFiles = Files . lines ( Paths . get ( file . getAbsolutePath ())); System . out . println ( \"streamFromFiles = \" + streamFromFiles . collect ( Collectors . toList ())); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" ); Stream < String > streamFromCollection = collection . stream (); System . out . println ( \"streamFromCollection = \" + streamFromCollection . collect ( Collectors . toList ())); IntStream streamFromString = \"123\" . chars (); System . out . print ( \"streamFromString = \" ); streamFromString . forEach (( e ) -> System . out . print ( e + \" , \" )); System . out . println (); Stream . Builder < String > builder = Stream . builder (); Stream < String > streamFromBuilder = builder . add ( \"a1\" ). add ( \"a2\" ). add ( \"a3\" ). build (); System . out . println ( \"streamFromBuilder = \" + streamFromBuilder . collect (( Collectors . toList ()))); Stream < Integer > streamFromIterate = Stream . iterate ( 1 , n -> n + 2 ); System . out . println ( \"streamFromIterate = \" + streamFromIterate . limit ( 3 ). collect ( Collectors . toList ())); Stream < String > streamFromGenerate = Stream . generate (() -> \"a1\" ); System . out . println ( \"streamFromGenerate = \" + streamFromGenerate . limit ( 3 ). collect ( Collectors . toList ())); Stream < String > streamEmpty = Stream . empty (); System . out . println ( \"streamEmpty = \" + streamEmpty . collect ( Collectors . toList ())); Stream < String > parallelStream = collection . parallelStream (); System . out . println ( \"parallelStream = \" + parallelStream . collect ( Collectors . toList ()));","title":"I. \u0421\u043f\u043e\u0441\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#ii","text":"Java Stream API \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: 1. \u041a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 stream, \u0442\u043e \u0435\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043a\u0430\u043a builder, 2. \u0422\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u2014 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b, \u043e\u0431\u044a\u0435\u043a\u0442\u044b, Optional \u0438 \u0442.\u0434. \u041e \u0442\u043e\u043c \u0447\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0435 \u0438 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b","title":"II. \u041c\u0435\u0442\u043e\u0434\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#21","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 filter \u041e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e collection.stream().filter(\u00aba1\u00bb::equals).count() skip \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c N \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().skip(collection.size() \u2014 1).findFirst().orElse(\u00ab1\u00bb) distinct \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u0438\u043c \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 (\u0434\u043b\u044f \u043c\u0435\u0442\u043e\u0434\u0430 equals) collection.stream().distinct().collect(Collectors.toList()) map \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) peek \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0441\u0442\u0440\u0438\u043c, \u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).peek((e) -> System.out.print(\",\" + e)). collect(Collectors.toList()) limit \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().limit(2).collect(Collectors.toList()) sorted \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043b\u0438\u0431\u043e \u0432 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043b\u0438\u0431\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u044f Comparator collection.stream().sorted().collect(Collectors.toList()) mapToInt , mapToDouble , mapToLong \u0410\u043d\u0430\u043b\u043e\u0433 map, \u043d\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c (\u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0438\u0437 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432) collection.stream().mapToInt((s) -> Integer.parseInt(s)).toArray() flatMap , flatMapToInt , flatMapToDouble , flatMapToLong \u041f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 map, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e collection.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new)","title":"2.1 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#22","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 findFirst \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findFirst().orElse(\u00ab1\u00bb) findAny \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043b\u044e\u0431\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0438\u0437 \u0441\u0442\u0440\u0438\u043c\u0430 (\u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Optional) collection.stream().findAny().orElse(\u00ab1\u00bb) collect \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) count \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 collection.stream().filter(\u00aba1\u00bb::equals).count() anyMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().anyMatch(\u00aba1\u00bb::equals) noneMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 collection.stream().noneMatch(\u00aba8\u00bb::equals) allMatch \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 true, \u0435\u0441\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) min \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().min(String::compareTo).get() max \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u0440\u0430\u0442\u043e\u0440 collection.stream().max(String::compareTo).get() forEach \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f set.stream().forEach((p) -> p.append(\"_1\")); forEachOrdered \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0441\u0442\u0440\u0438\u043c\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442 list.stream().forEachOrdered((p) -> p.append(\"_new\")); toArray \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0438\u043c\u0430 collection.stream().map(String::toUpperCase).toArray(String[]::new); reduce \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b findFirst, findAny, anyMatch \u044d\u0442\u043e short-circuiting \u043c\u0435\u0442\u043e\u0434\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u0430 \u043d\u0435 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c.","title":"2.2 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438"},{"location":"java/Java%20Stream%20API/#23","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 sum \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).sum() average \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b collection.stream().mapToInt((s) -> Integer.parseInt(s)).average() mapToObj \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0438\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u044b\u0439 intStream.mapToObj((id) -> new Key(id)).toArray()","title":"2.3 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#24","text":"\u041c\u0435\u0442\u043e\u0434 stream \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 isParallel \u0423\u0437\u043d\u0430\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c parallel \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f sequential \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u0438\u043c \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e, \u043c\u0435\u0442\u043e\u0434\u043e\u0432 parallel \u0438 sequential \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u0430\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u043c\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438. \u0422\u0430\u043a \u0436\u0435 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442, \u0442\u043e \u0435\u0441\u0442\u044c: collection . stream (). peek (...). parallel (). map (...). sequential (). reduce (...) \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 : \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0434\u043b\u044f \u0441\u043a\u043e\u043b\u044c\u043a\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0434\u043e\u043b\u0433\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0431\u0430\u0437\u044b, \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439), \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u0441\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 c \u043e\u0434\u043d\u0438\u043c \u043f\u0443\u043b\u043e\u043c fork/join \u0438 \u0442\u0430\u043a\u0438\u0435 \u0434\u043e\u043b\u0433\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0438\u043c\u043e\u0432 \u0432 JVM \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043f\u0443\u043b\u0435, \u0442.\u0435. \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0441\u0442\u043e\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u0438\u0434\u0435\u0442 \u043d\u0430 \u043c\u0438\u043b\u043b\u0438\u0441\u0435\u043a\u0443\u043d\u0434\u044b, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0442\u0435\u0445 \u0433\u0434\u0435 \u0441\u0447\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430 \u0441\u0435\u043a\u0443\u043d\u0434\u044b \u0438 \u043c\u0438\u043d\u0443\u0442\u044b.","title":"2.4 \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#iii","text":"\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445, \u043e\u0431\u044b\u0447\u043d\u043e \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u043c\u0438.","title":"III. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u0440\u0438\u043c\u043e\u0432"},{"location":"java/Java%20Stream%20API/#31-filter-findfirst-findany-skip-limit-count","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b filter, findFirst, findAny, skip \u0438 count: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u00aba1\u00bb collection.stream().filter(\u00aba1\u00bb::equals).count() 2 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 0, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().findFirst().orElse(\u00ab0\u00bb) a1 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u00abempty\u00bb, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u0443\u0441\u0442\u0430 collection.stream().skip(collection.size() \u2014 1).findAny().orElse(\u00abempty\u00bb) a1 \u041d\u0430\u0439\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0440\u0430\u0432\u043d\u044b\u0439 \u00aba3\u00bb \u0438\u043b\u0438 \u043a\u0438\u043d\u0443\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 collection.stream().filter(\u00aba3\u00bb::equals).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 collection.stream().skip(2).findFirst().get() a3 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0434\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e collection.stream().skip(1).limit(2).toArray() [a2, a3] \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0443 collection.stream().filter((s) -> s.contains(\u00ab1\u00bb)).collect(Collectors.toList()) [a1, a1] \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 , \u0447\u0442\u043e \u043c\u0435\u0442\u043e\u0434\u044b findFirst \u0438 findAny \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u0438\u043f Optional, \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0432 Java 8, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c NullPointerException. \u041c\u0435\u0442\u043e\u0434 filter \u0443\u0434\u043e\u0431\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u043b\u0438\u0448\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0430 \u043c\u0435\u0442\u043e\u0434 skip \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435 \u043b\u044f\u043c\u0431\u0434\u044b \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u00aba3\u00bb::equals \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return \u00aba3\u00bb.equals(s);}, \u0430 (s) -> s.contains(\u00ab1\u00bb) \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u043e\u0433 boolean func(s) { return s.contains(\u00ab1\u00bb);} \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044b\u0445 \u0432 \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043c\u0443\u0436\u0447\u0438\u043d-\u0432\u043e\u0435\u043d\u043d\u043e\u043e\u0431\u044f\u0437\u0430\u043d\u043d\u044b\u0445 (\u043e\u0442 18 \u0434\u043e 27 \u043b\u0435\u0442) peoples.stream().filter((p)-> p.getAge() >= 18 && p.getAge() < 27 && p.getSex() == Sex.MAN).collect(Collectors.toList()) [{name='\u041f\u0435\u0442\u044f', age=23, sex=MAN}] \u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d peoples.stream().filter((p) -> p.getSex() == Sex.MAN). mapToInt(People::getAge).average().getAsDouble() 36.0 \u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b\u0445 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 (\u0442.\u0435. \u043e\u0442 18 \u043b\u0435\u0442 \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0447\u0442\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u0432\u044b\u0445\u043e\u0434\u044f\u0442 \u0432 55 \u043b\u0435\u0442, \u0430 \u043c\u0443\u0436\u0447\u0438\u043d\u0430 \u0432 60) peoples.stream().filter((p) -> p.getAge() >= 18).filter( (p) -> (p.getSex() == Sex.WOMEN && p.getAge() < 55) | (p.getSex() == Sex.MAN && p.getAge() < 60)).count() 2 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e: \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 private static void testFilterAndCount () { System . out . println (); System . out . println ( \"Test filter and count start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); long count = collection . stream (). filter ( \"a1\" :: equals ). count (); System . out . println ( \"count = \" + count ); List < String > select = collection . stream (). filter (( s ) -> s . contains ( \"1\" )). collect ( Collectors . toList ()); System . out . println ( \"select = \" + select ); List < People > militaryService = peoples . stream (). filter (( p ) -> p . getAge () >= 18 && p . getAge () < 27 && p . getSex () == Sex . MAN ). collect ( Collectors . toList ()); System . out . println ( \"militaryService = \" + militaryService ); double manAverageAge = peoples . stream (). filter (( p ) -> p . getSex () == Sex . MAN ). mapToInt ( People :: getAge ). average (). getAsDouble (); System . out . println ( \"manAverageAge = \" + manAverageAge ); long peopleHowCanWork = peoples . stream (). filter (( p ) -> p . getAge () >= 18 ). filter ( ( p ) -> ( p . getSex () == Sex . WOMEN && p . getAge () < 55 ) || ( p . getSex () == Sex . MAN && p . getAge () < 60 )). count (); System . out . println ( \"peopleHowCanWork = \" + peopleHowCanWork ); } private static void testFindFirstSkipCount () { Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . println ( \"Test findFirst and skip start\" ); String first = collection . stream (). findFirst (). orElse ( \"1\" ); System . out . println ( \"first = \" + first ); String last = collection . stream (). skip ( collection . size () - 1 ). findAny (). orElse ( \"1\" ); System . out . println ( \"last = \" + last ); String find = collection . stream (). filter ( \"a3\" :: equals ). findFirst (). get (); System . out . println ( \"find = \" + find ); String third = collection . stream (). skip ( 2 ). findFirst (). get (); System . out . println ( \"third = \" + third ); System . out . println (); System . out . println ( \"Test collect start\" ); List < String > select = collection . stream (). filter (( s ) -> s . contains ( \"1\" )). collect ( Collectors . toList ()); System . out . println ( \"select = \" + select ); } private static void testLimit () { System . out . println (); System . out . println ( \"Test limit start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); List < String > limit = collection . stream (). limit ( 2 ). collect ( Collectors . toList ()); System . out . println ( \"limit = \" + limit ); List < String > fromTo = collection . stream (). skip ( 1 ). limit ( 2 ). collect ( Collectors . toList ()); System . out . println ( \"fromTo = \" + fromTo ); String last = collection . stream (). skip ( collection . size () - 1 ). findAny (). orElse ( \"1\" ); System . out . println ( \"last = \" + last ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } }","title":"3.1 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f filter, findFirst, findAny, skip, limit \u0438 count"},{"location":"java/Java%20Stream%20API/#32-distinct","text":"\u041c\u0435\u0442\u043e\u0434 distinct \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 stream \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 list) \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0430\u0431\u0438\u043b\u0435\u043d, \u0434\u043b\u044f \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 Collection ordered = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb, \u00aba2\u00bb, \u00aba2\u00bb) \u0438 Collection nonOrdered = new HashSet<>(ordered). \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 nonOrdered.stream().distinct().collect(Collectors.toList()) [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438\u0437 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 ordered.stream().distinct().collect(Collectors.toList()); [a1, a2, a3] \u2014 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: 1. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 distinct \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d equals, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c hashCode \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c equals/hashCode (\u0441\u0430\u043c\u043e\u0435 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u0447\u0442\u043e\u0431\u044b hashCode \u0434\u043b\u044f \u0432\u0441\u0435\u0445 equals \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435), \u0438\u043d\u0430\u0447\u0435 distinct \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 HashSet/HashMap), 2. \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0438\u043c\u044b \u0438 \u0432\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u2014 \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0440\u0438\u043c \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c unordered(), \u0430 \u0443\u0436\u0435 \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c distinct(), \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u043d\u043e \u043f\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c \u0438 distinct() \u043d\u0430 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043f\u0440\u0438 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u043c, \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testDistinct () { System . out . println (); System . out . println ( \"Test distinct start\" ); Collection < String > ordered = Arrays . asList ( \"a1\" , \"a2\" , \"a2\" , \"a3\" , \"a1\" , \"a2\" , \"a2\" ); Collection < String > nonOrdered = new HashSet <> ( ordered ); List < String > distinct = nonOrdered . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinct = \" + distinct ); List < String > distinctOrdered = ordered . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinctOrdered = \" + distinctOrdered ); }","title":"3.2 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f distinct"},{"location":"java/Java%20Stream%20API/#33-match-anymatch-allmatch-nonematch","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba1\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba1\u00bb::equals) true \u041d\u0430\u0439\u0442\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u0445\u043e\u0442\u044c \u043e\u0434\u0438\u043d \u00aba8\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().anyMatch(\u00aba8\u00bb::equals) false \u041d\u0430\u0439\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u00ab1\u00bb \u0443 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().allMatch((s) -> s.contains(\u00ab1\u00bb)) false \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0447\u0442\u043e \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u00aba7\u00bb \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection.stream().noneMatch(\u00aba7\u00bb::equals) true \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMatch () { System . out . println (); System . out . println ( \"Test anyMatch, allMatch, noneMatch start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); boolean isAnyOneTrue = collection . stream (). anyMatch ( \"a1\" :: equals ); System . out . println ( \"anyOneTrue \" + isAnyOneTrue ); boolean isAnyOneFalse = collection . stream (). anyMatch ( \"a8\" :: equals ); System . out . println ( \"anyOneFlase \" + isAnyOneFalse ); boolean isAll = collection . stream (). allMatch (( s ) -> s . contains ( \"1\" )); System . out . println ( \"isAll \" + isAll ); boolean isNotEquals = collection . stream (). noneMatch ( \"a7\" :: equals ); System . out . println ( \"isNotEquals \" + isNotEquals ); }","title":"3.3 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Match \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (anyMatch, allMatch, noneMatch)"},{"location":"java/Java%20Stream%20API/#34-map-map-maptoint-flatmap-flatmaptoint","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1 = Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb) \u0438 collection2 = Arrays.asList(\u00ab1,2,0\u00bb, \u00ab4,5\u00bb), \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \"_1\" \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 collection1.stream().map((s) -> s + \"_1\").collect(Collectors.toList()) [a1_1, a2_1, a3_1, a1_1] \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b (int[]) collection1.stream().mapToInt((s) -> Integer.parseInt(s.substring(1))).toArray() [1, 2, 3, 1] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e \u0438\u0437 \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 collection2.stream().flatMap((p) -> Arrays.asList(p.split(\",\")).stream()).toArray(String[]::new) [1, 2, 0, 4, 5] \u0418\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e collection2.stream().flatMapToInt((p) -> Arrays.asList(p.split(\",\")).stream().mapToInt(Integer::parseInt)).sum() 12 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0432\u0441\u0435 map \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0442\u0438\u043f\u0430 (\u043a\u043b\u0430\u0441\u0441\u0430), \u0442\u043e \u0435\u0441\u0442\u044c map \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u0430\u0442\u044c Stream \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Integer \u0438\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u043b\u044e\u0434\u0435\u0439 People, \u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Office, \u0433\u0434\u0435 \u044d\u0442\u0438 \u043b\u044e\u0434\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0438 \u0442.\u043f., flatMap (flatMapToInt \u0438 \u0442.\u043f.) \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0441 \u043e\u0434\u043d\u0438\u043c, \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0438\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0441\u0442\u0440\u0438\u043c\u0430 (\u0441\u043c. \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0432\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430). \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMap () { System . out . println (); System . out . println ( \"Test map start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); List < String > transform = collection . stream (). map (( s ) -> s + \"_1\" ). collect ( Collectors . toList ()); System . out . println ( \"transform = \" + transform ); List < Integer > number = collection . stream (). map (( s ) -> Integer . parseInt ( s . substring ( 1 ))). collect ( Collectors . toList ()); System . out . println ( \"number = \" + number ); } private static void testMapToInt () { System . out . println (); System . out . println ( \"Test mapToInt start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); int [] number = collection . stream (). mapToInt (( s ) -> Integer . parseInt ( s . substring ( 1 ))). toArray (); System . out . println ( \"number = \" + Arrays . toString ( number )); } private static void testFlatMap () { System . out . println (); System . out . println ( \"Test flat map start\" ); Collection < String > collection = Arrays . asList ( \"1,2,0\" , \"4,5\" ); String [] number = collection . stream (). flatMap (( p ) -> Arrays . asList ( p . split ( \",\" )). stream ()). toArray ( String [] :: new ); System . out . println ( \"number = \" + Arrays . toString ( number )); } private static void testFlatMapToInt () { System . out . println (); System . out . println ( \"Test flat map start\" ); Collection < String > collection = Arrays . asList ( \"1,2,0\" , \"4,5\" ); int sum = collection . stream (). flatMapToInt (( p ) -> Arrays . asList ( p . split ( \",\" )). stream (). mapToInt ( Integer :: parseInt )). sum (); System . out . println ( \"sum = \" + sum ); }","title":"3.4 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Map \u0444\u0443\u043d\u043a\u0446\u0438\u0439 (map, mapToInt, FlatMap, FlatMapToInt)"},{"location":"java/Java%20Stream%20API/#35-sorted","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba4\u00bb, \u00aba3\u00bb, \u00aba2\u00bb, \u00aba1\u00bb, \u00aba4\u00bb) \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043b\u044e\u0434\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0430 People (\u0441 \u043f\u043e\u043b\u044f\u043c\u0438 name \u2014 \u0438\u043c\u044f, age \u2014 \u0432\u043e\u0437\u0440\u0430\u0441\u0442, sex \u2014 \u043f\u043e\u043b), \u0432\u0438\u0434\u0430 Arrays.asList( new People(\u00ab\u0412\u0430\u0441\u044f\u00bb, 16, Sex.MAN), new People(\u00ab\u041f\u0435\u0442\u044f\u00bb, 23, Sex.MAN), new People(\u00ab\u0415\u043b\u0435\u043d\u0430\u00bb, 42, Sex.WOMEN), new People(\u00ab\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\u00bb, 69, Sex.MAN)). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c: \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 collection.stream().sorted().collect(Collectors.toList()) [a1, a1, a2, a3, a4, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).collect(Collectors.toList()) [a4, a4, a3, a2, a1, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted().distinct().collect(Collectors.toList()) [a1, a2, a3, a4] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b collection.stream().sorted((o1, o2) -> -o1.compareTo(o2)).distinct().collect(Collectors.toList()) [a4, a3, a2, a1] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 peoples.stream().sorted((o1,o2) -> -o1.getName().compareTo(o2.getName())).collect(Collectors.toList()) [{'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}, {'\u0412\u0430\u0441\u044f'}] \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043b\u044e\u0434\u0435\u0439 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u043f\u043e\u043b\u0443, \u0430 \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 peoples.stream().sorted((o1, o2) -> o1.getSex() != o2.getSex()? o1.getSex(). compareTo(o2.getSex()): o1.getAge().compareTo(o2.getAge())).collect(Collectors.toList()) [{'\u0412\u0430\u0441\u044f'}, {'\u041f\u0435\u0442\u044f'}, {'\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447'}, {'\u0415\u043b\u0435\u043d\u0430'}] \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testSorted () { System . out . println (); System . out . println ( \"Test sorted start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a4\" , \"a3\" , \"a2\" , \"a1\" , \"a4\" ); List < String > sorted = collection . stream (). sorted (). collect ( Collectors . toList ()); System . out . println ( \"sorted = \" + sorted ); List < String > sortedDistinct = collection . stream (). sorted (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"sortedDistinct = \" + sortedDistinct ); List < String > sortedReverse = collection . stream (). sorted (( o1 , o2 ) -> - o1 . compareTo ( o2 )). collect ( Collectors . toList ()); System . out . println ( \"sortedReverse = \" + sortedReverse ); List < String > distinctReverse = collection . stream (). sorted (( o1 , o2 ) -> - o1 . compareTo ( o2 )). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinctReverse = \" + distinctReverse ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); Collection < People > byName = peoples . stream (). sorted (( o1 , o2 ) -> - o1 . getName (). compareTo ( o2 . getName ())). collect ( Collectors . toList ()); System . out . println ( \"byName = \" + byName ); Collection < People > bySexAndAge = peoples . stream (). sorted (( o1 , o2 ) -> o1 . getSex () != o2 . getSex () ? o1 . getSex (). compareTo ( o2 . getSex ()) : o1 . getAge (). compareTo ( o2 . getAge ())). collect ( Collectors . toList ()); System . out . println ( \"bySexAndAge = \" + bySexAndAge ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } }","title":"3.5 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Sorted \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#36-max-min","text":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0434\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00aba2\u00bb, \u00aba3\u00bb, \u00aba1\u00bb), \u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 Peoples \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u043e Sorted \u0438 Filter \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().max(String::compareTo).get() a3 \u041d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0441\u0442\u0440\u043e\u043a collection.stream().min(String::compareTo).get() a1 \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().max((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447', age=69, sex=MAN} \u041d\u0430\u0439\u0434\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c peoples.stream().min((p1, p2) -> p1.getAge().compareTo(p2.getAge())).get() {name='\u0412\u0430\u0441\u044f', age=16, sex=MAN} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testMinMax () { System . out . println (); System . out . println ( \"Test min and max start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); String max = collection . stream (). max ( String :: compareTo ). get (); System . out . println ( \"max \" + max ); String min = collection . stream (). min ( String :: compareTo ). get (); System . out . println ( \"min \" + min ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); People older = peoples . stream (). max (( p1 , p2 ) -> p1 . getAge (). compareTo ( p2 . getAge ())). get (); System . out . println ( \"older \" + older ); People younger = peoples . stream (). min (( p1 , p2 ) -> p1 . getAge (). compareTo ( p2 . getAge ())). get (); System . out . println ( \"younger \" + younger ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } }","title":"3.6 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Max \u0438 Min \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"java/Java%20Stream%20API/#37-foreach-peek","text":"\u041e\u0431\u0435 ForEach \u0438 Peek \u043f\u043e \u0441\u0443\u0442\u0438 \u0434\u0435\u043b\u0430\u044e\u0442 \u043e\u0434\u043d\u043e \u0438 \u0442\u043e\u0436\u0435, \u043c\u0435\u043d\u044f\u044e\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u0438\u043c\u0435, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e ForEach \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043e\u043d\u0430 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c, \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a Peek \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u043d\u0430\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u0438\u043c\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f: Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); \u0418 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \"_new\", \u0442\u043e \u0434\u043b\u044f ForEach \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 list . stream (). forEachOrdered (( p ) -> p . append ( \"_new\" )); \u0430 \u0434\u043b\u044f peek \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 List < StringBuilder > newList = list . stream (). peek (( p ) -> p . append ( \"_new\" )). collect ( Collectors . toList ()); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testForEach () { System . out . println (); System . out . println ( \"For each start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . print ( \"forEach = \" ); collection . stream (). map ( String :: toUpperCase ). forEach (( e ) -> System . out . print ( e + \",\" )); System . out . println (); Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); list . stream (). forEachOrdered (( p ) -> p . append ( \"_new\" )); System . out . println ( \"forEachOrdered = \" + list ); } private static void testPeek () { System . out . println (); System . out . println ( \"Test peek start\" ); Collection < String > collection = Arrays . asList ( \"a1\" , \"a2\" , \"a3\" , \"a1\" ); System . out . print ( \"peak1 = \" ); List < String > peek = collection . stream (). map ( String :: toUpperCase ). peek (( e ) -> System . out . print ( e + \",\" )). collect ( Collectors . toList ()); System . out . println (); System . out . println ( \"peek2 = \" + peek ); Collection < StringBuilder > list = Arrays . asList ( new StringBuilder ( \"a1\" ), new StringBuilder ( \"a2\" ), new StringBuilder ( \"a3\" )); List < StringBuilder > newList = list . stream (). peek (( p ) -> p . append ( \"_new\" )). collect ( Collectors . toList ()); System . out . println ( \"newList = \" + newList ); }","title":"3.7 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f ForEach \u0438 Peek \u0444\u0443\u043d\u043a\u0446\u0438\u0439"},{"location":"java/Java%20Stream%20API/#38-reduce","text":"\u041c\u0435\u0442\u043e\u0434 reduce \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0430 \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0435\u0439 (\u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0443\u043c\u043c\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0442.\u043f.), \u043e\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u0430, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0448\u0430\u0433\u0430\u0445 \u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0423\u0441\u043b\u043e\u0432\u0438\u0435 : \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4, 2) \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f reduce. \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c 0 collection.stream().reduce((s1, s2) -> s1 + s2).orElse(0) 12 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u043b\u0438 -1 collection.stream().reduce(Integer::max).orElse(-1) 4 \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u043b\u0438 0 collection.stream().filter(o -> o % 2 != 0).reduce((s1, s2) -> s1 + s2).orElse(0) 4 \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testReduce () { System . out . println (); System . out . println ( \"Test reduce start\" ); Collection < Integer > collection = Arrays . asList ( 1 , 2 , 3 , 4 , 2 ); Integer sum = collection . stream (). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumOld = 0 ; for ( Integer i : collection ) { sumOld += i ; } System . out . println ( \"sum = \" + sum + \" : \" + sumOld ); Integer max1 = collection . stream (). reduce (( s1 , s2 ) -> s1 > s2 ? s1 : s2 ). orElse ( 0 ); Integer max2 = collection . stream (). reduce ( Integer :: max ). orElse ( 0 ); Integer maxOld = null ; for ( Integer i : collection ) { maxOld = maxOld != null && maxOld > i ? maxOld : i ; } maxOld = maxOld == null ? 0 : maxOld ; System . out . println ( \"max = \" + max1 + \" : \" + max2 + \" : \" + maxOld ); Integer min = collection . stream (). reduce (( s1 , s2 ) -> s1 < s2 ? s1 : s2 ). orElse ( 0 ); Integer minOld = null ; for ( Integer i : collection ) { minOld = minOld != null && minOld < i ? minOld : i ; } minOld = minOld == null ? 0 : minOld ; System . out . println ( \"min = \" + min + \" : \" + minOld ); Integer last = collection . stream (). reduce (( s1 , s2 ) -> s2 ). orElse ( 0 ); Integer lastOld = null ; for ( Integer i : collection ) { lastOld = i ; } lastOld = lastOld == null ? 0 : lastOld ; System . out . println ( \"last = \" + last + \" : \" + lastOld ); Integer sumMore2 = collection . stream (). filter ( o -> o > 2 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumMore2Old = 0 ; for ( Integer i : collection ) { if ( i > 2 ) { sumMore2Old += i ; } } System . out . println ( \"sumMore2 = \" + sumMore2 + \" : \" + sumMore2Old ); Integer sumOdd = collection . stream (). filter ( o -> o % 2 != 0 ). reduce (( s1 , s2 ) -> s1 + s2 ). orElse ( 0 ); Integer sumOddOld = 0 ; for ( Integer i : collection ) { if ( i % 2 != 0 ) { sumOddOld += i ; } } System . out . println ( \"sumOdd = \" + sumOdd + \" : \" + sumOddOld ); Collection < People > peoples = Arrays . asList ( new People ( \"\u0412\u0430\u0441\u044f\" , 16 , Sex . MAN ), new People ( \"\u041f\u0435\u0442\u044f\" , 23 , Sex . MAN ), new People ( \"\u0415\u043b\u0435\u043d\u0430\" , 42 , Sex . WOMEN ), new People ( \"\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\u0438\u0447\" , 69 , Sex . MAN ) ); int oldMan = peoples . stream (). filter (( p ) -> p . getSex () == Sex . MAN ). map ( People :: getAge ). reduce (( s1 , s2 ) -> s1 > s2 ? s1 : s2 ). get (); System . out . println ( \"oldMan = \" + oldMan ); int younger = peoples . stream (). filter (( p ) -> p . getName (). contains ( \"\u0435\" )). mapToInt ( People :: getAge ). reduce (( s1 , s2 ) -> s1 < s2 ? s1 : s2 ). orElse ( 0 ); System . out . println ( \"younger = \" + younger ); } private enum Sex { MAN , WOMEN } private static class People { private final String name ; private final Integer age ; private final Sex sex ; public People ( String name , Integer age , Sex sex ) { this . name = name ; this . age = age ; this . sex = sex ; } public String getName () { return name ; } public Integer getAge () { return age ; } public Sex getSex () { return sex ; } @Override public String toString () { return \"{\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + '}' ; } @Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( ! ( o instanceof People )) return false ; People people = ( People ) o ; return Objects . equals ( name , people . name ) && Objects . equals ( age , people . age ) && Objects . equals ( sex , people . sex ); } @Override public int hashCode () { return Objects . hash ( name , age , sex ); } }","title":"3.8 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Reduce \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#39-toarray-collect","text":"\u0415\u0441\u043b\u0438 \u0441 toArray \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c toArray() \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c Object[], \u043b\u0438\u0431\u043e toArray(T[]::new) \u2014 \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u0438\u043f\u0430 T, \u0442\u043e collect \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e, map'\u0443 \u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0442\u0438\u043f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 List \u0431\u0443\u0434\u0435\u0442 stream.collect(Collectors.toList()). \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 Collectors: \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 toList, toCollection, toSet \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u0438\u043c \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 toConcurrentMap, toMap \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0438\u043c \u0432 map averagingInt, averagingDouble, averagingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 summingInt, summingDouble, summingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 summarizingInt, summarizingDouble, summarizingLong \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442 SummaryStatistics \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 partitioningBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u043a\u0430\u043a Map<Boolean, List> groupingBy \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 Map<N, List mapping \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u043b\u043e\u0436\u043d\u044b\u0445 Collector'\u043e\u0432 \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 collect \u0438 toArray \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445: \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0447\u0438\u0441\u0435\u043b Arrays.asList(1, 2, 3, 4), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b numbers.stream().collect(Collectors.summingInt(((p) -> p % 2 == 1? p: 0))) 4 \u0412\u044b\u0447\u0435\u0441\u0442\u044c \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 1 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 numbers.stream().collect(Collectors.averagingInt((p) -> p \u2014 1)) 1.5 \u041f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0447\u0438\u0441\u043b\u0430\u043c 3 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 numbers.stream().collect(Collectors.summarizingInt((p) -> p + 3)) IntSummaryStatistics{count=4, sum=22, min=4, average=5.5, max=7} \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043d\u0430 \u0447\u0435\u0442\u043d\u044b\u0435 \u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 numbers.stream().collect(Collectors.partitioningBy((p) -> p % 2 == 0)) {false=[1, 3], true=[2, 4]} \u0423\u0441\u043b\u043e\u0432\u0438\u0435: \u0414\u0430\u043d\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a Arrays.asList(\u00aba1\u00bb, \u00abb2\u00bb, \u00abc3\u00bb, \u00aba1\u00bb), \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0443 collect \u0438 toArray \u0441 \u043d\u0435\u0439 \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0434 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 strings.stream().distinct().collect(Collectors.toList()) [a1, b2, c3] \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0431\u0435\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 strings.stream().distinct().map(String::toUpperCase).toArray(String[]::new) {A1, B2, C3} \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0435\u0440\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c: \u0438 \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0435\u0433\u0430\u043c\u0438 <b>\u2026 </b> strings.stream().collect(Collectors.joining(\": \", \"<b> \", \" </b>\")) <b> a1: b2: c3: a1 </b> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0433\u0434\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043a\u043b\u044e\u0447, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 strings.stream().distinct().collect(Collectors.toMap((p) -> p.substring(0, 1), (p) -> p.substring(1, 2))) {a=1, b=2, c=3} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1))) {a=[a1, a1], b=[b2], c=[c3]} \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 map, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0442\u043e\u0440\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0447\u0435\u0440\u0435\u0437 : strings.stream().collect(Collectors.groupingBy((p) -> p.substring(0, 1), Collectors.mapping((p) -> p.substring(1, 2), Collectors.joining(\":\")))) {a=1:1, b=2, c=3} \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e private static void testCollect () { System . out . println (); System . out . println ( \"Test distinct start\" ); Collection < String > strings = Arrays . asList ( \"a1\" , \"b2\" , \"c3\" , \"a1\" ); List < String > distinct = strings . stream (). distinct (). collect ( Collectors . toList ()); System . out . println ( \"distinct = \" + distinct ); String [] array = strings . stream (). distinct (). map ( String :: toUpperCase ). toArray ( String [] :: new ); System . out . println ( \"array = \" + Arrays . asList ( array )); String join = strings . stream (). collect ( Collectors . joining ( \" : \" , \"<b> \" , \" </b>\" )); System . out . println ( \"join = \" + join ); Map < String , String > map = strings . stream (). distinct (). collect ( Collectors . toMap (( p ) -> p . substring ( 0 , 1 ), ( p ) -> p . substring ( 1 , 2 ))); System . out . println ( \"map = \" + map ); Map < String , List < String >> groups = strings . stream (). collect ( Collectors . groupingBy (( p ) -> p . substring ( 0 , 1 ))); System . out . println ( \"groups = \" + groups ); Map < String , String > groupJoin = strings . stream (). collect ( Collectors . groupingBy (( p ) -> p . substring ( 0 , 1 ), Collectors . mapping (( p ) -> p . substring ( 1 , 2 ), Collectors . joining ( \":\" )))); System . out . println ( \"groupJoin = \" + groupJoin ); Collection < Integer > numbers = Arrays . asList ( 1 , 2 , 3 , 4 ); long sumOdd = numbers . stream (). collect ( Collectors . summingInt ((( p ) -> p % 2 == 1 ? p : 0 ))); System . out . println ( \"sumOdd = \" + sumOdd ); double average = numbers . stream (). collect ( Collectors . averagingInt (( p ) -> p - 1 )); System . out . println ( \"average = \" + average ); IntSummaryStatistics statistics = numbers . stream (). collect ( Collectors . summarizingInt (( p ) -> p + 3 )); System . out . println ( \"statistics = \" + statistics ); long sumEven = numbers . stream (). collect ( Collectors . summarizingInt (( p ) -> p % 2 == 0 ? p : 0 )). getSum (); System . out . println ( \"sumEven = \" + sumEven ); Map < Boolean , List < Integer >> parts = numbers . stream (). collect ( Collectors . partitioningBy (( p ) -> p % 2 == 0 )); System . out . println ( \"parts = \" + parts ); }","title":"3.9 \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f toArray \u0438 collect \u0444\u0443\u043d\u043a\u0446\u0438\u0438"},{"location":"java/Java%20Stream%20API/#310-collectora","text":"\u041a\u0440\u043e\u043c\u0435 Collector'\u043e\u0432 \u0443\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 Collectors \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 Collector, \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c. \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e Collector'a: Collector < \u0422\u0438\u043f_\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 , \u0422\u0438\u043f_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 , \u0422\u0438\u043f_\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 > \u0441ollector = Collector . of ( \u043c\u0435\u0442\u043e\u0434_\u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 , \u043c\u0435\u0442\u043e\u0434_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u043a\u0430\u0436\u0434\u043e\u0433\u043e_\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 , \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 , [ \u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 ] ); \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e Collector'a \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0440\u0438 \u0438\u043b\u0438 \u0447\u0435\u0442\u044b\u0440\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 (\u043c\u0435\u0442\u043e\u0434_\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439_\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0430 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d). \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u0434\u043e Java 8, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438: StringBuilder b = new StringBuilder (); for ( String s : strings ) { b . append ( s ). append ( \" , \" ); } String joinBuilderOld = b . toString (); \u0418 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0439 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0432 Java 8 String joinBuilder = strings . stream (). collect ( Collector . of ( StringBuilder :: new , ( b , s ) -> b . append ( s ). append ( \" , \" ), ( b1 , b2 ) -> b1 . append ( b2 ). append ( \" , \" ), StringBuilder :: toString ) ); \u0412 \u043e\u0431\u0449\u0435\u043c-\u0442\u043e, \u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u043e\u0434\u0430 \u0432\u044b\u0448\u0435, \u0438\u0445 \u043c\u044b \u043f\u0438\u0441\u0430\u043b\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439, \u043d\u043e \u0432\u043e\u0442 \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u0435\u0442\u043e\u0434_\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f_\u0434\u0432\u0443\u0445_\u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432? \u042d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Collector'a, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u0440\u0438\u043c\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438 (\u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u0441\u0442\u0435\u0439), \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440 StringBuilder \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c, \u0442\u043e \u043a\u043e\u0434 \u0434\u043e Java 8 \u043f\u0440\u0438 2 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c: StringBuilder b1 = new StringBuilder (); for ( String s : stringsPart1 ) { b1 . append ( s ). append ( \" , \" ); } StringBuilder b2 = new StringBuilder (); for ( String s : stringsPart2 ) { b2 . append ( s ). append ( \" , \" ); } StringBuilder b = b1 . append ( b2 ). append ( \" , \" ), String joinBuilderOld = b . toString (); \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0441\u0432\u043e\u0439 \u0430\u043d\u0430\u043b\u043e\u0433 Collectors.toList() \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u043c \u0441\u0442\u0440\u0438\u043c\u043e\u043c: Collector < String , List < String > , List < String >> toList = Collector . of ( ArrayList :: new , List :: add , ( l1 , l2 ) -> { l1 . addAll ( l2 ); return l1 ; } ); List < String > distinct1 = strings . stream (). distinct (). collect ( toList ); \u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0422\u0430\u043a \u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 github'e Collector < String , StringBuilder , String > stringBuilderCollector = Collector . of ( StringBuilder :: new , ( b , s ) -> b . append ( s ). append ( \" , \" ), ( b1 , b2 ) -> b1 . append ( b2 ). append ( \" , \" ), StringBuilder :: toString ); String joinBuilder = strings . stream (). collect ( stringBuilderCollector ); System . out . println ( \"joinBuilder = \" + joinBuilder ); StringBuilder b = new StringBuilder (); for ( String s : strings ) { b . append ( s ). append ( \" , \" ); } String joinBuilderOld = b . toString (); System . out . println ( \"joinBuilderOld = \" + joinBuilderOld ); Collector < String , List < String > , List < String >> toList = Collector . of ( ArrayList :: new , List :: add , ( l1 , l2 ) -> { l1 . addAll ( l2 ); return l1 ; } ); List < String > distinct1 = strings . stream (). distinct (). collect ( toList ); System . out . println ( \"distinct1 = \" + distinct1 );","title":"3.10 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e Collector'a"},{"location":"java/Java%20Stream%20API/#iv","text":"\u0412\u043e\u0442 \u0438 \u0432\u0441\u0435. \u041d\u0430\u0434\u0435\u044e\u0441\u044c, \u043c\u043e\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0448\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u043e stream api \u0431\u044b\u043b\u0430 \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439. \u0412\u0441\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0438 \u0435\u0441\u0442\u044c \u043d\u0430 github'\u0435 , \u0443\u0434\u0430\u0447\u0438 \u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043a\u043e\u0434\u0430. P.S. \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0430\u0442\u0435\u0439, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e Stream Api: 1. Processing Data with Java SE 8 Streams, Part 1 \u043e\u0442 Oracle, 2. Processing Data with Java SE 8 Streams, Part 2 \u043e\u0442 Oracle, 3. \u041f\u043e\u043b\u043d\u043e\u0435 \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e Java 8 Stream P.P.S. \u0422\u0430\u043a \u0436\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043c\u043e\u0439 opensource \u043f\u0440\u043e\u0435\u043a\u0442 useful-java-links \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u0438 \u0440\u0443\u0441\u0441\u043a\u043e\u044f\u0437\u044b\u0447\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0435\u043e. \u0422\u0430\u043a \u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e opensource \u043f\u043e\u0434\u043f\u0440\u043e\u0435\u043a\u0442 Hello world \u043f\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 Java \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0432 \u043e\u0434\u043d\u043e\u043c maven \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u0431\u0443\u0434\u0443 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0435\u043d \u0437\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u043e\u043c\u043e\u0449\u044c). Source","title":"IV. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/","text":"Modularizing a Spring Boot Application Loading components from other sources Every software project comes to a point where the code should be broken up into modules. These may be modules within a single code base or modules that each live in their own code base. This article explains some Spring Boot features that help to split up your Spring Boot application into several modules. Code Example This article is accompanied by a working code example on GitHub . What\u2019s a Module in Spring Boot? A module in the sense of this article is a set of Spring components loaded into the application context. A module can be a business module, providing some business services to the application or a technical module that provides cross-cutting concerns to several other modules or to the whole of the application. The modules discussed in this article are part of the same monolithic codebase. To better enforce module boundaries, we could split up that monolithic codebase into multiple build modules with Maven or Gradle, if we so wish. Options for Creating Modules The base for a Spring Module is a @Configuration -annotated class along the lines of Spring\u2019s Java configuration feature. There are several ways to define what beans should be loaded by such a configuration class. @ComponentScan The easiest way to create a module is using the @ComponentScan annotation on a configuration class: @Configuration @ComponentScan ( basePackages = \"io.reflectoring.booking\" ) public class BookingModuleConfiguration { } If this configuration class is picked up by one of the importing mechanisms (explained later), it will look through all classes in the package io.reflectoring.booking and load an instance of each class that is annotated with one of Spring\u2019s stereotype annotations into the application context. This way is fine as long as you always want to load all classes of a package and its sub-packages into the application context. If you need more control on what to load, read on. @Bean Definitions Spring\u2019s Java configuration feature also brings the @Bean annotation for creating beans that are loaded into the application context: @Configuration public class BookingModuleConfiguration { @Bean public BookingService bookingService (){ return new BookingService (); } // potentially more @Bean definitions ... } When this configuration class is imported, a BookingService instance will be created and inserted into the application context. Using this way to create a module gives a clearer picture of what beans are actually loaded, since you have a single place to look at - in contrast to using @ComponentScan where you have to look at the stereotype annotations of all classes in the package to see what\u2019s going on. @ConditionalOn... Annotations If you need even more fine-grained control over which components should be loaded into the application context, you can make use of Spring Boot\u2019s @ConditionalOn... annotations: @Configuration @ConditionalOnProperty ( name = \"io.reflectoring.security.enabled\" , havingValue = \"true\" , matchIfMissing = true ) public class SecurityModuleConfiguration { // @Bean definitions ... } Setting the property io.reflectoring.security.enabled to false will now disable this module completely. There are other @ConditionalOn... annotations you can use to define conditions for loading a module. These include a condition depending on the version of the JVM and the existence of a certain class in the classpath or a certain bean in the application context. If you ever asked yourself how Spring Boot magically loads exactly the beans your application needs into the application context, this is how. Spring Boot itself makes heavy use of the @ConditionalOn... annotations. Options for Importing Modules Having created a module, we need to import it into the application. @Import The most straight-forward way is to use the @Import annotation: @SpringBootApplication @Import ( BookingModuleConfiguration . class ) public class ModularApplication { // ... } This will import the BookingModuleConfiguration class and all beans that come with it - no matter whether they are declared by @ComponentScan or @Bean annotations. @Enable... Annotations Spring Boot brings a set of annotations that each import a certain module by themselves. An example is @EnableScheduling , which imports all Beans necessary for the scheduling sub system and its @Scheduled annotation to work. We can make use of this ourselves, by defining our own @EnableBookingModule annotation: @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . TYPE }) @Documented @Import ( BookingModuleConfiguration . class ) @Configuration public @interface EnableBookingModule { } The annotation is used like this: @SpringBootApplication @EnableBookingModule public class ModularApplication { // ... } The @EnableBookingModule annotation is actually just a wrapper around an @Import annotation that imports our BookingModuleConfiguration as before. However, if we have a module consisting of more than one configuration, this is a convenient and expressive way to aggregate these configurations into a single module. Auto-Configuration If we want to load a module automatically instead of hard-wiring the import into the source code, we can make use of Spring Boot\u2019s auto-configuration feature. To enable a module for auto configuration, put the file META-INF/spring.factories into the classpath: org . springframework . boot . autoconfigure . EnableAutoConfiguration = \\ io . reflectoring . security . SecurityModuleConfiguration This would import the SecurityModuleConfiguration class all its beans into the application context. An auto-configuration is especially handy if we\u2019re building a cross-cutting concern to be used in many Spring Boot applications. In this case, we can even build a separate starter module around the configuration. Configuring a Module With the @ConfigurationProperties annotation, Spring Boot provides first-class support for binding external configuration parameters to a Spring bean in a type-safe manner. When to use which Import Strategy? This article presented the major options for creating and importing modules in a Spring Boot application. But when should we use which of those options? Use @Import for Business Modules For modules that contain business logic - like the BookingModuleConfiguration from the code snippets above - a static import with the @Import annotation should suffice in most cases. It usually does not make sense to not load a business module, so we do not need any control about the conditions under which it is loaded. Note that even if a module is always loaded, it still has a right to exist as a module, since it being a module enables it to live in its own package or even its own JAR file. Use Auto-Configuration for Technical Modules Technical modules, on the other hand - like the SecurityModuleConfiguration from above - usually provide some cross-cutting concerns like logging, exception handling, authorization or monitoring features which the application can very well live without. Especially during development, these features may not be desired at all, so we want to have a way to disable them. Also, we do not want to import each technical module statically with @Import , since they should not really have any impact on our code. So, the best option for importing technical modules is the auto-configuration feature. The modules are loaded silently in the background and we can influence them outside of the code with properties. Source","title":"Modularizing a Spring Boot Application"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#code-example","text":"This article is accompanied by a working code example on GitHub .","title":"Code Example"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#whats-a-module-in-spring-boot","text":"A module in the sense of this article is a set of Spring components loaded into the application context. A module can be a business module, providing some business services to the application or a technical module that provides cross-cutting concerns to several other modules or to the whole of the application. The modules discussed in this article are part of the same monolithic codebase. To better enforce module boundaries, we could split up that monolithic codebase into multiple build modules with Maven or Gradle, if we so wish.","title":"What\u2019s a Module in Spring Boot?"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#options-for-creating-modules","text":"The base for a Spring Module is a @Configuration -annotated class along the lines of Spring\u2019s Java configuration feature. There are several ways to define what beans should be loaded by such a configuration class.","title":"Options for Creating Modules"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#componentscan","text":"The easiest way to create a module is using the @ComponentScan annotation on a configuration class: @Configuration @ComponentScan ( basePackages = \"io.reflectoring.booking\" ) public class BookingModuleConfiguration { } If this configuration class is picked up by one of the importing mechanisms (explained later), it will look through all classes in the package io.reflectoring.booking and load an instance of each class that is annotated with one of Spring\u2019s stereotype annotations into the application context. This way is fine as long as you always want to load all classes of a package and its sub-packages into the application context. If you need more control on what to load, read on.","title":"@ComponentScan"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#bean-definitions","text":"Spring\u2019s Java configuration feature also brings the @Bean annotation for creating beans that are loaded into the application context: @Configuration public class BookingModuleConfiguration { @Bean public BookingService bookingService (){ return new BookingService (); } // potentially more @Bean definitions ... } When this configuration class is imported, a BookingService instance will be created and inserted into the application context. Using this way to create a module gives a clearer picture of what beans are actually loaded, since you have a single place to look at - in contrast to using @ComponentScan where you have to look at the stereotype annotations of all classes in the package to see what\u2019s going on.","title":"@Bean Definitions"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#conditionalon-annotations","text":"If you need even more fine-grained control over which components should be loaded into the application context, you can make use of Spring Boot\u2019s @ConditionalOn... annotations: @Configuration @ConditionalOnProperty ( name = \"io.reflectoring.security.enabled\" , havingValue = \"true\" , matchIfMissing = true ) public class SecurityModuleConfiguration { // @Bean definitions ... } Setting the property io.reflectoring.security.enabled to false will now disable this module completely. There are other @ConditionalOn... annotations you can use to define conditions for loading a module. These include a condition depending on the version of the JVM and the existence of a certain class in the classpath or a certain bean in the application context. If you ever asked yourself how Spring Boot magically loads exactly the beans your application needs into the application context, this is how. Spring Boot itself makes heavy use of the @ConditionalOn... annotations.","title":"@ConditionalOn... Annotations"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#options-for-importing-modules","text":"Having created a module, we need to import it into the application.","title":"Options for Importing Modules"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#import","text":"The most straight-forward way is to use the @Import annotation: @SpringBootApplication @Import ( BookingModuleConfiguration . class ) public class ModularApplication { // ... } This will import the BookingModuleConfiguration class and all beans that come with it - no matter whether they are declared by @ComponentScan or @Bean annotations.","title":"@Import"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#enable-annotations","text":"Spring Boot brings a set of annotations that each import a certain module by themselves. An example is @EnableScheduling , which imports all Beans necessary for the scheduling sub system and its @Scheduled annotation to work. We can make use of this ourselves, by defining our own @EnableBookingModule annotation: @Retention ( RetentionPolicy . RUNTIME ) @Target ({ ElementType . TYPE }) @Documented @Import ( BookingModuleConfiguration . class ) @Configuration public @interface EnableBookingModule { } The annotation is used like this: @SpringBootApplication @EnableBookingModule public class ModularApplication { // ... } The @EnableBookingModule annotation is actually just a wrapper around an @Import annotation that imports our BookingModuleConfiguration as before. However, if we have a module consisting of more than one configuration, this is a convenient and expressive way to aggregate these configurations into a single module.","title":"@Enable... Annotations"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#auto-configuration","text":"If we want to load a module automatically instead of hard-wiring the import into the source code, we can make use of Spring Boot\u2019s auto-configuration feature. To enable a module for auto configuration, put the file META-INF/spring.factories into the classpath: org . springframework . boot . autoconfigure . EnableAutoConfiguration = \\ io . reflectoring . security . SecurityModuleConfiguration This would import the SecurityModuleConfiguration class all its beans into the application context. An auto-configuration is especially handy if we\u2019re building a cross-cutting concern to be used in many Spring Boot applications. In this case, we can even build a separate starter module around the configuration.","title":"Auto-Configuration"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#configuring-a-module","text":"With the @ConfigurationProperties annotation, Spring Boot provides first-class support for binding external configuration parameters to a Spring bean in a type-safe manner.","title":"Configuring a Module"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#when-to-use-which-import-strategy","text":"This article presented the major options for creating and importing modules in a Spring Boot application. But when should we use which of those options?","title":"When to use which Import Strategy?"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#use-import-for-business-modules","text":"For modules that contain business logic - like the BookingModuleConfiguration from the code snippets above - a static import with the @Import annotation should suffice in most cases. It usually does not make sense to not load a business module, so we do not need any control about the conditions under which it is loaded. Note that even if a module is always loaded, it still has a right to exist as a module, since it being a module enables it to live in its own package or even its own JAR file.","title":"Use @Import for Business Modules"},{"location":"java/Modularizing%20a%20Spring%20Boot%20Application/#use-auto-configuration-for-technical-modules","text":"Technical modules, on the other hand - like the SecurityModuleConfiguration from above - usually provide some cross-cutting concerns like logging, exception handling, authorization or monitoring features which the application can very well live without. Especially during development, these features may not be desired at all, so we want to have a way to disable them. Also, we do not want to import each technical module statically with @Import , since they should not really have any impact on our code. So, the best option for importing technical modules is the auto-configuration feature. The modules are loaded silently in the background and we can influence them outside of the code with properties. Source","title":"Use Auto-Configuration for Technical Modules"},{"location":"java/PKIX%20path%20building%20failed%20%D0%BF%D1%80%D0%B8%20SSL%20%D1%81%D0%BE%D0%B5%D0%B4%D0%B8%D0%BD%D0%B5%D0%BD%D0%B8%D0%B8/","text":"PKIX path building failed \u043f\u0440\u0438 SSL \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 PKIX path building failed \u041e\u0448\u0438\u0431\u043a\u0430: `sun.security.validator.<a id=\"yui_patched_v3_11_0_1_1517930696394_720\"></a>ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target` \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u044f SSL \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0436\u0430\u0432\u044b. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0442\u0443\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: 1) \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u0440\u0435\u0441\u0443\u0440 2) \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430. \u041d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 Google Chrome: \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (F12) \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0432\u043a\u043b\u0430\u0434\u043a\u0443 Security -> View certificate -> Detais -> Export \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u043d\u0430 \u0434\u0438\u0441\u043a \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0443 keytool \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043e\u0442 keystore: changeit keytool -import -alias your_alias -file ~/_.google.com.ru -keystore $JAVA_HOME /jre/lib/security/cacerts \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0436\u0430\u0432\u044b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 keystore \u0438 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c. Source","title":"PKIX path building failed \u043f\u0440\u0438 SSL \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438"},{"location":"java/PKIX%20path%20building%20failed%20%D0%BF%D1%80%D0%B8%20SSL%20%D1%81%D0%BE%D0%B5%D0%B4%D0%B8%D0%BD%D0%B5%D0%BD%D0%B8%D0%B8/#pkix-path-building-failed","text":"\u041e\u0448\u0438\u0431\u043a\u0430: `sun.security.validator.<a id=\"yui_patched_v3_11_0_1_1517930696394_720\"></a>ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target` \u0414\u0430\u043d\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0432\u0438\u044f SSL \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0436\u0430\u0432\u044b. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0442\u0443\u0434\u0430 \u043c\u043e\u0436\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: 1) \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u0440\u0435\u0441\u0443\u0440 2) \u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430. \u041d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 Google Chrome: \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (F12) \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 \u0432\u043a\u043b\u0430\u0434\u043a\u0443 Security -> View certificate -> Detais -> Export \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0439 \u0444\u0430\u0439\u043b \u043d\u0430 \u0434\u0438\u0441\u043a \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0443 keytool \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442 \u0432 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435. \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u043e\u0442 keystore: changeit keytool -import -alias your_alias -file ~/_.google.com.ru -keystore $JAVA_HOME /jre/lib/security/cacerts \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043c\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0436\u0430\u0432\u044b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d \u043d\u043e\u0432\u044b\u0439 keystore \u0438 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c. Source","title":"PKIX path building failed"},{"location":"java/Pointcut%20Expressions%20in%20Spring/","text":"Pointcut Expressions in Spring 1. Overview In this tutorial we will discuss the Spring AOP pointcut expression language. We will first introduce some terminology used in aspect-oriented programming. A join point is a step of the program execution, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution. A pointcut is a predicate that matches the join points and a pointcut expression language is a way of describing pointcuts programmatically. 2. Usage A pointcut expression can appear as a value of the @Pointcut annotation: @Pointcut ( \"within(@org.springframework.stereotype.Repository *)\" ) public void repositoryClassMethods () {} The method declaration is called the pointcut signature . It provides a name that can be used by advice annotations to refer to that pointcut. @Around ( \"repositoryClassMethods()\" ) public Object measureMethodExecutionTime ( ProceedingJoinPoint pjp ) throws Throwable { ... } A pointcut expression could also appear as the value of the expression property of an aop:pointcut tag: <aop:config> <aop:pointcut id= \"anyDaoMethod\" expression= \"@target(org.springframework.stereotype.Repository)\" /> </aop:config> 3. Pointcut Designators A pointcut expression starts with a pointcut designator (PCD) , which is a keyword telling Spring AOP what to match. There are several pointcut designators, such as the execution of a method, a type, method arguments, or annotations. 3.1 execution The primary Spring PCD is execution , which matches method execution join points. @Pointcut ( \"execution(public String com.baeldung.pointcutadvice.dao.FooDao.findById(Long))\" ) This example pointcut will match exactly the execution of findById method of the FooDao class. This works, but it is not very flexible. Suppose we would like to match all the methods of the FooDao class, which may have different signatures, return types, and arguments. To achieve this we may use wildcards: @Pointcut ( \"execution(* com.baeldung.pointcutadvice.dao.FooDao.*(..))\" ) Here the first wildcard matches any return value, the second matches any method name, and the (..) pattern matches any number of parameters (zero or more). 3.2 within Another way to achieve the same result from the previous section is by using the within PCD, which limits matching to join points of certain types. @Pointcut ( \"within(com.baeldung.pointcutadvice.dao.FooDao)\" ) We could also match any type within the com.baeldung package or a sub-package. @Pointcut ( \"within(com.baeldung..*)\" ) 3.3 this and target this limits matching to join points where the bean reference is an instance of the given type, while target limits matching to join points where the target object is an instance of the given type. The former works when Spring AOP creates a CGLIB-based proxy, and the latter is used when a JDK-based proxy is created. Suppose that the target class implements an interface: public class FooDao implements BarDao { ... } In this case, Spring AOP will use the JDK-based proxy and you should use the target PCD because the proxied object will be an instance of Proxy class and implement the BarDao interface: @Pointcut ( \"target(com.baeldung.pointcutadvice.dao.BarDao)\" ) On the other hand if FooDao doesn't implement any interface or proxyTargetClass property is set to true then the proxied object will be a subclass of FooDao and the this PCD could be used: @Pointcut ( \"this(com.baeldung.pointcutadvice.dao.FooDao)\" ) 3.4 args This PCD is used for matching particular method arguments: @Pointcut ( \"execution(* *..find*(Long))\" ) This pointcut matches any method that starts with find and has only one parameter of type Long . If we want to match a method with any number of parameters but having the fist parameter of type Long , we could use the following expression: @Pointcut ( \"execution(* *..find*(Long,..))\" ) 3.5 @target The @target PCD (not to be confused with the target PCD described above) limits matching to join points where the class of the executing object has an annotation of the given type: @Pointcut ( \"@target(org.springframework.stereotype.Repository)\" ) 3.6 @args This PCD limits matching to join points where the runtime type of the actual arguments passed have annotations of the given type(s). Suppose that we want to trace all the methods accepting beans annotated with @Entity annotation: @Pointcut ( \"@args(com.baeldung.pointcutadvice.annotations.Entity)\" ) public void methodsAcceptingEntities () {} To access the argument we should provide a JoinPoint argument to the advice: @Before ( \"methodsAcceptingEntities()\" ) public void logMethodAcceptionEntityAnnotatedBean ( JoinPoint jp ) { logger . info ( \"Accepting beans with @Entity annotation: \" + jp . getArgs () [ 0 ] ); } 3.7 @within This PCD limits matching to join points within types that have the given annotation: @Pointcut ( \"@within(org.springframework.stereotype.Repository)\" ) Which is equivalent to: @Pointcut ( \"within(@org.springframework.stereotype.Repository *)\" ) 3.8 @annotation This PCD limits matching to join points where the subject of the join point has the given annotation. For example we may create a @Loggable annotation: @Pointcut ( \"@annotation(com.baeldung.pointcutadvice.annotations.Loggable)\" ) public void loggableMethods () {} Then we may log execution of the methods marked by that annotation: @Before ( \"loggableMethods()\" ) public void logMethod ( JoinPoint jp ) { String methodName = jp . getSignature (). getName (); logger . info ( \"Executing method: \" + methodName ); } 4. Combining Pointcut Expressions Pointcut expressions can be combined using && , || and ! operators: @Pointcut ( \"@target(org.springframework.stereotype.Repository)\" ) public void repositoryMethods () {} @Pointcut ( \"execution(* *..create*(Long,..))\" ) public void firstLongParamMethods () {} @Pointcut ( \"repositoryMethods() && firstLongParamMethods()\" ) public void entityCreationMethods () {} 5. Conclusion In this quick intro to Spring AOP and pointcuts, we illustrated some examples of pointcut expressions usage. The full set of examples can be found over on GitHub . Source","title":"Pointcut Expressions in Spring"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#1-overview","text":"In this tutorial we will discuss the Spring AOP pointcut expression language. We will first introduce some terminology used in aspect-oriented programming. A join point is a step of the program execution, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution. A pointcut is a predicate that matches the join points and a pointcut expression language is a way of describing pointcuts programmatically.","title":"1. Overview"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#2-usage","text":"A pointcut expression can appear as a value of the @Pointcut annotation: @Pointcut ( \"within(@org.springframework.stereotype.Repository *)\" ) public void repositoryClassMethods () {} The method declaration is called the pointcut signature . It provides a name that can be used by advice annotations to refer to that pointcut. @Around ( \"repositoryClassMethods()\" ) public Object measureMethodExecutionTime ( ProceedingJoinPoint pjp ) throws Throwable { ... } A pointcut expression could also appear as the value of the expression property of an aop:pointcut tag: <aop:config> <aop:pointcut id= \"anyDaoMethod\" expression= \"@target(org.springframework.stereotype.Repository)\" /> </aop:config>","title":"2. Usage"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#3-pointcut-designators","text":"A pointcut expression starts with a pointcut designator (PCD) , which is a keyword telling Spring AOP what to match. There are several pointcut designators, such as the execution of a method, a type, method arguments, or annotations.","title":"3. Pointcut Designators"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#31-execution","text":"The primary Spring PCD is execution , which matches method execution join points. @Pointcut ( \"execution(public String com.baeldung.pointcutadvice.dao.FooDao.findById(Long))\" ) This example pointcut will match exactly the execution of findById method of the FooDao class. This works, but it is not very flexible. Suppose we would like to match all the methods of the FooDao class, which may have different signatures, return types, and arguments. To achieve this we may use wildcards: @Pointcut ( \"execution(* com.baeldung.pointcutadvice.dao.FooDao.*(..))\" ) Here the first wildcard matches any return value, the second matches any method name, and the (..) pattern matches any number of parameters (zero or more).","title":"3.1 execution"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#32-within","text":"Another way to achieve the same result from the previous section is by using the within PCD, which limits matching to join points of certain types. @Pointcut ( \"within(com.baeldung.pointcutadvice.dao.FooDao)\" ) We could also match any type within the com.baeldung package or a sub-package. @Pointcut ( \"within(com.baeldung..*)\" )","title":"3.2 within"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#33-this-and-target","text":"this limits matching to join points where the bean reference is an instance of the given type, while target limits matching to join points where the target object is an instance of the given type. The former works when Spring AOP creates a CGLIB-based proxy, and the latter is used when a JDK-based proxy is created. Suppose that the target class implements an interface: public class FooDao implements BarDao { ... } In this case, Spring AOP will use the JDK-based proxy and you should use the target PCD because the proxied object will be an instance of Proxy class and implement the BarDao interface: @Pointcut ( \"target(com.baeldung.pointcutadvice.dao.BarDao)\" ) On the other hand if FooDao doesn't implement any interface or proxyTargetClass property is set to true then the proxied object will be a subclass of FooDao and the this PCD could be used: @Pointcut ( \"this(com.baeldung.pointcutadvice.dao.FooDao)\" )","title":"3.3 this and target"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#34-args","text":"This PCD is used for matching particular method arguments: @Pointcut ( \"execution(* *..find*(Long))\" ) This pointcut matches any method that starts with find and has only one parameter of type Long . If we want to match a method with any number of parameters but having the fist parameter of type Long , we could use the following expression: @Pointcut ( \"execution(* *..find*(Long,..))\" )","title":"3.4 args"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#35-target","text":"The @target PCD (not to be confused with the target PCD described above) limits matching to join points where the class of the executing object has an annotation of the given type: @Pointcut ( \"@target(org.springframework.stereotype.Repository)\" )","title":"3.5 @target"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#36-args","text":"This PCD limits matching to join points where the runtime type of the actual arguments passed have annotations of the given type(s). Suppose that we want to trace all the methods accepting beans annotated with @Entity annotation: @Pointcut ( \"@args(com.baeldung.pointcutadvice.annotations.Entity)\" ) public void methodsAcceptingEntities () {} To access the argument we should provide a JoinPoint argument to the advice: @Before ( \"methodsAcceptingEntities()\" ) public void logMethodAcceptionEntityAnnotatedBean ( JoinPoint jp ) { logger . info ( \"Accepting beans with @Entity annotation: \" + jp . getArgs () [ 0 ] ); }","title":"3.6 @args"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#37-within","text":"This PCD limits matching to join points within types that have the given annotation: @Pointcut ( \"@within(org.springframework.stereotype.Repository)\" ) Which is equivalent to: @Pointcut ( \"within(@org.springframework.stereotype.Repository *)\" )","title":"3.7 @within"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#38-annotation","text":"This PCD limits matching to join points where the subject of the join point has the given annotation. For example we may create a @Loggable annotation: @Pointcut ( \"@annotation(com.baeldung.pointcutadvice.annotations.Loggable)\" ) public void loggableMethods () {} Then we may log execution of the methods marked by that annotation: @Before ( \"loggableMethods()\" ) public void logMethod ( JoinPoint jp ) { String methodName = jp . getSignature (). getName (); logger . info ( \"Executing method: \" + methodName ); }","title":"3.8 @annotation"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#4-combining-pointcut-expressions","text":"Pointcut expressions can be combined using && , || and ! operators: @Pointcut ( \"@target(org.springframework.stereotype.Repository)\" ) public void repositoryMethods () {} @Pointcut ( \"execution(* *..create*(Long,..))\" ) public void firstLongParamMethods () {} @Pointcut ( \"repositoryMethods() && firstLongParamMethods()\" ) public void entityCreationMethods () {}","title":"4. Combining Pointcut Expressions"},{"location":"java/Pointcut%20Expressions%20in%20Spring/#5-conclusion","text":"In this quick intro to Spring AOP and pointcuts, we illustrated some examples of pointcut expressions usage. The full set of examples can be found over on GitHub . Source","title":"5. Conclusion"},{"location":"java/Random%20Data%20Generators%20Java/","text":"Random Data Generators Java Random Data Generators for API Testing in Java One of the major problems of a test automation framework is the change of data that makes the tests flaky. Because if someone/or some process changes the data that was used by the test, the test would fail. One way to solve this issue is to create test data as part of the test itself. This makes test more robust because the data is now part of the test and it can\u2019t change. In a previous post we discussed about the strategies to generate test data using POJO s and Lombok \u2019s builder. This is a continuation of that post, but it\u2019s more focused on the use of random data instead of using static values. With random data, we are communicating that the particular piece of data is not relevant to the specific test. We want to generate data to reduce the amount of boilerplate, and make tests clear in terms of what data is required to exercise the test without generating a bunch of noise that is not relevant to the test. In a sense, we aspire to create robust tests by using random values. There are various ways to generate random data in Java, but here we will discuss mainly about Java Faker , JsonTemplate and random-beans libraries. We would see how we can use these libraries in conjunction with REST-assured to run an automated functional API test. Java Faker Java Faker can be used to generate a variety of real looking data. In order to use Java Faker in a project, we need to add the following maven dependency to our POM : <dependency> <groupId> com.github.javafaker </groupId> <artifactId> javafaker </artifactId> <version> 0.17.2 </version> </dependency> Java Faker provides us with FakerValueService that in turn contains methods to generate random sequences of letters, numbers and both. letterify(String letterString) method allows us to generate random alphabetic characters for the ? characters in the letterString that is passed to letterify() . numerify(String numberString) method allows us to generate random numerical characters for the # characters in the numberString that is passed to numerify() . bothify(String alphanumericString) method allows us to generate random alphanumeric characters for the ? and # characters in the alphanumericString that is passed to bothify() . regexify(String regex) method allows us to generate a String that matches the given regular expression. FakeValuesService faker = new FakeValuesService ( new Locale ( \"en-US\" ), new RandomService ()); faker . letterify ( \"12??89\" ); //will return something like \"12hZ89\" faker . numerify ( \"ABC##EF\" ); //will return something like \"ABC99EF\" faker . bothify ( \"12??##ED\" ); //will return something like \"12iL27ED\" faker . regexify ( \"[a-z1-9]{4}\" ); //will return something like \"6bJ1\" Now, the question arises that how we can use the random values generated by the FakeValueService to create random data in our test. For this specific purpose, we can leverage POJO s that use Lombok \u2019s @Builder annotation. Furthermore, we can use @Default annotation for the Builder to generate random data by default. So when we call POJO.builder().build() it should generate a POJO object with all fields auto populated by random values. One advantage of this approach is that we can override the random values in the builder to have a hybrid of random and hard coded values. @Getter @Builder public class Document { @Default private String title = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String socialTitle = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String heading = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String description = faker . regexify ( \"[a-z1-9]{10}\" ); } @Test public void testDefaultValues () { // this will generate a document with random values auto // populated for all fields as per the regex Document doc = Document . builder (). build (); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); } @Test public void testHybridValues () { // this will generate a document with random values // overridden for the methods called in builder Document doc = Document . builder (). . description ( \"description\" ) . title ( \"title\" ) . build (); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); } JsonTemplate JsonTemplate is a tool to generate json Strings. JsonTemplate allows us to generate a schema-compatible json without bothering about the specific values. In order to use JsonTemplate in a project, we will need the following dependency in our POM : <dependency> <groupId> com.github.json-template </groupId> <artifactId> jsontemplate </artifactId> <version> 0.2.1 </version> </dependency> In JsonTemplate , @x can refer to a value producer such as @s which generates a random String for you. There are other value producers such as @i for integers, @f for floats, @ip for an ip String. If a map parameter is given, the value producer produces a value according to the map values. For example, @s(min=10, max=20) will produce a String with a length between 10 and 20. For the Document class given above, we can write a JsonTemplate and use in a test as following: @Test public void testJsonTemplate () { String template = new JsonTemplate ( new StringBuilder () . append ( \"{\" ) . append ( \"title:@s(min=10, max=20),\" ) . append ( \"socialTitle:@s(min=10, max=20),\" ) . append ( \"heading:@s(min=10, max=20),\" ) . append ( \"description:@s(min=10, max=20)\" ) . append ( \"}\" ) . toString ()). prettyString (); Document doc = new Gson (). fromJson ( template , Document . class ); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); } As we can see from above example that it\u2019s not very easy to produce templates because it requires us to build a String first. If the json happens to be nested, then it can easily become a nightmare to maintain these templates. Random Beans With Random Beans we can generate beans with random values for all fields. It provides us with a nextObject(Class class) method, which produces a random Object of the class that was passed. One of the main advantages of Random Beans library is that it can create an Object graph of all the Objects used in a class with nested structure. In order to use Random Beans in a project, we will need the following dependency: <dependency> <groupId> io.github.benas </groupId> <artifactId> random-beans </artifactId> <version> 3.8.0 </version> </dependency> Random Beans can be used to create random data for a test. Using EnhancedRandom class we can configure our random values for certain types as follows : EnhancedRandom enhancedRandom = EnhancedRandomBuilder . aNewEnhancedRandomBuilder () . seed ( 123L ) . objectPoolSize ( 100 ) . stringLengthRange ( 4 , 10 ) . collectionSizeRange ( 1 , 10 ) . scanClasspathForConcreteTypes ( true ) . build (); Once set, these parameters will be applied to all fields of the Object graph. stringLengthRange tells EnhancedRandom to generate a Strings with bounded size. When we set a seed value, each run produces the same random value. This feature is useful when one wants stable random values across the JVM restarts. We can learn more about these parameters here as well. By default, Random Beans generates random values according to field type. However, we can use Randomizer interface to generate more meaningful random values. For instance, if we want to choose a random value from a set of values we can implement the Randomizer interface and override it\u2019s getRandomValue() method to produce our custom random value as follows: public class NumericalStringRandomizer implements Randomizer < String > { @Override public String getRandomValue () { return String . valueOf ( new Random (). nextInt ( 99000 ) + 1000 ); } } Using the above NumericalStringRandomizer we can get a random String with values ranging from \u201c1000\u201d to \u201c100000\u201d . In order to be able to use NumericalStringRandomizer we will need to annotate the field with @Randomizer in our class. @Randomizer ( NumericalStringRandomizer . class ) private String key ; If we want to exclude a particular field from producing a random value, we can annotate that field with @Exclude as follows: @Exclude private Long id ; Following is an example of a class that can generate a random bean with different type of randomizers that one can define: @Getter public class Document { @Exclude private Long id ; private String title ; private String socialTitle ; private String heading ; @Randomizer ( NumericalStringRandomizer . class ) private String key ; private String description ; } We can use the class above in our REST-assured test as follows : @Test public void testDocumentForMetaData () { EnhancedRandom enhancedRandom = EnhancedRandomBuilder . aNewEnhancedRandomBuilder () . objectPoolSize ( 100 ) . stringLengthRange ( 4 , 10 ) . build (); Document doc = enhancedRandom . nextObject ( Document . class ); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); }); } One problem with using Random Beans to generate test data is that it requires us to create Randomizers for fields that require static values. There is not an easy work around for generating a random bean with both random and static values. This was a brief analysis of some of a few random data generator java libraries available to use and how we could use them to generate test data. Hope you enjoyed reading the blog post and were able to learn about generating random test data from it. Thanks a lot for reading! Source","title":"Random Data Generators Java"},{"location":"java/Random%20Data%20Generators%20Java/#random-data-generators-for-api-testing-in-java","text":"One of the major problems of a test automation framework is the change of data that makes the tests flaky. Because if someone/or some process changes the data that was used by the test, the test would fail. One way to solve this issue is to create test data as part of the test itself. This makes test more robust because the data is now part of the test and it can\u2019t change. In a previous post we discussed about the strategies to generate test data using POJO s and Lombok \u2019s builder. This is a continuation of that post, but it\u2019s more focused on the use of random data instead of using static values. With random data, we are communicating that the particular piece of data is not relevant to the specific test. We want to generate data to reduce the amount of boilerplate, and make tests clear in terms of what data is required to exercise the test without generating a bunch of noise that is not relevant to the test. In a sense, we aspire to create robust tests by using random values. There are various ways to generate random data in Java, but here we will discuss mainly about Java Faker , JsonTemplate and random-beans libraries. We would see how we can use these libraries in conjunction with REST-assured to run an automated functional API test.","title":"Random Data Generators for API Testing in Java"},{"location":"java/Random%20Data%20Generators%20Java/#java-faker","text":"Java Faker can be used to generate a variety of real looking data. In order to use Java Faker in a project, we need to add the following maven dependency to our POM : <dependency> <groupId> com.github.javafaker </groupId> <artifactId> javafaker </artifactId> <version> 0.17.2 </version> </dependency> Java Faker provides us with FakerValueService that in turn contains methods to generate random sequences of letters, numbers and both. letterify(String letterString) method allows us to generate random alphabetic characters for the ? characters in the letterString that is passed to letterify() . numerify(String numberString) method allows us to generate random numerical characters for the # characters in the numberString that is passed to numerify() . bothify(String alphanumericString) method allows us to generate random alphanumeric characters for the ? and # characters in the alphanumericString that is passed to bothify() . regexify(String regex) method allows us to generate a String that matches the given regular expression. FakeValuesService faker = new FakeValuesService ( new Locale ( \"en-US\" ), new RandomService ()); faker . letterify ( \"12??89\" ); //will return something like \"12hZ89\" faker . numerify ( \"ABC##EF\" ); //will return something like \"ABC99EF\" faker . bothify ( \"12??##ED\" ); //will return something like \"12iL27ED\" faker . regexify ( \"[a-z1-9]{4}\" ); //will return something like \"6bJ1\" Now, the question arises that how we can use the random values generated by the FakeValueService to create random data in our test. For this specific purpose, we can leverage POJO s that use Lombok \u2019s @Builder annotation. Furthermore, we can use @Default annotation for the Builder to generate random data by default. So when we call POJO.builder().build() it should generate a POJO object with all fields auto populated by random values. One advantage of this approach is that we can override the random values in the builder to have a hybrid of random and hard coded values. @Getter @Builder public class Document { @Default private String title = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String socialTitle = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String heading = faker . regexify ( \"[a-z1-9]{10}\" ); @Default private String description = faker . regexify ( \"[a-z1-9]{10}\" ); } @Test public void testDefaultValues () { // this will generate a document with random values auto // populated for all fields as per the regex Document doc = Document . builder (). build (); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); } @Test public void testHybridValues () { // this will generate a document with random values // overridden for the methods called in builder Document doc = Document . builder (). . description ( \"description\" ) . title ( \"title\" ) . build (); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); }","title":"Java Faker"},{"location":"java/Random%20Data%20Generators%20Java/#jsontemplate","text":"JsonTemplate is a tool to generate json Strings. JsonTemplate allows us to generate a schema-compatible json without bothering about the specific values. In order to use JsonTemplate in a project, we will need the following dependency in our POM : <dependency> <groupId> com.github.json-template </groupId> <artifactId> jsontemplate </artifactId> <version> 0.2.1 </version> </dependency> In JsonTemplate , @x can refer to a value producer such as @s which generates a random String for you. There are other value producers such as @i for integers, @f for floats, @ip for an ip String. If a map parameter is given, the value producer produces a value according to the map values. For example, @s(min=10, max=20) will produce a String with a length between 10 and 20. For the Document class given above, we can write a JsonTemplate and use in a test as following: @Test public void testJsonTemplate () { String template = new JsonTemplate ( new StringBuilder () . append ( \"{\" ) . append ( \"title:@s(min=10, max=20),\" ) . append ( \"socialTitle:@s(min=10, max=20),\" ) . append ( \"heading:@s(min=10, max=20),\" ) . append ( \"description:@s(min=10, max=20)\" ) . append ( \"}\" ) . toString ()). prettyString (); Document doc = new Gson (). fromJson ( template , Document . class ); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); } As we can see from above example that it\u2019s not very easy to produce templates because it requires us to build a String first. If the json happens to be nested, then it can easily become a nightmare to maintain these templates.","title":"JsonTemplate"},{"location":"java/Random%20Data%20Generators%20Java/#random-beans","text":"With Random Beans we can generate beans with random values for all fields. It provides us with a nextObject(Class class) method, which produces a random Object of the class that was passed. One of the main advantages of Random Beans library is that it can create an Object graph of all the Objects used in a class with nested structure. In order to use Random Beans in a project, we will need the following dependency: <dependency> <groupId> io.github.benas </groupId> <artifactId> random-beans </artifactId> <version> 3.8.0 </version> </dependency> Random Beans can be used to create random data for a test. Using EnhancedRandom class we can configure our random values for certain types as follows : EnhancedRandom enhancedRandom = EnhancedRandomBuilder . aNewEnhancedRandomBuilder () . seed ( 123L ) . objectPoolSize ( 100 ) . stringLengthRange ( 4 , 10 ) . collectionSizeRange ( 1 , 10 ) . scanClasspathForConcreteTypes ( true ) . build (); Once set, these parameters will be applied to all fields of the Object graph. stringLengthRange tells EnhancedRandom to generate a Strings with bounded size. When we set a seed value, each run produces the same random value. This feature is useful when one wants stable random values across the JVM restarts. We can learn more about these parameters here as well. By default, Random Beans generates random values according to field type. However, we can use Randomizer interface to generate more meaningful random values. For instance, if we want to choose a random value from a set of values we can implement the Randomizer interface and override it\u2019s getRandomValue() method to produce our custom random value as follows: public class NumericalStringRandomizer implements Randomizer < String > { @Override public String getRandomValue () { return String . valueOf ( new Random (). nextInt ( 99000 ) + 1000 ); } } Using the above NumericalStringRandomizer we can get a random String with values ranging from \u201c1000\u201d to \u201c100000\u201d . In order to be able to use NumericalStringRandomizer we will need to annotate the field with @Randomizer in our class. @Randomizer ( NumericalStringRandomizer . class ) private String key ; If we want to exclude a particular field from producing a random value, we can annotate that field with @Exclude as follows: @Exclude private Long id ; Following is an example of a class that can generate a random bean with different type of randomizers that one can define: @Getter public class Document { @Exclude private Long id ; private String title ; private String socialTitle ; private String heading ; @Randomizer ( NumericalStringRandomizer . class ) private String key ; private String description ; } We can use the class above in our REST-assured test as follows : @Test public void testDocumentForMetaData () { EnhancedRandom enhancedRandom = EnhancedRandomBuilder . aNewEnhancedRandomBuilder () . objectPoolSize ( 100 ) . stringLengthRange ( 4 , 10 ) . build (); Document doc = enhancedRandom . nextObject ( Document . class ); Document response = given (). spec ( RequestSpec ). body ( doc ). post ( \"/document\" ). as ( Document . class ); assertThat ( response , sameBeanAs ( doc )); }); } One problem with using Random Beans to generate test data is that it requires us to create Randomizers for fields that require static values. There is not an easy work around for generating a random bean with both random and static values. This was a brief analysis of some of a few random data generator java libraries available to use and how we could use them to generate test data. Hope you enjoyed reading the blog post and were able to learn about generating random test data from it. Thanks a lot for reading! Source","title":"Random Beans"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/","text":"Spring REST Error Handling Example In this article, we will show you error handling in Spring Boot REST application. Technologies used : Spring Boot 2.1.2.RELEASE Spring 5.1.4.RELEASE Maven 3 Java 8 1. /error 1.1 By default, Spring Boot provides a BasicErrorController controller for /error mapping that handles all errors, and getErrorAttributes to produce a JSON response with details of the error, the HTTP status, and the exception message. { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"...\" , \"path\" : \"/path\" } BasicErrorController.java package org.springframework.boot.autoconfigure.web.servlet.error ; @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity <> ( body , status ); } In the IDE, puts a breakpoint in this method, you will understand how Spring Boot generates the default JSON error response. 2. Custom Exception In Spring Boot, we can use @ControllerAdvice to handle custom exceptions. 2.1 A custom exception. BookNotFoundException.java package com.mkyong.error ; public class BookNotFoundException extends RuntimeException { public BookNotFoundException ( Long id ) { super ( \"Book id not found : \" + id ); } } A controller, if a book id is not found, throws the above BookNotFoundException BookController.java package com.mkyong ; @RestController public class BookController { @Autowired private BookRepository repository ; @GetMapping ( \"/books/{id}\" ) Book findOne ( @PathVariable Long id ) { return repository . findById ( id ) . orElseThrow (() -> new BookNotFoundException ( id )); } } By default, Spring Boot generates the following JSON error response, http 500 error. Terminal curl localhost : 8080 / books / 5 { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.2 If a book id not found, it should return a 404 error instead of 500, we can override the status code like this : CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.bind.annotation.RestControllerAdvice ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public void springHandleNotFound ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . NOT_FOUND . value ()); } } 2.3 It returns a 404 now. Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27T04:21:17.740+0000\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.4 Furthermore, we can customize the entire JSON error response : CustomErrorResponse.java package com.mkyong.error; import com.fasterxml.jackson.annotation.JsonFormat; import java.time.LocalDateTime; public class CustomErrorResponse { @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd hh:mm:ss\") private LocalDateTime timestamp; private int status; private String error; } CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import java.time.LocalDateTime ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public ResponseEntity < CustomErrorResponse > customHandleNotFound ( Exception ex , WebRequest request ) { CustomErrorResponse errors = new CustomErrorResponse (); errors . setTimestamp ( LocalDateTime . now ()); errors . setError ( ex . getMessage ()); errors . setStatus ( HttpStatus . NOT_FOUND . value ()); return new ResponseEntity <> ( errors , HttpStatus . NOT_FOUND ); } } Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27 12:40:45\" , \"status\" : 404 , \"error\" : \"Book id not found : 5\" } 3. JSR 303 Validation error 3.1 For Spring @valid validation errors, it will throw handleMethodArgumentNotValid CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( ConstraintViolationException . class ) public void constraintViolationException ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . BAD_REQUEST . value ()); } @Override protected ResponseEntity < Object > handleMethodArgumentNotValid ( MethodArgumentNotValidException ex , HttpHeaders headers , HttpStatus status , WebRequest request ) { Map < String , Object > body = new LinkedHashMap <> (); body . put ( \"timestamp\" , new Date ()); body . put ( \"status\" , status . value ()); List < String > errors = ex . getBindingResult () . getFieldErrors () . stream () . map ( x -> x . getDefaultMessage ()) . collect ( Collectors . toList ()); body . put ( \"errors\" , errors ); return new ResponseEntity <> ( body , headers , status ); } } 4. ResponseEntityExceptionHandler 4.1 If we are not sure, what exception was thrown by the Spring Boot, puts a breakpoint in this method for debugging. ResponseEntityExceptionHandler.java package org.springframework.web.servlet.mvc.method.annotation ; public abstract class ResponseEntityExceptionHandler { @ExceptionHandler ({ HttpRequestMethodNotSupportedException . class , HttpMediaTypeNotSupportedException . class , HttpMediaTypeNotAcceptableException . class , MissingPathVariableException . class , MissingServletRequestParameterException . class , ServletRequestBindingException . class , ConversionNotSupportedException . class , TypeMismatchException . class , HttpMessageNotReadableException . class , HttpMessageNotWritableException . class , MethodArgumentNotValidException . class , MissingServletRequestPartException . class , BindException . class , NoHandlerFoundException . class , AsyncRequestTimeoutException . class }) @Nullable public final ResponseEntity < Object > handleException ( Exception ex , WebRequest request ) throws Exception { HttpHeaders headers = new HttpHeaders (); if ( ex instanceof HttpRequestMethodNotSupportedException ) { HttpStatus status = HttpStatus . METHOD_NOT_ALLOWED ; return handleHttpRequestMethodNotSupported (( HttpRequestMethodNotSupportedException ) ex , headers , status , request ); } else if ( ex instanceof HttpMediaTypeNotSupportedException ) { HttpStatus status = HttpStatus . UNSUPPORTED_MEDIA_TYPE ; return handleHttpMediaTypeNotSupported (( HttpMediaTypeNotSupportedException ) ex , headers , status , request ); } } } 5. DefaultErrorAttributes 5.1 To override the default JSON error response for all exceptions, create a bean and extends DefaultErrorAttributes CustomErrorAttributes.java package com.mkyong.error ; import org.springframework.boot.web.servlet.error.DefaultErrorAttributes ; import org.springframework.stereotype.Component ; import org.springframework.web.context.request.WebRequest ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.Date ; import java.util.Map ; @Component public class CustomErrorAttributes extends DefaultErrorAttributes { private static final DateFormat dateFormat = new SimpleDateFormat ( \"yyyy/MM/dd HH:mm:ss\" ); @Override public Map < String , Object > getErrorAttributes ( WebRequest webRequest , boolean includeStackTrace ) { Map < String , Object > errorAttributes = super . getErrorAttributes ( webRequest , includeStackTrace ); Object timestamp = errorAttributes . get ( \"timestamp\" ); if ( timestamp == null ) { errorAttributes . put ( \"timestamp\" , dateFormat . format ( new Date ())); } else { errorAttributes . put ( \"timestamp\" , dateFormat . format (( Date ) timestamp )); } errorAttributes . put ( \"version\" , \"1.2\" ); return errorAttributes ; } } Now, the date time is formatted and a new field \u2013 version is added to the JSON error response. curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019/02/27 13:34:24\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" , \"version\" : \"1.2\" } curl localhos t : 8080 /abc { \"timestamp\" : \"2019/02/27 13:35:10\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"No message available\" , \"path\" : \"/abc\" , \"version\" : \"1.2\" } Source","title":"Spring REST Error Handling Example"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#1-error","text":"1.1 By default, Spring Boot provides a BasicErrorController controller for /error mapping that handles all errors, and getErrorAttributes to produce a JSON response with details of the error, the HTTP status, and the exception message. { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"...\" , \"path\" : \"/path\" } BasicErrorController.java package org.springframework.boot.autoconfigure.web.servlet.error ; @Controller @RequestMapping ( \"${server.error.path:${error.path:/error}}\" ) public class BasicErrorController extends AbstractErrorController { @RequestMapping public ResponseEntity < Map < String , Object >> error ( HttpServletRequest request ) { Map < String , Object > body = getErrorAttributes ( request , isIncludeStackTrace ( request , MediaType . ALL )); HttpStatus status = getStatus ( request ); return new ResponseEntity <> ( body , status ); } In the IDE, puts a breakpoint in this method, you will understand how Spring Boot generates the default JSON error response.","title":"1. /error"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#2-custom-exception","text":"In Spring Boot, we can use @ControllerAdvice to handle custom exceptions. 2.1 A custom exception. BookNotFoundException.java package com.mkyong.error ; public class BookNotFoundException extends RuntimeException { public BookNotFoundException ( Long id ) { super ( \"Book id not found : \" + id ); } } A controller, if a book id is not found, throws the above BookNotFoundException BookController.java package com.mkyong ; @RestController public class BookController { @Autowired private BookRepository repository ; @GetMapping ( \"/books/{id}\" ) Book findOne ( @PathVariable Long id ) { return repository . findById ( id ) . orElseThrow (() -> new BookNotFoundException ( id )); } } By default, Spring Boot generates the following JSON error response, http 500 error. Terminal curl localhost : 8080 / books / 5 { \"timestamp\" : \"2019-02-27T04:03:52.398+0000\" , \"status\" : 500 , \"error\" : \"Internal Server Error\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.2 If a book id not found, it should return a 404 error instead of 500, we can override the status code like this : CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.bind.annotation.RestControllerAdvice ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public void springHandleNotFound ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . NOT_FOUND . value ()); } } 2.3 It returns a 404 now. Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27T04:21:17.740+0000\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" } 2.4 Furthermore, we can customize the entire JSON error response : CustomErrorResponse.java package com.mkyong.error; import com.fasterxml.jackson.annotation.JsonFormat; import java.time.LocalDateTime; public class CustomErrorResponse { @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"yyyy-MM-dd hh:mm:ss\") private LocalDateTime timestamp; private int status; private String error; } CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import java.time.LocalDateTime ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( BookNotFoundException . class ) public ResponseEntity < CustomErrorResponse > customHandleNotFound ( Exception ex , WebRequest request ) { CustomErrorResponse errors = new CustomErrorResponse (); errors . setTimestamp ( LocalDateTime . now ()); errors . setError ( ex . getMessage ()); errors . setStatus ( HttpStatus . NOT_FOUND . value ()); return new ResponseEntity <> ( errors , HttpStatus . NOT_FOUND ); } } Terminal curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019-02-27 12:40:45\" , \"status\" : 404 , \"error\" : \"Book id not found : 5\" }","title":"2. Custom Exception"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#3-jsr-303-validation-error","text":"3.1 For Spring @valid validation errors, it will throw handleMethodArgumentNotValid CustomGlobalExceptionHandler.java package com.mkyong.error ; import org.springframework.http.HttpHeaders ; import org.springframework.http.HttpStatus ; import org.springframework.http.ResponseEntity ; import org.springframework.web.bind.MethodArgumentNotValidException ; import org.springframework.web.bind.annotation.ControllerAdvice ; import org.springframework.web.bind.annotation.ExceptionHandler ; import org.springframework.web.context.request.WebRequest ; import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler ; import javax.servlet.http.HttpServletResponse ; import javax.validation.ConstraintViolationException ; import java.io.IOException ; import java.util.Date ; import java.util.LinkedHashMap ; import java.util.List ; import java.util.Map ; import java.util.stream.Collectors ; @ControllerAdvice public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler { @ExceptionHandler ( ConstraintViolationException . class ) public void constraintViolationException ( HttpServletResponse response ) throws IOException { response . sendError ( HttpStatus . BAD_REQUEST . value ()); } @Override protected ResponseEntity < Object > handleMethodArgumentNotValid ( MethodArgumentNotValidException ex , HttpHeaders headers , HttpStatus status , WebRequest request ) { Map < String , Object > body = new LinkedHashMap <> (); body . put ( \"timestamp\" , new Date ()); body . put ( \"status\" , status . value ()); List < String > errors = ex . getBindingResult () . getFieldErrors () . stream () . map ( x -> x . getDefaultMessage ()) . collect ( Collectors . toList ()); body . put ( \"errors\" , errors ); return new ResponseEntity <> ( body , headers , status ); } }","title":"3. JSR 303 Validation error"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#4-responseentityexceptionhandler","text":"4.1 If we are not sure, what exception was thrown by the Spring Boot, puts a breakpoint in this method for debugging. ResponseEntityExceptionHandler.java package org.springframework.web.servlet.mvc.method.annotation ; public abstract class ResponseEntityExceptionHandler { @ExceptionHandler ({ HttpRequestMethodNotSupportedException . class , HttpMediaTypeNotSupportedException . class , HttpMediaTypeNotAcceptableException . class , MissingPathVariableException . class , MissingServletRequestParameterException . class , ServletRequestBindingException . class , ConversionNotSupportedException . class , TypeMismatchException . class , HttpMessageNotReadableException . class , HttpMessageNotWritableException . class , MethodArgumentNotValidException . class , MissingServletRequestPartException . class , BindException . class , NoHandlerFoundException . class , AsyncRequestTimeoutException . class }) @Nullable public final ResponseEntity < Object > handleException ( Exception ex , WebRequest request ) throws Exception { HttpHeaders headers = new HttpHeaders (); if ( ex instanceof HttpRequestMethodNotSupportedException ) { HttpStatus status = HttpStatus . METHOD_NOT_ALLOWED ; return handleHttpRequestMethodNotSupported (( HttpRequestMethodNotSupportedException ) ex , headers , status , request ); } else if ( ex instanceof HttpMediaTypeNotSupportedException ) { HttpStatus status = HttpStatus . UNSUPPORTED_MEDIA_TYPE ; return handleHttpMediaTypeNotSupported (( HttpMediaTypeNotSupportedException ) ex , headers , status , request ); } } }","title":"4. ResponseEntityExceptionHandler"},{"location":"java/Spring%20REST%20Error%20Handling%20Example/#5-defaulterrorattributes","text":"5.1 To override the default JSON error response for all exceptions, create a bean and extends DefaultErrorAttributes CustomErrorAttributes.java package com.mkyong.error ; import org.springframework.boot.web.servlet.error.DefaultErrorAttributes ; import org.springframework.stereotype.Component ; import org.springframework.web.context.request.WebRequest ; import java.text.DateFormat ; import java.text.SimpleDateFormat ; import java.util.Date ; import java.util.Map ; @Component public class CustomErrorAttributes extends DefaultErrorAttributes { private static final DateFormat dateFormat = new SimpleDateFormat ( \"yyyy/MM/dd HH:mm:ss\" ); @Override public Map < String , Object > getErrorAttributes ( WebRequest webRequest , boolean includeStackTrace ) { Map < String , Object > errorAttributes = super . getErrorAttributes ( webRequest , includeStackTrace ); Object timestamp = errorAttributes . get ( \"timestamp\" ); if ( timestamp == null ) { errorAttributes . put ( \"timestamp\" , dateFormat . format ( new Date ())); } else { errorAttributes . put ( \"timestamp\" , dateFormat . format (( Date ) timestamp )); } errorAttributes . put ( \"version\" , \"1.2\" ); return errorAttributes ; } } Now, the date time is formatted and a new field \u2013 version is added to the JSON error response. curl localhos t : 8080 /books/ 5 { \"timestamp\" : \"2019/02/27 13:34:24\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"Book id not found : 5\" , \"path\" : \"/books/5\" , \"version\" : \"1.2\" } curl localhos t : 8080 /abc { \"timestamp\" : \"2019/02/27 13:35:10\" , \"status\" : 404 , \"error\" : \"Not Found\" , \"message\" : \"No message available\" , \"path\" : \"/abc\" , \"version\" : \"1.2\" } Source","title":"5. DefaultErrorAttributes"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/","text":"Spring Security Keycloak Spring Boot In previous articles , we have explored some cool Keycloak features and used them to secure a Spring Boot application. In this tutorial, we will bring Spring Security in and see how to integrate it with Keycloak seamlessly. We're going to: Set up a Spring Boot application; Integrate Spring Boot with Keycloak; Configure Spring Security to use Keycloak as an authentication provider; Implement the application logic; Add access policies based on user roles to protect our application endpoints. 1. Prerequisites To follow along with this tutorial, you will need: JDK 8 or JDK 11+ an IDE Gradle 5.5.0+ Spring Boot 2.1.0+ Keycloak 7.0.0+ If you prefer to use Apache Maven rather than Gradle, feel free to do so. You will need a Keycloak server installed and configured . If you are just getting started and want to know more about it, refer to my previous articles in this series to learn how to install Keycloak , how to do some basic configuration for authentication and authorization , and how to set up a client for our application . Throughout this tutorial, I will use a Keycloak server configured in the same way as explained in the mentioned articles. Should you be interested in having a look at how to secure a Spring Boot application with Keycloak , without using Spring Security, I wrote an article about that, too. But it's not a prerequisite to follow along with this one. On GitHub, you can find the source code for the application we are building in this tutorial. Let's get started! 2. The Demo Application The application we're going to build is for a fictitious public library. There are two groups of users: members can browse the books available in the library; librarians can also manage the books. For each group of users, we have a corresponding user role defined in Keycloak. Also, we have two users registered in the system: Sheldon is a member, Irma is both a member and a librarian. Name Username Roles Sheldon Cooper sheldon.cooper Member Irma Pince irma.pince Member, Librarian 3. Set Up A Spring Boot Application Our application will make use of three main libraries to set Spring up: spring-boot-starter-web , a starter for building web applications with Spring MVC ; spring-boot-starter-thymeleaf , a starter to use Thymleaf views for Spring MVC; spring-boot-starter-security , a starter for using Spring Security . The integration with Keycloak is made possible by the so-called client adapters . Keycloak client adapters are libraries that make it very easy to secure applications and services with Keycloak. For this project, we will need: the Spring Boot Adapter to take advantage of its auto-configuration features for Spring Boot; the Spring Security Adapter to use Keycloak as an authentication provider for Spring Security. The keycloak-spring-boot-starter library includes both of them, so we don't need anything else other than that. We can define all those dependencies in the gradle.build file for our project (or pom.xml if using Maven). buildscript { ext { springBootVersion = '2.1.9.RELEASE' } repositories { mavenCentral() } dependencies { classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\") } } apply plugin: 'java' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management' group = 'com.thomasvitale' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } ext { set('keycloakVersion', '7.0.1') } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-security' implementation 'org.keycloak:keycloak-spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.boot:spring-security-test' testImplementation 'org.keycloak:keycloak-test-helper' } dependencyManagement { imports { mavenBom \"org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}\" } } build.gradle That's it. We have set up a Spring Boot application, ready to leverage Spring Security and Keycloak. 4. Configure Keycloak In Spring Boot We should now provide some configuration for the integration between Spring Boot and Keycloak. 4.1. Basic Keycloak Configuration The default configuration file for Keycloak is keycloak.json , but thanks to the Keycloak Spring Boot Adapter we can use the native application.properties file (or application.yml ). keycloak.realm = public-library keycloak.resource = spring-boot-app keycloak.auth-server-url = http://localhost:8180/auth keycloak.ssl-required = external keycloak.public-client = true keycloak.principal-attribute = preferred_username application.properties Let's look at the properties one by one: keycloak.realm : the name of the realm, required; keycloak.resource : the client-id of the application, required; keycloak.auth-server-url : the base URL of the Keycloak server, required; keycloak.ssl-required : establishes if communications with the Keycloak server must happen over HTTPS. Here, it's set to external , meaning that it's only needed for external requests (default value). In production, instead, we should set it to all . Optional; keycloak.public-client : prevents the application from sending credentials to the Keycloak server ( false is the default value). We want to set it to true whenever we use public clients instead of confidential . Optional; keycloak.principal-attribute : the attribute with which to populate the UserPrincipal name. Optional. 4.2. Use The Keycloak Configuration Defined In application.properties Starting from Keycloak Spring Boot Adapter 7.0.0, due to some issues , the automatic discovery of the Keycloak configuration from the application.properties (or application.yml ) file will not work. To overcome this problem, we need to define a KeycloakSpringBootConfigResolver bean explicitly in a @Configuration class. @Configuration public class KeycloakConfig { @Bean public KeycloakSpringBootConfigResolver keycloakConfigResolver () { return new KeycloakSpringBootConfigResolver (); } } KeycloakConfig.java Without this bean, we would get an error. *************************** APPLICATION FAILED TO START *************************** Description: Parameter 1 of method setKeycloakSpringBootProperties in org.keycloak.adapters.springboot.KeycloakBaseSpringBootConfiguration required a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' that could not be found. Action: Consider defining a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' in your configuration. Process finished with exit code 1 Error thrown when no KeycloakSpringBootConfigResolver bean has been defined. This problem doesn't affect the Keycloak Spring Boot Adapter versions older than 7.0.0. 5. Implement The Application Logic We want to use Spring Security and Keycloak to make sure that the users of our application are authenticated and authorized, before accessing some protected endpoints. 5.1. The Controller Let's define three endpoints in a Spring MVC Controller class: /index will be freely accessible; /books will be accessible only by users with a Member role: they can browse the books available at the library; /manager will be accessible only by users with a Librarian role: they can manage the books. Later on, we will configure the last two endpoints to require the users to both be authenticated and have the proper role. It's also helpful adding a /logout endpoint for logging out conveniently. @Controller public class LibraryController { private final HttpServletRequest request ; private final BookRepository bookRepository ; @Autowired public LibraryController ( HttpServletRequest request , BookRepository bookRepository ) { this . request = request ; this . bookRepository = bookRepository ; } @GetMapping ( value = \"/\" ) public String getHome () { return \"index\" ; } @GetMapping ( value = \"/books\" ) public String getBooks ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"books\" ; } @GetMapping ( value = \"/manager\" ) public String getManager ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"manager\" ; } @GetMapping ( value = \"/logout\" ) public String logout () throws ServletException { request . logout (); return \"redirect:/\" ; } private void configCommonAttributes ( Model model ) { model . addAttribute ( \"name\" , getKeycloakSecurityContext (). getIdToken (). getGivenName ()); } private KeycloakSecurityContext getKeycloakSecurityContext () { return ( KeycloakSecurityContext ) request . getAttribute ( KeycloakSecurityContext . class . getName ()); } } LibraryController.java In the last method, we use the KeycloakSecurityContext to retrieve the IdToken , from which we can get the first name of the authenticated user. As a template engine, we're using Thymeleaf . We have a template for each resource as well as a unique template to handle unauthorized requests. You can check out the full source code of this demo project on GitHub to see how the templates look like. 5.2. The Repository The LibraryController class delegates the fetching of Book entities to a BookRepository class. The repository is implemented hard-coded in memory, for the sake of the example. @Repository public class BookRepository { private static Map < String , Book > books = new ConcurrentHashMap <> (); static { books . put ( \"B01\" , new Book ( \"B01\" , \"Harry Potter and the Deathly Hallows\" , \"J.K. Rowling\" )); books . put ( \"B02\" , new Book ( \"B02\" , \"The Lord of the Rings\" , \"J.R.R. Tolkien\" )); books . put ( \"B03\" , new Book ( \"B03\" , \"War and Peace\" , \"Leo Tolstoy\" )); } public List < Book > readAll () { List < Book > allBooks = new ArrayList <> ( books . values ()); allBooks . sort ( Comparator . comparing ( Book :: getId )); return allBooks ; } } BookRepository.java 5.3. The Entity The Book class is a POJO. public class Book { private String id ; private String title ; private String author ; public Book ( String id , String title , String author ) { this . id = id ; this . title = title ; this . author = author ; } } Book.java 6. Configure Spring Security With Keycloak If we tried to run the application at this point, we would notice that we could navigate through all the pages without any restriction. Let's change that. We want to configure Spring Security to: delegate the user authentication phase to Keycloak, following the OAuth 2.0/OpenID Connect Authorization Code Flow ; leverage the IdToken and AccessToken objects returned by Keycloak to define some access policies for our application endpoints. 6.1 Create a Security Configuration Class Let's proceed step by step, starting with the creation of a SecurityConfig class. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { } The SecurityConfig class should extend KeycloakWebSecurityConfigurerAdapter and be annotated with @KeycloakConfiguration . This annotation provides a Keycloak-based Spring Security configuration. It is a stereotype to wrap the two annotations required by a Spring Security configuration class: @Configuration and @EnableWebSecurity . It also packs a third annotation required by Keycloak to scan correctly the beans configured in the Keycloak Spring Security Adapter: @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class) . 6.2 Register Keycloak as the Authentication Provider Keycloak is our identity provider (IdP), so let's register it with the Spring Security authentication manager. @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } Here, we are registering KeycloakAuthenticationProvider with the authentication manager. In this way, Keycloak will be responsible for providing authentication services. Spring Security has a convention to handle security roles in a format like ROLE_ADMIN (where ADMIN is the actual security role name). I don't like this convention. In Keycloak, I prefer defining capitalized, lowercase role names. To solve the mismatch between the way we defined the user roles and the conventions used by Spring Security, we can specify a different configuration. So, we are setting a SimpleAuthorityMapper for the KeycloakAuthenticationProvider to prefix all the roles registered in Keycloak with the ROLE_ prefix. That will help Spring Security handling those roles in the best way. In Keycloak, we have defined two roles: Member and Librarian . In Spring Security, after the mapping, they will become ROLE_Member and ROLE_Librarian . We could even make the full role name uppercase by calling the method grantedAuthorityMapper.setConvertToUpperCase(true); , but for this demo application we are not doing that. 6.3 Define a Session Authentication Strategy The application that we are building, in Keycloak terms, is a public application with user interaction. In this scenario, the recommended session authentication strategy is RegisterSessionAuthenticationStrategy , which registers a user session after successful authentication. @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } When securing a service-to-service application, instead, we would use a NullAuthenticatedSessionStrategy . 6.4. Define Role-Based Access Security Policies So far, we have done all the necessary configuration to make Spring Security work seamlessly with Keycloak. Our final step is about defining some security constraints for the application endpoints. @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } The access policies for our application endpoints are: /books -> user must be authenticated and with at least one of the roles Member and Librarian . /manager -> user must be authenticated and with the role Librarian . any other endpoint will be freely accessible, no role constraint, no authentication required. 6.5 Handle Bean Definition Overriding Issues Since Spring 2.1.0, the spring.main.allow-bean-definition-overriding property is set to false by default, differently from the previous versions of Spring. It means that it's not allowed anymore to override a bean already defined. The SecurityConfig class we are working on extends KeycloakWebSecurityConfigurerAdapter , which defines an HttpSessionManager bean. But this bean has already been defined somewhere else in the Keycloak Adapter library. Therefore, it triggers an error in Spring 2.1.0+. *************************** APPLICATION FAILED TO START *************************** Description: The bean 'httpSessionManager', defined in class path resource [com/thomasvitale/keycloak/config/SecurityConfig.class], could not be registered. A bean with that name has already been defined in URL [.../org/keycloak/adapters/springsecurity/management/HttpSessionManager.class] and overriding is disabled. Action: Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true Process finished with exit code 1 Error thrown when multiple beans of the same type have been defined. We could fix the problem by changing the value for spring.main.allow-bean-definition-overriding to true. I prefer adjusting the bean definition to be loaded conditionally only if no other bean of that type has been defined. @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } 6.7 The Final Spring Security Configuration with Keycloak We have completed the security configuration. Here it is the final result. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } } SecurityConfig.java 7. Testing The Application It's time to verify if our code will work as intended. As you may have noticed, when setting up our build.gradle , we have defined a few dependencies for testing: spring-boot-starter-test , a starter for testing Spring Boot applications with JUnit, Hamcrest and Mockito; spring-security-test , which provides utilities to test Spring Security; keycloak-test-helper , which helps testing applications using Keycloak. Writing autotests for Spring applications secured by Keycloak will be the topic of a future article, so we're not going to use those libraries now. But here you have them, in case you're interested in diving into the topic. Instead, let's run our application and manually check if it's working correctly. 8. Using The Application Let's make sure our Keycloak server is up and running, and start our Spring application. By default, it will be available on http://localhost:8080 . Home page - Public The home page is freely accessible. We are not required to be authenticated nor to have a specific role. When we navigate to the other pages, the application redirects us to Keycloak for logging in. Login page provided by Keycloak After providing the right username and password, Keycloak redirects us back to our application. Depending on our role, we can visit the other pages as well. If we log in as a Member, like Sheldon Cooper, then we are allowed to see the Browse Books page. Browse Books - Protected (Member) Even if we are authenticated, we don't have the rights to navigate to the Manage Library page. If we try to do so, then we are told that we are not allowed in. If we log in as a Librarian , like Irma Pince, then we can also see the Manage Library page. Manage Library - Protected (Librarian) Finally, let's notice the Logout link in the top-right corner, which we can use to log out. The application is working correctly, and all the security constraints have been enforced. Well done! Conclusion In this tutorial, we have built a Spring Boot application and secured it with Spring Security and Keycloak. We have configured the integration with Keycloak leveraging the Spring Boot Adapter. Then, we have used the Spring Security Adapter to set Keycloak as the authentication provider for our application and protected some endpoints by defining access control policies based on user roles. If you are interested in Keycloak, have a look at my articles about this identity and access management solution. Are you thinking about using Keycloak for your next project? Have you already been using it? I'd like to hear your stories about Keycloak, leave a comment or let me know on Twitter ! Last update: 15/11/2019 Keycloak Series Introducing Keycloak for Identity and Access Management Keycloak Basic Configuration for Authentication and Authorization Keycloak Authentication Flows, SSO Protocols and Client Configuration Keycloak with Spring Series Securing a Spring Boot Application with Keycloak - A First Look Spring Security and Keycloak to Secure a Spring Boot Application - A First Look Source","title":"Spring Security Keycloak Spring Boot"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#1-prerequisites","text":"To follow along with this tutorial, you will need: JDK 8 or JDK 11+ an IDE Gradle 5.5.0+ Spring Boot 2.1.0+ Keycloak 7.0.0+ If you prefer to use Apache Maven rather than Gradle, feel free to do so. You will need a Keycloak server installed and configured . If you are just getting started and want to know more about it, refer to my previous articles in this series to learn how to install Keycloak , how to do some basic configuration for authentication and authorization , and how to set up a client for our application . Throughout this tutorial, I will use a Keycloak server configured in the same way as explained in the mentioned articles. Should you be interested in having a look at how to secure a Spring Boot application with Keycloak , without using Spring Security, I wrote an article about that, too. But it's not a prerequisite to follow along with this one. On GitHub, you can find the source code for the application we are building in this tutorial. Let's get started!","title":"1. Prerequisites"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#2-the-demo-application","text":"The application we're going to build is for a fictitious public library. There are two groups of users: members can browse the books available in the library; librarians can also manage the books. For each group of users, we have a corresponding user role defined in Keycloak. Also, we have two users registered in the system: Sheldon is a member, Irma is both a member and a librarian. Name Username Roles Sheldon Cooper sheldon.cooper Member Irma Pince irma.pince Member, Librarian","title":"2. The Demo Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#3-set-up-a-spring-boot-application","text":"Our application will make use of three main libraries to set Spring up: spring-boot-starter-web , a starter for building web applications with Spring MVC ; spring-boot-starter-thymeleaf , a starter to use Thymleaf views for Spring MVC; spring-boot-starter-security , a starter for using Spring Security . The integration with Keycloak is made possible by the so-called client adapters . Keycloak client adapters are libraries that make it very easy to secure applications and services with Keycloak. For this project, we will need: the Spring Boot Adapter to take advantage of its auto-configuration features for Spring Boot; the Spring Security Adapter to use Keycloak as an authentication provider for Spring Security. The keycloak-spring-boot-starter library includes both of them, so we don't need anything else other than that. We can define all those dependencies in the gradle.build file for our project (or pom.xml if using Maven). buildscript { ext { springBootVersion = '2.1.9.RELEASE' } repositories { mavenCentral() } dependencies { classpath(\"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\") } } apply plugin: 'java' apply plugin: 'org.springframework.boot' apply plugin: 'io.spring.dependency-management' group = 'com.thomasvitale' version = '0.0.1-SNAPSHOT' sourceCompatibility = '1.8' repositories { mavenCentral() } ext { set('keycloakVersion', '7.0.1') } dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-security' implementation 'org.keycloak:keycloak-spring-boot-starter' testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.boot:spring-security-test' testImplementation 'org.keycloak:keycloak-test-helper' } dependencyManagement { imports { mavenBom \"org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}\" } } build.gradle That's it. We have set up a Spring Boot application, ready to leverage Spring Security and Keycloak.","title":"3. Set Up A Spring Boot Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#4-configure-keycloak-in-spring-boot","text":"We should now provide some configuration for the integration between Spring Boot and Keycloak.","title":"4. Configure Keycloak In Spring Boot"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#41-basic-keycloak-configuration","text":"The default configuration file for Keycloak is keycloak.json , but thanks to the Keycloak Spring Boot Adapter we can use the native application.properties file (or application.yml ). keycloak.realm = public-library keycloak.resource = spring-boot-app keycloak.auth-server-url = http://localhost:8180/auth keycloak.ssl-required = external keycloak.public-client = true keycloak.principal-attribute = preferred_username application.properties Let's look at the properties one by one: keycloak.realm : the name of the realm, required; keycloak.resource : the client-id of the application, required; keycloak.auth-server-url : the base URL of the Keycloak server, required; keycloak.ssl-required : establishes if communications with the Keycloak server must happen over HTTPS. Here, it's set to external , meaning that it's only needed for external requests (default value). In production, instead, we should set it to all . Optional; keycloak.public-client : prevents the application from sending credentials to the Keycloak server ( false is the default value). We want to set it to true whenever we use public clients instead of confidential . Optional; keycloak.principal-attribute : the attribute with which to populate the UserPrincipal name. Optional.","title":"4.1. Basic Keycloak Configuration"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#42-use-the-keycloak-configuration-defined-in-applicationproperties","text":"Starting from Keycloak Spring Boot Adapter 7.0.0, due to some issues , the automatic discovery of the Keycloak configuration from the application.properties (or application.yml ) file will not work. To overcome this problem, we need to define a KeycloakSpringBootConfigResolver bean explicitly in a @Configuration class. @Configuration public class KeycloakConfig { @Bean public KeycloakSpringBootConfigResolver keycloakConfigResolver () { return new KeycloakSpringBootConfigResolver (); } } KeycloakConfig.java Without this bean, we would get an error. *************************** APPLICATION FAILED TO START *************************** Description: Parameter 1 of method setKeycloakSpringBootProperties in org.keycloak.adapters.springboot.KeycloakBaseSpringBootConfiguration required a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' that could not be found. Action: Consider defining a bean of type 'org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver' in your configuration. Process finished with exit code 1 Error thrown when no KeycloakSpringBootConfigResolver bean has been defined. This problem doesn't affect the Keycloak Spring Boot Adapter versions older than 7.0.0.","title":"4.2. Use The Keycloak Configuration Defined In application.properties"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#5-implement-the-application-logic","text":"We want to use Spring Security and Keycloak to make sure that the users of our application are authenticated and authorized, before accessing some protected endpoints.","title":"5. Implement The Application Logic"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#51-the-controller","text":"Let's define three endpoints in a Spring MVC Controller class: /index will be freely accessible; /books will be accessible only by users with a Member role: they can browse the books available at the library; /manager will be accessible only by users with a Librarian role: they can manage the books. Later on, we will configure the last two endpoints to require the users to both be authenticated and have the proper role. It's also helpful adding a /logout endpoint for logging out conveniently. @Controller public class LibraryController { private final HttpServletRequest request ; private final BookRepository bookRepository ; @Autowired public LibraryController ( HttpServletRequest request , BookRepository bookRepository ) { this . request = request ; this . bookRepository = bookRepository ; } @GetMapping ( value = \"/\" ) public String getHome () { return \"index\" ; } @GetMapping ( value = \"/books\" ) public String getBooks ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"books\" ; } @GetMapping ( value = \"/manager\" ) public String getManager ( Model model ) { configCommonAttributes ( model ); model . addAttribute ( \"books\" , bookRepository . readAll ()); return \"manager\" ; } @GetMapping ( value = \"/logout\" ) public String logout () throws ServletException { request . logout (); return \"redirect:/\" ; } private void configCommonAttributes ( Model model ) { model . addAttribute ( \"name\" , getKeycloakSecurityContext (). getIdToken (). getGivenName ()); } private KeycloakSecurityContext getKeycloakSecurityContext () { return ( KeycloakSecurityContext ) request . getAttribute ( KeycloakSecurityContext . class . getName ()); } } LibraryController.java In the last method, we use the KeycloakSecurityContext to retrieve the IdToken , from which we can get the first name of the authenticated user. As a template engine, we're using Thymeleaf . We have a template for each resource as well as a unique template to handle unauthorized requests. You can check out the full source code of this demo project on GitHub to see how the templates look like.","title":"5.1. The Controller"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#52-the-repository","text":"The LibraryController class delegates the fetching of Book entities to a BookRepository class. The repository is implemented hard-coded in memory, for the sake of the example. @Repository public class BookRepository { private static Map < String , Book > books = new ConcurrentHashMap <> (); static { books . put ( \"B01\" , new Book ( \"B01\" , \"Harry Potter and the Deathly Hallows\" , \"J.K. Rowling\" )); books . put ( \"B02\" , new Book ( \"B02\" , \"The Lord of the Rings\" , \"J.R.R. Tolkien\" )); books . put ( \"B03\" , new Book ( \"B03\" , \"War and Peace\" , \"Leo Tolstoy\" )); } public List < Book > readAll () { List < Book > allBooks = new ArrayList <> ( books . values ()); allBooks . sort ( Comparator . comparing ( Book :: getId )); return allBooks ; } } BookRepository.java","title":"5.2. The Repository"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#53-the-entity","text":"The Book class is a POJO. public class Book { private String id ; private String title ; private String author ; public Book ( String id , String title , String author ) { this . id = id ; this . title = title ; this . author = author ; } } Book.java","title":"5.3. The Entity"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#6-configure-spring-security-with-keycloak","text":"If we tried to run the application at this point, we would notice that we could navigate through all the pages without any restriction. Let's change that. We want to configure Spring Security to: delegate the user authentication phase to Keycloak, following the OAuth 2.0/OpenID Connect Authorization Code Flow ; leverage the IdToken and AccessToken objects returned by Keycloak to define some access policies for our application endpoints.","title":"6. Configure Spring Security With Keycloak"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#61-create-a-security-configuration-class","text":"Let's proceed step by step, starting with the creation of a SecurityConfig class. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { } The SecurityConfig class should extend KeycloakWebSecurityConfigurerAdapter and be annotated with @KeycloakConfiguration . This annotation provides a Keycloak-based Spring Security configuration. It is a stereotype to wrap the two annotations required by a Spring Security configuration class: @Configuration and @EnableWebSecurity . It also packs a third annotation required by Keycloak to scan correctly the beans configured in the Keycloak Spring Security Adapter: @ComponentScan(basePackageClasses = KeycloakSecurityComponents.class) .","title":"6.1 Create a Security Configuration Class"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#62-register-keycloak-as-the-authentication-provider","text":"Keycloak is our identity provider (IdP), so let's register it with the Spring Security authentication manager. @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } Here, we are registering KeycloakAuthenticationProvider with the authentication manager. In this way, Keycloak will be responsible for providing authentication services. Spring Security has a convention to handle security roles in a format like ROLE_ADMIN (where ADMIN is the actual security role name). I don't like this convention. In Keycloak, I prefer defining capitalized, lowercase role names. To solve the mismatch between the way we defined the user roles and the conventions used by Spring Security, we can specify a different configuration. So, we are setting a SimpleAuthorityMapper for the KeycloakAuthenticationProvider to prefix all the roles registered in Keycloak with the ROLE_ prefix. That will help Spring Security handling those roles in the best way. In Keycloak, we have defined two roles: Member and Librarian . In Spring Security, after the mapping, they will become ROLE_Member and ROLE_Librarian . We could even make the full role name uppercase by calling the method grantedAuthorityMapper.setConvertToUpperCase(true); , but for this demo application we are not doing that.","title":"6.2 Register Keycloak as the Authentication Provider"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#63-define-a-session-authentication-strategy","text":"The application that we are building, in Keycloak terms, is a public application with user interaction. In this scenario, the recommended session authentication strategy is RegisterSessionAuthenticationStrategy , which registers a user session after successful authentication. @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } When securing a service-to-service application, instead, we would use a NullAuthenticatedSessionStrategy .","title":"6.3 Define a Session Authentication Strategy"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#64-define-role-based-access-security-policies","text":"So far, we have done all the necessary configuration to make Spring Security work seamlessly with Keycloak. Our final step is about defining some security constraints for the application endpoints. @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } The access policies for our application endpoints are: /books -> user must be authenticated and with at least one of the roles Member and Librarian . /manager -> user must be authenticated and with the role Librarian . any other endpoint will be freely accessible, no role constraint, no authentication required.","title":"6.4. Define Role-Based Access Security Policies"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#65-handle-bean-definition-overriding-issues","text":"Since Spring 2.1.0, the spring.main.allow-bean-definition-overriding property is set to false by default, differently from the previous versions of Spring. It means that it's not allowed anymore to override a bean already defined. The SecurityConfig class we are working on extends KeycloakWebSecurityConfigurerAdapter , which defines an HttpSessionManager bean. But this bean has already been defined somewhere else in the Keycloak Adapter library. Therefore, it triggers an error in Spring 2.1.0+. *************************** APPLICATION FAILED TO START *************************** Description: The bean 'httpSessionManager', defined in class path resource [com/thomasvitale/keycloak/config/SecurityConfig.class], could not be registered. A bean with that name has already been defined in URL [.../org/keycloak/adapters/springsecurity/management/HttpSessionManager.class] and overriding is disabled. Action: Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true Process finished with exit code 1 Error thrown when multiple beans of the same type have been defined. We could fix the problem by changing the value for spring.main.allow-bean-definition-overriding to true. I prefer adjusting the bean definition to be loaded conditionally only if no other bean of that type has been defined. @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); }","title":"6.5 Handle Bean Definition Overriding Issues"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#67-the-final-spring-security-configuration-with-keycloak","text":"We have completed the security configuration. Here it is the final result. @KeycloakConfiguration public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { @Autowired public void configureGlobal ( AuthenticationManagerBuilder auth ) { SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper (); grantedAuthorityMapper . setPrefix ( \"ROLE_\" ); KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider (); keycloakAuthenticationProvider . setGrantedAuthoritiesMapper ( grantedAuthorityMapper ); auth . authenticationProvider ( keycloakAuthenticationProvider ); } @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy () { return new RegisterSessionAuthenticationStrategy ( new SessionRegistryImpl ()); } @Bean @Override @ConditionalOnMissingBean ( HttpSessionManager . class ) protected HttpSessionManager httpSessionManager () { return new HttpSessionManager (); } @Override protected void configure ( HttpSecurity http ) throws Exception { super . configure ( http ); http . authorizeRequests () . antMatchers ( \"/books\" ). hasAnyRole ( \"Member\" , \"Librarian\" ) . antMatchers ( \"/manager\" ). hasRole ( \"Librarian\" ) . anyRequest (). permitAll (); } } SecurityConfig.java","title":"6.7 The Final Spring Security Configuration with Keycloak"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#7-testing-the-application","text":"It's time to verify if our code will work as intended. As you may have noticed, when setting up our build.gradle , we have defined a few dependencies for testing: spring-boot-starter-test , a starter for testing Spring Boot applications with JUnit, Hamcrest and Mockito; spring-security-test , which provides utilities to test Spring Security; keycloak-test-helper , which helps testing applications using Keycloak. Writing autotests for Spring applications secured by Keycloak will be the topic of a future article, so we're not going to use those libraries now. But here you have them, in case you're interested in diving into the topic. Instead, let's run our application and manually check if it's working correctly.","title":"7. Testing The Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#8-using-the-application","text":"Let's make sure our Keycloak server is up and running, and start our Spring application. By default, it will be available on http://localhost:8080 . Home page - Public The home page is freely accessible. We are not required to be authenticated nor to have a specific role. When we navigate to the other pages, the application redirects us to Keycloak for logging in. Login page provided by Keycloak After providing the right username and password, Keycloak redirects us back to our application. Depending on our role, we can visit the other pages as well. If we log in as a Member, like Sheldon Cooper, then we are allowed to see the Browse Books page. Browse Books - Protected (Member) Even if we are authenticated, we don't have the rights to navigate to the Manage Library page. If we try to do so, then we are told that we are not allowed in. If we log in as a Librarian , like Irma Pince, then we can also see the Manage Library page. Manage Library - Protected (Librarian) Finally, let's notice the Logout link in the top-right corner, which we can use to log out. The application is working correctly, and all the security constraints have been enforced. Well done!","title":"8. Using The Application"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#conclusion","text":"In this tutorial, we have built a Spring Boot application and secured it with Spring Security and Keycloak. We have configured the integration with Keycloak leveraging the Spring Boot Adapter. Then, we have used the Spring Security Adapter to set Keycloak as the authentication provider for our application and protected some endpoints by defining access control policies based on user roles. If you are interested in Keycloak, have a look at my articles about this identity and access management solution. Are you thinking about using Keycloak for your next project? Have you already been using it? I'd like to hear your stories about Keycloak, leave a comment or let me know on Twitter ! Last update: 15/11/2019","title":"Conclusion"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#keycloak-series","text":"Introducing Keycloak for Identity and Access Management Keycloak Basic Configuration for Authentication and Authorization Keycloak Authentication Flows, SSO Protocols and Client Configuration","title":"Keycloak Series"},{"location":"java/Spring%20Security%20Keycloak%20Spring%20Boot/#keycloak-with-spring-series","text":"Securing a Spring Boot Application with Keycloak - A First Look Spring Security and Keycloak to Secure a Spring Boot Application - A First Look Source","title":"Keycloak with Spring Series"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/","text":"Uploading and Parsing CSV File using Spring Boot CSV \u2014 short for Comma Separated Values \u2014 is a popular data exchange format that is frequently used for importing and exporting data between different servers and applications. A CSV file is just a plain-text file that stores data in a tabular format where each row consists of one or more fields and each column represents a specific field. These fields are separated by a delimiter usually a comma or a tab. In an earlier article, I wrote about exporting and downloading data as a CSV file in Spring Boot. In this article, you'll learn how to upload and parse a CSV file using Spring Boot & Thymeleaf. Note: To read and parse a CSV file in core Java, check out reading and parsing a CSV file in Java tutorial. Dependencies To upload parse a CSV file in Spring Boot, you only need spring-boot-starter-web and opencsv dependencies. Additionally, we also need spring-boot-starter-thymeleaf for serving Thymeleaf templates. The OpenCSV 3rd-party library will be used for parsing the uploaded file. Add the following dependencies to your Gradle project's build.gradle file: implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'com.opencsv:opencsv:5.0' For Maven, include the following dependencies to your pom.xml file: <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> </dependency> <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 5.0 </version> </dependency> To create a new Spring Boot project from scratch, you can either use Spring Initializr or Spring Boot CLI to bootstrap a new application with the above-mentioned dependencies. Model Class OpenCSV allows us to directly map the CSV record fields to a Java object . Let us create a simple model class named User.java that will be used to populate data from the CSV file: User.java public class User { @CsvBindByName private long id ; @CsvBindByName private String name ; @CsvBindByName private String email ; @CsvBindByName ( column = \"country\" ) private String countryCode ; @CsvBindByName private int age ; public User ( long id , String name , String email , String countryCode , int age ) { this . id = id ; this . name = name ; this . email = email ; this . countryCode = countryCode ; this . age = age ; } } As you can see above, we have annotated the User class attributes with @CsvBindByName annotation. This annotation is provided by OpenCSV to specify a binding between a column name of the CSV input and a field in a bean. You can only use the @CsvBindByName annotation if the CSV file has a header. It accepts up to five parameters like column , required , and locale . All parameters are options except column which is also only required if the header column name in the CSV file is different from the bean field name. Spring Boot Controller Next, create a Spring Boot controller class named UploadController.java that handles the uploading and parsing of a CSV file: UploadController.java @Controller public class UploadController { @GetMapping ( \"/\" ) public String index () { return \"index\" ; } @PostMapping ( \"/upload-csv-file\" ) public String uploadCSVFile ( @RequestParam ( \"file\" ) MultipartFile file , Model model ) { if ( file . isEmpty ()) { model . addAttribute ( \"message\" , \"Please select a CSV file to upload.\" ); model . addAttribute ( \"status\" , false ); } else { try ( Reader reader = new BufferedReader ( new InputStreamReader ( file . getInputStream ()))) { CsvToBean < User > csvToBean = new CsvToBeanBuilder ( reader ) . withType ( User . class ) . withIgnoreLeadingWhiteSpace ( true ) . build (); List < User > users = csvToBean . parse (); model . addAttribute ( \"users\" , users ); model . addAttribute ( \"status\" , true ); } catch ( Exception ex ) { model . addAttribute ( \"message\" , \"An error occurred while processing the CSV file.\" ); model . addAttribute ( \"status\" , false ); } } return \"file-upload-status\" ; } } As you can see above, we have annotated the UploadController class with @Controller to indicate that the annotated class is a \"Controller\" (e.g. a web controller). Each method is decorated with @GetMapping or @PostMapping to bind the path and the HTTP action with that particular method: GET / route simply renders an HTML form to allow the user to upload a CSV file. POST /upload-csv-file route handles HTTP multipart/form-data requests and accepts a MultipartFile object as a route parameter. This is where we actually parse the uploaded CSV file into a list of User objects by using the CsvToBean class. This method returns an HTML response to either display a list of users or an error message. Thymeleaf Templates The next step is to create Thymeleaf templates to allow users to upload a CSV file and display results. To nicely display the HTML form, we will use Bootstrap 4 default styles. HTML Form for File Upload Here is a simple HTML form that enables users to select a CSV file for upload: index.html < form method = \"POST\" th:action = \"@{/upload-csv-file}\" enctype = \"multipart/form-data\" > < div class = \"form-group mt-3\" > < label for = \"file\" > Select a CSV file </ label > < input type = \"file\" name = \"file\" class = \"form-control-file\" id = \"file\" accept = \".csv\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Import Users </ button > </ form > Display Upload Results Let us create another Thymeleaf template to display the upload results: file-upload-status.html < div class = \"container py-5\" > < div class = \"row\" > < div class = \"col-10 mx-auto\" > < h1 > File Upload Status </ h1 > < div class = \"alert alert-danger\" role = \"alert\" th:if = \"${!status}\" > < strong > Error: </ strong > < span th:text = \"${message}\" ></ span > </ div > < table class = \"table table-striped\" th:if = \"${status}\" > < thead > < tr > < th scope = \"col\" > # </ th > < th scope = \"col\" > ID </ th > < th scope = \"col\" > Name </ th > < th scope = \"col\" > Email </ th > < th scope = \"col\" > Country </ th > < th scope = \"col\" > Age </ th > </ tr > </ thead > < tbody > < tr th:each = \"user, i : ${users}\" > < th scope = \"row\" th:text = \"${i.index + 1}\" ></ th > < td th:text = \"${user.id}\" ></ td > < td th:text = \"${user.name}\" ></ td > < td th:text = \"${user.email}\" ></ td > < td th:text = \"${user.countryCode}\" ></ td > < td th:text = \"${user.age}\" ></ td > </ tr > </ tbody > </ table > </ div > </ div > </ div > Running & Testing the Application First of all, you need to create the main application class for Spring Boot application as shown below: @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun Once the Spring Boot application is started, open http://localhost:8080 in your favorite web browser to see the upload form. Here is how it looks like: As shown in the above image, select a CSV file and then click on Import Users button to kickstart file upload operation. If everything goes right, you should see a list of users displayed as shown in the following screenshot: If you forget to select a CSV file or the CSV file is not valid, you should see the following error message displayed on the screen: Finally, here is the sample CSV file I just uploaded in the above example: users.csv id,name,email,country,age 100,Atta Shah,atta@example.com,PK,30 101,Alex Jones,alex@example.com,DE,35 102,Jovan Lee,jovan@example.com,FR,25 103,Greg Hover,greg@example.com,US,45 Source Code: Download the complete source code from GitHub available under MIT license. Conclusion That's all folks! In this article, you have learned how to upload and parse a CSV file using Spring Boot and Thymeleaf web application. We used OpenCSV , a popular open-source library, for parsing the uploaded file into a list of Java objects. Further Reading If you like this article, you may be interested in other Spring Boot related articles: Export & Download Data as CSV File in Spring Boot Uploading Files in Spring Boot How to upload a file with Ajax in Spring Boot Reading and writing CSV files using OpenCSV \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Uploading and Parsing CSV File using Spring Boot"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#dependencies","text":"To upload parse a CSV file in Spring Boot, you only need spring-boot-starter-web and opencsv dependencies. Additionally, we also need spring-boot-starter-thymeleaf for serving Thymeleaf templates. The OpenCSV 3rd-party library will be used for parsing the uploaded file. Add the following dependencies to your Gradle project's build.gradle file: implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'com.opencsv:opencsv:5.0' For Maven, include the following dependencies to your pom.xml file: <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-web </artifactId> </dependency> <dependency> <groupId> org.springframework.boot </groupId> <artifactId> spring-boot-starter-thymeleaf </artifactId> </dependency> <dependency> <groupId> com.opencsv </groupId> <artifactId> opencsv </artifactId> <version> 5.0 </version> </dependency> To create a new Spring Boot project from scratch, you can either use Spring Initializr or Spring Boot CLI to bootstrap a new application with the above-mentioned dependencies.","title":"Dependencies"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#model-class","text":"OpenCSV allows us to directly map the CSV record fields to a Java object . Let us create a simple model class named User.java that will be used to populate data from the CSV file: User.java public class User { @CsvBindByName private long id ; @CsvBindByName private String name ; @CsvBindByName private String email ; @CsvBindByName ( column = \"country\" ) private String countryCode ; @CsvBindByName private int age ; public User ( long id , String name , String email , String countryCode , int age ) { this . id = id ; this . name = name ; this . email = email ; this . countryCode = countryCode ; this . age = age ; } } As you can see above, we have annotated the User class attributes with @CsvBindByName annotation. This annotation is provided by OpenCSV to specify a binding between a column name of the CSV input and a field in a bean. You can only use the @CsvBindByName annotation if the CSV file has a header. It accepts up to five parameters like column , required , and locale . All parameters are options except column which is also only required if the header column name in the CSV file is different from the bean field name.","title":"Model Class"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#spring-boot-controller","text":"Next, create a Spring Boot controller class named UploadController.java that handles the uploading and parsing of a CSV file: UploadController.java @Controller public class UploadController { @GetMapping ( \"/\" ) public String index () { return \"index\" ; } @PostMapping ( \"/upload-csv-file\" ) public String uploadCSVFile ( @RequestParam ( \"file\" ) MultipartFile file , Model model ) { if ( file . isEmpty ()) { model . addAttribute ( \"message\" , \"Please select a CSV file to upload.\" ); model . addAttribute ( \"status\" , false ); } else { try ( Reader reader = new BufferedReader ( new InputStreamReader ( file . getInputStream ()))) { CsvToBean < User > csvToBean = new CsvToBeanBuilder ( reader ) . withType ( User . class ) . withIgnoreLeadingWhiteSpace ( true ) . build (); List < User > users = csvToBean . parse (); model . addAttribute ( \"users\" , users ); model . addAttribute ( \"status\" , true ); } catch ( Exception ex ) { model . addAttribute ( \"message\" , \"An error occurred while processing the CSV file.\" ); model . addAttribute ( \"status\" , false ); } } return \"file-upload-status\" ; } } As you can see above, we have annotated the UploadController class with @Controller to indicate that the annotated class is a \"Controller\" (e.g. a web controller). Each method is decorated with @GetMapping or @PostMapping to bind the path and the HTTP action with that particular method: GET / route simply renders an HTML form to allow the user to upload a CSV file. POST /upload-csv-file route handles HTTP multipart/form-data requests and accepts a MultipartFile object as a route parameter. This is where we actually parse the uploaded CSV file into a list of User objects by using the CsvToBean class. This method returns an HTML response to either display a list of users or an error message.","title":"Spring Boot Controller"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#thymeleaf-templates","text":"The next step is to create Thymeleaf templates to allow users to upload a CSV file and display results. To nicely display the HTML form, we will use Bootstrap 4 default styles.","title":"Thymeleaf Templates"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#html-form-for-file-upload","text":"Here is a simple HTML form that enables users to select a CSV file for upload: index.html < form method = \"POST\" th:action = \"@{/upload-csv-file}\" enctype = \"multipart/form-data\" > < div class = \"form-group mt-3\" > < label for = \"file\" > Select a CSV file </ label > < input type = \"file\" name = \"file\" class = \"form-control-file\" id = \"file\" accept = \".csv\" > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Import Users </ button > </ form >","title":"HTML Form for File Upload"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#display-upload-results","text":"Let us create another Thymeleaf template to display the upload results: file-upload-status.html < div class = \"container py-5\" > < div class = \"row\" > < div class = \"col-10 mx-auto\" > < h1 > File Upload Status </ h1 > < div class = \"alert alert-danger\" role = \"alert\" th:if = \"${!status}\" > < strong > Error: </ strong > < span th:text = \"${message}\" ></ span > </ div > < table class = \"table table-striped\" th:if = \"${status}\" > < thead > < tr > < th scope = \"col\" > # </ th > < th scope = \"col\" > ID </ th > < th scope = \"col\" > Name </ th > < th scope = \"col\" > Email </ th > < th scope = \"col\" > Country </ th > < th scope = \"col\" > Age </ th > </ tr > </ thead > < tbody > < tr th:each = \"user, i : ${users}\" > < th scope = \"row\" th:text = \"${i.index + 1}\" ></ th > < td th:text = \"${user.id}\" ></ td > < td th:text = \"${user.name}\" ></ td > < td th:text = \"${user.email}\" ></ td > < td th:text = \"${user.countryCode}\" ></ td > < td th:text = \"${user.age}\" ></ td > </ tr > </ tbody > </ table > </ div > </ div > </ div >","title":"Display Upload Results"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#running-testing-the-application","text":"First of all, you need to create the main application class for Spring Boot application as shown below: @SpringBootApplication public class Application { public static void main ( String [] args ) { SpringApplication . run ( Application . class , args ); } } Let's run the application by typing the following command in your terminal from the root directory of the project: $ ./gradlew bootRun Once the Spring Boot application is started, open http://localhost:8080 in your favorite web browser to see the upload form. Here is how it looks like: As shown in the above image, select a CSV file and then click on Import Users button to kickstart file upload operation. If everything goes right, you should see a list of users displayed as shown in the following screenshot: If you forget to select a CSV file or the CSV file is not valid, you should see the following error message displayed on the screen: Finally, here is the sample CSV file I just uploaded in the above example: users.csv id,name,email,country,age 100,Atta Shah,atta@example.com,PK,30 101,Alex Jones,alex@example.com,DE,35 102,Jovan Lee,jovan@example.com,FR,25 103,Greg Hover,greg@example.com,US,45 Source Code: Download the complete source code from GitHub available under MIT license.","title":"Running &amp; Testing the Application"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#conclusion","text":"That's all folks! In this article, you have learned how to upload and parse a CSV file using Spring Boot and Thymeleaf web application. We used OpenCSV , a popular open-source library, for parsing the uploaded file into a list of Java objects.","title":"Conclusion"},{"location":"java/Uploading%20and%20Parsing%20CSV%20File%20using%20Spring%20Boot/#further-reading","text":"If you like this article, you may be interested in other Spring Boot related articles: Export & Download Data as CSV File in Spring Boot Uploading Files in Spring Boot How to upload a file with Ajax in Spring Boot Reading and writing CSV files using OpenCSV \u270c\ufe0f Like this article? Follow me on Twitter and LinkedIn . You can also subscribe to RSS Feed . Source","title":"Further Reading"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/","text":"\u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432 \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442... \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0430\u0448\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c. \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0447\u0430\u0441\u0442\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u043e\u0447\u043a\u0438 \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u201cTest it\u201d \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c TestController \u0438\u043b\u0438 MyServiceTestClient . \u0422\u043e \u0447\u0442\u043e \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041e\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443, \u043d\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0442\u0435\u0441\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u044f \u0438\u043b\u0438 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0430 \u0438 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0432\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 UI \u0438 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432\u0441\u0435 \u0435\u0449\u0435 \u0441\u043b\u043e\u0436\u043d\u0435\u0435. \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432? We need to go deeper \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043f\u0443\u0441\u0442\u0438\u043c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0438 \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u043c\u0441\u044f \u043a \u0432\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u0438: \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 , \u0438\u043b\u0438 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0430\u043d\u0433\u043b. unit testing) \u2014 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0418\u0434\u0435\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0443\u0436\u0435 \u043e\u0442\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2013 \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0431\u0430\u0441\u0442\u0438\u043e\u043d \u043d\u0430 \u0431\u043e\u0440\u044c\u0431\u0435 \u0441 \u0431\u0430\u0433\u0430\u043c\u0438. \u0417\u0430 \u043d\u0438\u043c \u0435\u0449\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435, \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u043e\u0435 \u0438, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0440\u0443\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u00ab\u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\u00bb. \u041d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u0430\u043c? \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442: \u00ab\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430\u00bb. \u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0435\u0441\u043b\u0438 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0430\u0439\u0442-\u0432\u0438\u0437\u0438\u0442\u043a\u0443 \u0438\u0437 5 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0438\u0441\u044c\u043c\u0430. \u041d\u0430 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0443\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u0441\u044f, \u043d\u0438\u0447\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0435\u043c\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u00ab\u0440\u0443\u043a\u0430\u043c\u0438\u00bb \u0412\u044b \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u043c \u0441\u0430\u0439\u0442\u043e\u043c/\u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0444\u043b\u0435\u0448-\u0438\u0433\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c\u0438 \u2013 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430/\u0430\u043d\u0438\u043c\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u043a\u0438. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043d\u0435\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0421\u0440\u043e\u043a \u2013 \u043e\u0442 \u0434\u0432\u0443\u0445 \u043d\u0435\u0434\u0435\u043b\u044c \u0434\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0432\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u2013 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0436\u0435\u043b\u0435\u0437\u0430 \u0438 \u0441\u043e\u0444\u0442\u0430, \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435. \u0421\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 1-2 \u0434\u043d\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u0430\u0440\u043e\u043c \u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u0438\u044f. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0443\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0435\u0431\u044f \u0441\u0430\u043c, \u0432\u0441\u043b\u0435\u0434 \u0437\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0418\u043d\u043e\u0433\u0434\u0430 \u043a\u043e\u0434 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0447\u0442\u043e \u0435\u0433\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u2014 ~\u0433\u043e\u0432~ \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0412 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c (\u0441\u0436\u0430\u0442\u044b\u0435 \u0441\u0440\u043e\u043a\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u044b, \u0440\u0430\u0437\u043c\u044b\u0442\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f) \u0432\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u042f \u0437\u043d\u0430\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u043b\u0438 \u0441\u0435\u0431\u044f \u043d\u0430 \u0444\u043e\u0442\u043e \u043d\u0438\u0436\u0435, \u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438. \u041b\u044e\u0431\u043e\u0439 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u0435\u0437 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043e\u0431\u0440\u0435\u0447\u0435\u043d \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0441 \u043d\u0443\u043b\u044f \u0412 \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044f \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 \u0433\u043e\u0434\u0430. \u041e\u043d\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: \u0411\u0435\u0437 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u043f\u0430\u0433\u0435\u0442\u0442\u0438-\u043a\u043e\u0434\u043e\u043c \u0438 \u0443\u0432\u043e\u043b\u0438\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438. \u041d\u0438\u043a\u0442\u043e \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u0441\u0435 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0414\u0430 \u0438 \u0447\u0442\u043e \u043e\u043d\u043e \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0442\u0434\u0430\u043b\u0435\u043d\u043d\u043e. \u0421 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442. \u0422\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0441\u0442\u044c, \u043d\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442, \u0438 \u043a\u0430\u043a\u043e\u0439 \u043e\u0442 \u043d\u0438\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e. \u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a\u0430\u044f-\u043d\u0438\u043a\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0435\u0441\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0430\u0431\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u044c. \u041c\u043e\u0436\u043d\u043e \u043e\u0442\u044b\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0445\u0438\u0442\u0440\u043e\u0441\u043f\u043b\u0435\u0442\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0421 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c. \u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442. \u0415\u0441\u043b\u0438 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0438\u0445 \u043c\u043d\u043e\u0433\u043e. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0418 \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u2013 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0439: \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0422\u0435\u0441\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043a\u0430\u043a\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0438 \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0436\u0434\u0443\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u0422\u0430\u043a\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435. \u0412 \u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u0422\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e: \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0430\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0438\u0447, \u0441\u0445\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 getting started guide\u2019\u043e\u043c . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0438 \u0443\u0445\u043e\u0434\u0438\u0442\u044c. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u0430\u043c\u0430 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u0441\u0435\u0431\u0435 \u043f\u0443\u0442\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u2013 \u043a\u0440\u0435\u043f\u043a\u0438\u0439 \u043e\u0440\u0435\u0448\u0435\u043a, \u0441 \u043d\u0438\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0445 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u0435\u043d \u0438\u043b\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f. \u041f\u043e\u0447\u0435\u043c\u0443 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0430? \u041a\u043e\u043b\u043b\u0435\u0433\u0438 \u0438\u0437 ScrumTrek \u0443\u0432\u0435\u0440\u044f\u044e\u0442, \u0447\u0442\u043e \u0432\u0441\u0435\u043c\u0443 \u0432\u0438\u043d\u043e\u0439 \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0432\u043b\u0430\u0441\u0442\u0435\u043b\u0438\u043d \u0414\u0430\u0440\u0442 \u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u0438\u0443\u0441 . \u042f \u0443\u0431\u0435\u0436\u0434\u0435\u043d, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043f\u0440\u0430\u0432\u0434\u0435. \u0411\u0435\u0437\u0434\u0443\u043c\u043d\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u043d\u043e \u0432\u0440\u0435\u0434\u0438\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 . \u0415\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0443 \u0432\u0430\u0441 \u0431\u044b\u043b \u043e\u0434\u0438\u043d \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442, \u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0432 \u0442\u0435\u0441\u0442\u044b, \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0432 \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u0435, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u0432\u0430. \u0418 \u0443\u0434\u0432\u043e\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u043d\u0435 \u0432\u0437\u044f\u043b\u0430 \u0432\u0435\u0440\u0445, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b . \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b: \u0411\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u043c\u0438 \u041d\u0435 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0438 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f (\u0434\u0430\u0436\u0435 \u043d\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043d\u044f\u0442\u044c \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f) \u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0435\u0434\u0438\u043d\u0443\u044e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u044e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u043e\u0432, \u043d\u0443\u0436\u043d\u044b \u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u043b\u044f. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u0439 VCS \u0422\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a. \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u041e\u0431\u0449\u0430\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f: \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0435, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 Tests; \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u041e\u0434\u043d\u0430 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a: \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b .Core, .Bl \u0438 .Web? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0449\u0435 .Core.Tests, .Bl.Tests \u0438 .Web.Tests. \u0423 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0434-\u044d\u0444\u0444\u0435\u043a\u0442. \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d *.Tests.dll \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 ProblemResolver? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 ProblemResolverTests. \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c. \u0418\u043d\u0430\u0447\u0435 \u0432\u044b \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043a\u0430\u0442\u0438\u0442\u0435\u0441\u044c ~\u0432 \u0443\u043d\u044b\u043b\u043e\u0435 \u0433\u043e~ \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0438\u043f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 (\u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442). \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u00ab\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439\u00bb \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 TestLogin \u2013 \u043d\u0435 \u0441\u0430\u043c\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430. \u0427\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f? \u041a\u0430\u043a\u043e\u0432\u044b \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b? \u041c\u043e\u0433\u0443\u0442 \u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438? \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0430\u043a\u043e\u0439: [\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434]_[\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439]_[\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435] . \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Calculator, \u0430 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434 Sum, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 (\u043f\u0440\u0438\u0432\u0435\u0442, \u041a\u044d\u043f!) \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \u0441lass CalculatorTests { public void Sum_2Plus5_7Returned () { // \u2026 } } \u0422\u0430\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u0430 \u0431\u0435\u0437 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043a\u043e\u0434\u0443. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432\u0430\u043c \u0412\u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b. \u042f \u0432\u0438\u0434\u0435\u043b \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b (\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043d\u0435 \u044e\u043d\u0438\u0442, \u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0435) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041d\u0435 \u043d\u0430\u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0432\u0441\u0435 \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0430 \u0432\u0430\u0441. \u0423\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043e\u0431\u0437\u043e\u0440\u0443 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043d\u043e\u0433\u0438\u0435 .NET \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 MsTest \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u0442\u0443\u0434\u0438\u0438. \u041c\u043d\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e \u0434\u0443\u0448\u0435 NUnit. \u041e\u043d \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u043f\u043e\u043a \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042f \u043c\u043e\u0433\u0443 \u0442\u0430\u043a \u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 NUnit \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0420\u0435\u0448\u0430\u0440\u043f\u0435\u0440\u0430. \u041a\u043e\u043c\u0443-\u0442\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c xUnit\u2019\u0430: \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f IDisposable \u043a\u0430\u043a TearDown. \u0427\u0442\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0430 \u0447\u0442\u043e \u2013 \u043d\u0435\u0442? \u041e\u0434\u043d\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 100%, \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u044d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0439 \u0442\u0440\u0430\u0442\u043e\u0439 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0440\u0430\u0441\u0447\u0435\u0440\u0442\u0438\u0442\u0435 \u043b\u0438\u0441\u0442 \u0431\u0443\u043c\u0430\u0433\u0438 \u043f\u043e \u043e\u0441\u0438 X \u0438 Y, \u0433\u0434\u0435 X \u2013 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c, \u0430 Y \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438: \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0434\u0435\u0441\u044c \u0438 \u0442\u0430\u043a \u0432\u0441\u0435 \u044f\u0441\u043d\u043e. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0425\u043c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434, \u0442\u0443\u0442 \u043f\u0430\u0445\u043d\u0435\u0442 God Object\u2019\u043e\u043c \u0438 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c\u044e. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041c\u044b \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u0443 \u043d\u0430\u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b. \u0422\u0430\u043a \u0437\u0430\u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c? \u0425\u043e\u0447\u0443 \u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u0430\u043c \u0432\u0441\u0435 \u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 . \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0427\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f: C\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u042d\u0442\u043e \u043d\u0435\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u043b\u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b. \u0422\u0435\u0441\u0442\u044b \u0432\u0430\u0436\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u043e\u0442\u0435\u0440\u0438 Mars Climate Orbiter 23 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f 1999 \u0433\u043e\u0434\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0435: \u043e\u0434\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0447\u0438\u0442\u0430\u043b\u043e \u00ab\u0432 \u0434\u044e\u0439\u043c\u0430\u0445\u00bb, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u2013 \u00ab\u0432 \u043c\u0435\u0442\u0440\u0430\u0445\u00bb, \u0438 \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u043b\u0438 \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c, \u0435\u0441\u043b\u0438 \u0431\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u00ab\u0448\u0432\u044b\u00bb \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u0442\u0435\u0441\u0442\u0430 \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0437\u0430\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043b \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0445\u043e\u0434 AAA (arrange, act, assert) . \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u043c: class CalculatorTests { public void Sum_2Plus5_7Returned () { // arrange var calc = new Calculator (); // act var res = calc . Sum ( 2 , 5 ); // assert Assert . AreEqual ( 7 , res ); } } \u0422\u0430\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0435\u043c class CalculatorTests { public void Sum_2Plus5_7Returned () { Assert . AreEqual ( 7 , new Calculator (). sum ( 2 , 5 )); } } \u0410 \u0437\u043d\u0430\u0447\u0438\u0442, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c. \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u0435\u043d (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438, \u0438 \u0432\u0441\u043a\u043e\u0440\u0435 \u0432\u0430\u043c \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c. \u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438 \u0414\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440. \u0423 \u043d\u0435\u0433\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043c\u0430\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _orderManager ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _ orderManager . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0431\u0435\u0440\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 AccountData \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e \u043d\u0430\u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u041c\u044b \u0436\u0435 \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u043e\u043e\u043f\u0430\u0440\u043a \u0444\u0430\u0439\u043b\u043e\u0432 *.config. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u043c\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0432 \u0442\u043e\u043c \u0436\u0435 \u0434\u0443\u0445\u0435, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041a\u0430\u043a \u043c\u044b \u043f\u043e\u043c\u043d\u0438\u043c, \u044d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u043c\u044b \u043f\u043e\u0434\u0441\u0443\u043d\u0435\u043c \u0444\u0430\u043b\u044c\u0448\u0438\u0432\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e (fake) . \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a: public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _oms ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _oms . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } /// <summary> /// For testability /// </summary> /// <param name=\"accountData\"></param> /// <param name=\"userManager\"></param> public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } ``` \u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043d\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 , \u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 . ### Fakes : stubs & mocks \u041c\u044b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0434\u0441\u0443\u043d\u0443\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0443 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u0442\u0430\u043d\u0443\u0442 \u043b\u0435\u0437\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 , \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0438 \u0442 . \u0434 . \u0421\u043b\u043e\u0432\u043e\u043c , \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e , \u0447\u0442\u043e \u043e\u0442 \u043d\u0438\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f . \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0438 \u0432\u043b\u0430\u0441\u0442\u0432\u0443\u0435\u043c . \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 . \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 . ** \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u0434\u0434\u0435\u043b\u043e\u043a : \u0441\u0442\u0430\u0431\u044b ( stubs ) \u0438 \u043c\u043e\u043a\u0438 ( mock ). ** \u0427\u0430\u0441\u0442\u043e \u044d\u0442\u0438 \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u043f\u0443\u0442\u0430\u044e\u0442 . \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0442\u043e\u043c , \u0447\u0442\u043e \u0441\u0442\u0430\u0431 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 , \u0430 \u043b\u0438\u0448\u044c \u0438\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 . \u0410 \u043c\u043e\u043a \u2013 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 , \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 , \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437 . \u0418\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 , \u0432\u0430\u0448 \u0442\u0435\u0441\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442\u0441\u044f \u0438\u0437 - \u0437\u0430 \u00ab \u0441\u0442\u0430\u0431\u0430 \u00bb , \u0430 \u0432\u043e\u0442 \u0438\u0437 - \u0437\u0430 \u043c\u043e\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 . \u0421 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 , \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u0431\u044b \u0432 Assert \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 . \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u043a\u0430 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 . #### \u0421\u0442\u0430\u0431 #### ![] ( https : //habrastorage.org/storage2/95a/409/842/95a40984251f9529238b2e48c61e79f2.png) ``` java @Test public void LogIn_ExisingUser_HashReturned () { // Arrange OrderProcessor = Mock . Of < IOrderProcessor > (); OrderData = Mock . Of < IOrderData > (); LayoutManager = Mock . Of < ILayoutManager > (); NewsProvider = Mock . Of < INewsProvider > (); Service = new IosService ( UserManager , AccountData , OrderProcessor , OrderData , LayoutManager , NewsProvider ); // Act var hash = Service . LogIn ( \"ValidUser\" , \"Password\" ); // Assert Assert . That ( ! string . IsNullOrEmpty ( hash )); } ``` #### \u041c\u043e\u043a #### ![] ( https : //habrastorage.org/storage2/92d/add/11c/92dadd11ca7c689b6cc19e1f040c1888.png) ``` java @Test public void Create_AddAccountToSpecificUser_AccountCreatedAndAddedToUser () { // Arrange var account = Mock . Of < AccountViewModel > (); // Act _controller . Create ( 1 , account ); // Assert _accountData . Verify ( m => m . CreateAccount ( It . IsAny < IAccount > ()), Times . Exactly ( 1 )); _accountData . Verify ( m => m . AddAccountToUser ( It . IsAny < int > (), It . IsAny < int > ()), Times . Once ()); } ``` ### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c , \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b , \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u0442\u0430\u0431\u0430\u043c\u0438 ? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c , \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u043e\u043b\u0438\u0432\u0430 . \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 : #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b ( 12 \u0447\u0430\u0441\u043e\u0432 ). \u0418 \u0447\u0435\u0440\u0435\u0437 12 \u0447\u0430\u0441\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0445\u043e\u0440\u043e\u0448\u043e \u043b\u0438 \u043f\u043e\u043b\u0438\u0442\u044b \u0440\u0430\u0441\u0442\u0435\u043d\u0438\u044f , \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0432\u043e\u0434\u044b , \u043a\u0430\u043a\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0447\u0432\u044b \u0438 \u0442 . \u0434 . #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0434\u0430\u0442\u0447\u0438\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0441\u0435\u043a\u0430\u0442\u044c , \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f , \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b\u043e \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b . \u0421\u0442\u0430\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f , \u0430 \u043c\u043e\u043a\u0438 \u2013 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f . ** \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u043e\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442 ** . \u0418\u043d\u0430\u0447\u0435 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u0442\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u00ab \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u00bb . \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0441\u0442\u0430\u0431\u043e\u0432 \u0438\u043b\u0438 \u0436\u0435 \u043c\u043e\u043a \u0438 \u0441\u0442\u0430\u0431\u044b . ### \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u043a\u0438 \u041c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u043a\u0438 \u0438 \u0441\u0442\u0430\u0431\u044b \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e , \u043d\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0447\u0438\u043d , \u043f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e : * \u0412\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e \u043d\u0430\u0441 * \u041c\u043d\u043e\u0433\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u043f\u0438\u043d\u043a\u0430 * \u041d\u0430\u0448\u0438 \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 * \u042d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [ Moq ] ( http : //code.google.com/p/moq/) \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u0431\u043e\u0432. \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [Rhino Mocks](http://www.hibernatingrhinos.com/oss/rhino-mocks). \u041e\u0431\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u2014 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043e\u043d\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b, \u043d\u043e Moq \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435. \u041d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0434\u0432\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 : _TypeMock Isolator_ \u0438 _Microsoft Moles_ . \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043e\u043d\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b . \u0425\u043e\u0442\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u044d\u0442\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e , \u043d\u0438\u0436\u0435 \u044f \u043e\u043f\u0438\u0448\u0443 , \u043f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 - \u0442\u0430\u043a\u0438 \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u0432\u0435\u0449\u0430\u043c\u0438 . \u0428\u043e\u0443\u043a\u0435\u0439\u0441\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c [ \u0442\u0443\u0442 ] ( http : //code.google.com/p/mocking-frameworks-compare/). \u0410 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438 \u043b\u0435\u0433\u043a\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435. ### \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c . ``` java public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } ``` \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u0442\u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u00ab \u043c\u0430\u043b\u043e\u0439 \u043a\u0440\u043e\u0432\u044c\u044e \u00bb . \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e , \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u0441\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 , \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 ( \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e , \u043a\u0430\u043a \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043b\u0438 IOC - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 ). \u042d\u0442\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 . #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 Setter \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u00ab \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u00bb \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f , \u0435\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 IUserManagerFactory \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d - \u043a\u043e\u0434\u0435 \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . ``` java public class UserManagerFactory { private IUserManager _instance ; /// <summary> /// Get UserManager instance /// </summary> /// <returns>IUserManager with configuration from the configuration file</returns> public IUserManager Get () { return _instance ?? Get ( UserConfigurationSection . GetSection ()); } private IUserManager Get ( UserConfigurationSection config ) { return _instance ?? ( _instance = Create ( config )); } /// <summary> /// For testing purposes only! /// </summary> /// <param name=\"userManager\"></param> public void Set ( IUserManager userManager ) { _instance = userManager ; } } \u041f\u043e\u0434\u043c\u0435\u043d\u0430 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u044e \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u0438 \u0432\u0430\u0448\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438. \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 \u0415\u0441\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u0432 \u043a\u043e\u0434\u0435 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0443\u0442\u044c \u2013 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 protected-\u043c\u0435\u0442\u043e\u0434 CreateObjectName() \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043b\u0430\u0441\u0441\u0435-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a, \u0430 \u043d\u0435 \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 (\u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438) \u0438 \u043d\u0430\u0447\u0430\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438. public class Calculator { public double Multipy ( double a , double b ) { var multiplier = new Multiplier (); return multiplier . Execute ( a , b ); } } public interface IArithmetic { double Execute ( double a , double b ); } public class Multiplier : IArithmetic { public double Execute ( double a , double b ) { return a * b ; } } \u041c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Multiplier , \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u0441\u0442. \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0442\u0430\u043a: public class Calculator { public double Multipy ( double a , double b ) { var multiplier = CreateMultiplier (); return multiplier . Execute ( a , b ); } protected virtual IArithmetic CreateMultiplier () { var multiplier = new Multiplier (); return multiplier ; } } public class CalculatorUnderTest : Calculator { protected override IArithmetic CreateMultiplier () { return new FakeMultiplier (); } } public class FakeMultiplier : IArithmetic { public double Execute ( double a , double b ) { return 5 ; } } \u041a\u043e\u0434 \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0430\u043a\u0446\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0431\u0443\u0434\u0443\u0442 DataProvider\u2019\u044b, UserManager\u2019\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 VS OOP \u041c\u043d\u043e\u0433\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0434\u0435\u0441\u043a\u0430\u0442\u044c \u00ab\u044d\u0442\u043e\u0442 \u0432\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d\u00bb \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e. \u042f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u0441 \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c: \u0421\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f, \u0431\u0438\u043d\u0430\u0440\u043d\u0438\u043a\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b, \u0438 \u0432\u0441\u0435 \u043e\u0431\u0432\u0435\u0448\u0430\u043d\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\u043c\u0438. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 .NET \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c internal-\u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 [InternalsVisibleTo] , \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u0437 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a. \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0433\u0434\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u0433\u043e\u0434\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438 \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u043e\u0432\u043e\u0434\u043e\u043c \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 \u043c\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440/\u043f\u0440\u043e\u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0438\u0442\u044c \u0436\u0435\u043b\u0435\u0437\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u044b\u043b\u043e \u0434\u0435\u0448\u0435\u0432\u043b\u0435, \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u0412\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 C#? \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u043d\u0435\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0421++. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434: \u041c\u044b\u0441\u043b\u0438\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0430 \u043d\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043a\u043e\u0434\u0435 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0438\u043b\u0438 dependency injection . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 IOC-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0443. \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043b\u043e\u0433\u0438\u043a\u0443: \u0432\u0430\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u041f\u043e\u0434 \u00ab\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u00bb \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u0434 \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u0435\u0442\u043e\u0432, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430 \u041d\u0430\u043c \u043f\u043e\u0432\u0435\u0437\u043b\u043e, \u043f\u0440\u044f\u043c\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u044f\u0441\u043e\u0440\u0443\u0431\u043a\u0438 \u043d\u0435\u0442, \u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u2013 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438 \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0430\u0442\u044c\u0435. \u0412 \u043a\u0440\u0430\u0439\u043d\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430 \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0441\u0432\u044f\u0437\u0438, \u043a\u043e\u0441\u0442\u044b\u043b\u0438 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0440\u0430\u0434\u043e\u0441\u0442\u0438 \u0436\u0438\u0437\u043d\u0438. \u041d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u2013 \u0442\u0435\u043c\u0430, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0434\u0430\u043b\u0435\u043a\u043e \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438. \u0421\u0442\u043e\u0438\u0442 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u2013 \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430. \u0410 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u044b, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e). \u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a: \u044f\u0434\u0440\u043e, \u043c\u043e\u0434\u0443\u043b\u044c #1, \u043c\u043e\u0434\u0443\u043b\u044c #2 \u0438 \u0442.\u0434. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0436\u0435\u0440\u0442\u0432\u0443. \u0422\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u044f\u0434\u0440\u0430. \u0412\u043e\u0437\u044c\u043c\u0438\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435: \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u041f\u043e\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0438/\u0438\u043b\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410 \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0420\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e, \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0443\u0441\u043f\u0435\u0442\u044c. \u0411\u0443\u0434\u044c\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e ~\u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e~ \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0412\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u043b\u0435\u0432\u044b\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u041d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u043a \u0441\u0432\u043e\u0438\u043c \u0442\u0435\u0441\u0442\u0430\u043c \u043a\u0430\u043a \u043a \u0432\u0442\u043e\u0440\u043e\u0441\u043e\u0440\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443. \u041c\u043d\u043e\u0433\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e \u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442, \u0447\u0442\u043e DRY, KISS \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u2013 \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0430. \u0410 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u0432\u0441\u0435. \u042d\u0442\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u043e. \u0422\u0435\u0441\u0442\u044b \u2013 \u0442\u0430\u043a\u043e\u0439-\u0436\u0435 \u043a\u043e\u0434. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u0440\u0443\u0433\u0430\u044f \u0446\u0435\u043b\u044c \u2013 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043c\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0430 \u043c\u043e\u0433\u0443\u0442 \u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432. \u0415\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0435\u0441\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c: \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0435: \u044d\u0442\u043e \u0431\u0430\u0433, \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u0431\u0430\u0433-\u0442\u0440\u0435\u043a\u0435\u0440\u0435 \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c. \u0411\u0430\u0433 \u0432 \u0442\u0435\u0441\u0442\u0435: \u0432\u0438\u0434\u0438\u043c\u043e, \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f, \u0430 \u0442\u0435\u0441\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0443\u0436\u043d\u043e). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u043d \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442. \u0421\u043c\u0435\u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u2013 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043f\u0430\u0441\u0442\u044c. \u042d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442. \u0418\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u0435\u043d. \u0423\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u0447\u0438\u043d\u0438\u0442\u0435 \u0438\u0445 \u0432\u043e\u0432\u0440\u0435\u043c\u044f, \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0432\u044b\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0439\u0442\u0435 API \u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 CRUD). \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e, \u0442\u043e \u0432\u0441\u043a\u043e\u0440\u0435 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u0430\u043a \u00ab\u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c\u00bb \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0414\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0433\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u043b\u0438\u0437\u0430\u0445 (\u0432 \u0442.\u0447. \u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438) \u041f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0430\u0448\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u043b\u0438 \u043c\u044b \u0432\u043f\u0443\u0441\u0442\u0443\u044e \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u043c \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u0444\u0438\u0447\u0438. \u0412\u0442\u043e\u0440\u0430\u044f \u2013 \u043a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0443\u043b\u0437\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 .NET \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u044d\u0442\u043e: NCover dotTrace \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 \u0441\u0442\u0443\u0434\u0438\u044e Test Coverage Test First? \u042f \u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e \u043d\u0435 \u043a\u0430\u0441\u0430\u043b\u0441\u044f \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0430. \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f Test First \u2013 \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430, \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0430\u044f \u0440\u044f\u0434\u043e\u043c \u043d\u0435\u043e\u0441\u043f\u043e\u0440\u0438\u043c\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e \u0442\u0435\u043c \u0438\u043b\u0438 \u0438\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c, \u0438\u043d\u043e\u0433\u0434\u0430 \u044f \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u044e \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u043f\u0438\u0448\u0443 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0433\u043e\u0442\u043e\u0432 \u043a\u043e\u0434. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u00ab\u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b\u00bb \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u0430\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u00ab\u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c\u00bb. \u0414\u0435\u043b\u0430\u0439\u0442\u0435, \u043a\u0430\u043a \u0432\u0430\u043c \u0443\u0434\u043e\u0431\u043d\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435: \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u00ab\u0432 \u043f\u0440\u0438\u0434\u0430\u0447\u0443\u00bb. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043c\u0435\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c. \u041f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0442\u0435\u043c\u0443 \u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u0442\u0435\u043c\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435 . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043a\u043d\u0438\u0433\u0443 The Art of Unit Testing. \u042f \u0447\u0438\u0442\u0430\u043b \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435. \u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0432\u044b\u0448\u043b\u043e \u0443\u0436\u0435 \u0438 \u0432\u0442\u043e\u0440\u043e\u0435. Source","title":"\u042e\u043d\u0438\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#-","text":"\u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442... \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u0432 \u0436\u0438\u0437\u043d\u0438 \u043d\u0435 \u0434\u0443\u043c\u0430\u043b\u0438, \u0447\u0442\u043e \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0432\u044b \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0435. \u0412\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0435 \u0441\u0432\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0435, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0430\u0448\u0438\u043c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c. \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0447\u0430\u0441\u0442\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u043e\u0447\u043a\u0438 \u0441 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u201cTest it\u201d \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c TestController \u0438\u043b\u0438 MyServiceTestClient . \u0422\u043e \u0447\u0442\u043e \u0432\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0421\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u044b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041e\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443, \u043d\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0442\u0435\u0441\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u044e\u0442, \u0447\u0442\u043e\u0431\u044b \u0432\u0441\u044f \u0438\u043b\u0438 \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0430 \u0438 \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u043c\u0430\u0448\u0438\u043d\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0432\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0435 web-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 UI \u0438 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u0430\u043c \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f: \u0431\u0440\u0430\u0443\u0437\u0435\u0440, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0432\u0441\u0435 \u0435\u0449\u0435 \u0441\u043b\u043e\u0436\u043d\u0435\u0435. \u0420\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0451 \u044d\u0442\u043e \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0438 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d\u0430\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432?","title":"\u042e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#we-need-to-go-deeper","text":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043f\u0443\u0441\u0442\u0438\u043c\u0441\u044f \u043d\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0438 \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043d\u0430\u0448\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e-\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041e\u0431\u0440\u0430\u0442\u0438\u043c\u0441\u044f \u043a \u0432\u0438\u043a\u0438\u043f\u0435\u0434\u0438\u0438: \u041c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 , \u0438\u043b\u0438 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (\u0430\u043d\u0433\u043b. unit testing) \u2014 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0418\u0434\u0435\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0435\u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043d\u0435 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u043a \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0442\u043e \u0435\u0441\u0442\u044c \u043a \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044e \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0443\u0436\u0435 \u043e\u0442\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u043a\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u2013 \u044d\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0431\u0430\u0441\u0442\u0438\u043e\u043d \u043d\u0430 \u0431\u043e\u0440\u044c\u0431\u0435 \u0441 \u0431\u0430\u0433\u0430\u043c\u0438. \u0417\u0430 \u043d\u0438\u043c \u0435\u0449\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435, \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u043e\u0435 \u0438, \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u0440\u0443\u0447\u043d\u043e\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u00ab\u0441\u0432\u043e\u0431\u043e\u0434\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\u00bb. \u041d\u0443\u0436\u043d\u043e \u043b\u0438 \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u0430\u043c? \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442: \u00ab\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430\u00bb.","title":"We need to go deeper"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_1","text":"\u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0430\u0439\u0442-\u0432\u0438\u0437\u0438\u0442\u043a\u0443 \u0438\u0437 5 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u0438\u0441\u044c\u043c\u0430. \u041d\u0430 \u044d\u0442\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0443\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u0441\u044f, \u043d\u0438\u0447\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0435\u043c\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e. \u0417\u0434\u0435\u0441\u044c \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438, \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u00ab\u0440\u0443\u043a\u0430\u043c\u0438\u00bb \u0412\u044b \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442\u0435\u0441\u044c \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u044b\u043c \u0441\u0430\u0439\u0442\u043e\u043c/\u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0444\u043b\u0435\u0448-\u0438\u0433\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u0431\u0430\u043d\u043d\u0435\u0440\u0430\u043c\u0438 \u2013 \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430/\u0430\u043d\u0438\u043c\u0430\u0446\u0438\u044f \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0441\u0442\u0430\u0442\u0438\u043a\u0438. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0438 \u043d\u0435\u0442, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0412\u044b \u0434\u0435\u043b\u0430\u0435\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438. \u0421\u0440\u043e\u043a \u2013 \u043e\u0442 \u0434\u0432\u0443\u0445 \u043d\u0435\u0434\u0435\u043b\u044c \u0434\u043e \u043c\u0435\u0441\u044f\u0446\u0430, \u0432\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u2013 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0436\u0435\u043b\u0435\u0437\u0430 \u0438 \u0441\u043e\u0444\u0442\u0430, \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043d\u0446\u0435. \u0421\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c 1-2 \u0434\u043d\u044f \u043d\u0430 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0435 \u0412\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e \u0438 \u0434\u0430\u0440\u043e\u043c \u043f\u0440\u0435\u0434\u0432\u0438\u0434\u0435\u043d\u0438\u044f. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430\u0441\u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0443\u0442, \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u0435\u0431\u044f \u0441\u0430\u043c, \u0432\u0441\u043b\u0435\u0434 \u0437\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0418\u043d\u043e\u0433\u0434\u0430 \u043a\u043e\u0434 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443, \u0447\u0442\u043e \u0435\u0433\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u2014 ~\u0433\u043e\u0432~ \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0412 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c (\u0441\u0436\u0430\u0442\u044b\u0435 \u0441\u0440\u043e\u043a\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u044b, \u0440\u0430\u0437\u043c\u044b\u0442\u044b\u0435 \u0446\u0435\u043b\u0438 \u0438\u043b\u0438 \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f) \u0432\u044b \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u042f \u0437\u043d\u0430\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0438 \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0443\u0437\u043d\u0430\u043b\u0438 \u0441\u0435\u0431\u044f \u043d\u0430 \u0444\u043e\u0442\u043e \u043d\u0438\u0436\u0435, \u0442\u043e \u0443 \u043c\u0435\u043d\u044f \u0434\u043b\u044f \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438.","title":"\u041d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u0435\u0441\u043b\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_2","text":"\u0412 \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u044f \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 \u0433\u043e\u0434\u0430. \u041e\u043d\u0438 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438: \u0411\u0435\u0437 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u043f\u0430\u0433\u0435\u0442\u0442\u0438-\u043a\u043e\u0434\u043e\u043c \u0438 \u0443\u0432\u043e\u043b\u0438\u0432\u0448\u0438\u043c\u0438\u0441\u044f \u0432\u0435\u0434\u0443\u0449\u0438\u043c\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438. \u041d\u0438\u043a\u0442\u043e \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0435 \u0437\u043d\u0430\u0435\u0442, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0432\u0441\u0435 \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0414\u0430 \u0438 \u0447\u0442\u043e \u043e\u043d\u043e \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0438\u0442\u043e\u0433\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0442\u0434\u0430\u043b\u0435\u043d\u043d\u043e. \u0421 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442. \u0422\u0435\u0441\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0441\u0442\u044c, \u043d\u043e \u0447\u0442\u043e \u043e\u043d\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0442, \u0438 \u043a\u0430\u043a\u043e\u0439 \u043e\u0442 \u043d\u0438\u0445 \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e. \u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435. \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u043a\u0430\u044f-\u043d\u0438\u043a\u0430\u043a\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430, \u0435\u0441\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0430\u0431\u0430\u044f \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0441\u0442\u044c. \u041c\u043e\u0436\u043d\u043e \u043e\u0442\u044b\u0441\u043a\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0449\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u0445\u0438\u0442\u0440\u043e\u0441\u043f\u043b\u0435\u0442\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430. \u0421 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u043c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435\u043c. \u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442. \u0415\u0441\u043b\u0438 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f, \u0442\u043e \u0438\u0445 \u043c\u043d\u043e\u0433\u043e. \u0413\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u044b. \u0418 \u0442\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u2013 \u0430\u0442\u043e\u043c\u0430\u0440\u043d\u044b\u0439: \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0422\u0435\u0441\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043c\u0435\u0442\u043e\u0434\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u043c: \u043a\u0430\u043a\u0438\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0438 \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0436\u0434\u0443\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u0422\u0430\u043a\u0438\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043c\u0435\u043d\u044c\u0448\u0435. \u0412 \u043d\u0438\u0445 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u0422\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e: \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0430\u0440\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0438\u0447, \u0441\u0445\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 getting started guide\u2019\u043e\u043c . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043b\u044e\u0434\u0435\u0439. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u044c \u0438 \u0443\u0445\u043e\u0434\u0438\u0442\u044c. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0441\u0430\u043c\u0430 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043e \u0441\u0435\u0431\u0435 \u043f\u0443\u0442\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u2013 \u043a\u0440\u0435\u043f\u043a\u0438\u0439 \u043e\u0440\u0435\u0448\u0435\u043a, \u0441 \u043d\u0438\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u0435\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u0431\u044b\u0447\u043d\u043e \u0438\u0445 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043f\u043e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u0435\u043d \u0438\u043b\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f.","title":"\u041b\u044e\u0431\u043e\u0439 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0431\u0435\u0437 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u043e\u0431\u0440\u0435\u0447\u0435\u043d \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0441 \u043d\u0443\u043b\u044f"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_3","text":"\u041a\u043e\u043b\u043b\u0435\u0433\u0438 \u0438\u0437 ScrumTrek \u0443\u0432\u0435\u0440\u044f\u044e\u0442, \u0447\u0442\u043e \u0432\u0441\u0435\u043c\u0443 \u0432\u0438\u043d\u043e\u0439 \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0432\u043b\u0430\u0441\u0442\u0435\u043b\u0438\u043d \u0414\u0430\u0440\u0442 \u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442\u0438\u0443\u0441 . \u042f \u0443\u0431\u0435\u0436\u0434\u0435\u043d, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043f\u0440\u0430\u0432\u0434\u0435. \u0411\u0435\u0437\u0434\u0443\u043c\u043d\u043e\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442, \u043d\u043e \u0432\u0440\u0435\u0434\u0438\u0442 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 . \u0415\u0441\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0443 \u0432\u0430\u0441 \u0431\u044b\u043b \u043e\u0434\u0438\u043d \u043d\u0435\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442, \u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0432 \u0442\u0435\u0441\u0442\u044b, \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0432\u0448\u0438\u0441\u044c \u0432 \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u0435, \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u0432\u0430. \u0418 \u0443\u0434\u0432\u043e\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043c\u043d\u0430\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u0430 \u043a\u043e\u0434\u0430 \u043d\u0435 \u0432\u0437\u044f\u043b\u0430 \u0432\u0435\u0440\u0445, \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043f\u0440\u0430\u0432\u0438\u043b . \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b: \u0411\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u043c\u0438 \u041d\u0435 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u041b\u0435\u0433\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u044c\u0441\u044f \u0438 \u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f (\u0434\u0430\u0436\u0435 \u043d\u043e\u0432\u044b\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u043d\u044f\u0442\u044c \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f) \u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0435\u0434\u0438\u043d\u0443\u044e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u044e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0427\u0442\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u043e\u0432, \u043d\u0443\u0436\u043d\u044b \u0442\u0435\u0440\u043f\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u043b\u044f. \u041d\u043e \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443.","title":"\u041f\u043e\u0447\u0435\u043c\u0443 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0438\u043f\u0430?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#vcs","text":"\u0422\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043a. \u0412\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0439. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u043e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443. \u041e\u0431\u0449\u0430\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f: \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u043d\u043e\u043b\u0438\u0442\u043d\u043e\u0435, \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0443 Tests; \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u0439 VCS"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_4","text":"\u041e\u0434\u043d\u0430 \u0438\u0437 \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a: \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b .Core, .Bl \u0438 .Web? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0435\u0449\u0435 .Core.Tests, .Bl.Tests \u0438 .Web.Tests. \u0423 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0430\u0439\u0434-\u044d\u0444\u0444\u0435\u043a\u0442. \u0412\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0442\u0442\u0435\u0440\u043d *.Tests.dll \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u0431\u0438\u043b\u0434-\u0441\u0435\u0440\u0432\u0435\u0440\u0435.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_5","text":"\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 ProblemResolver? \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 ProblemResolverTests. \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c. \u0418\u043d\u0430\u0447\u0435 \u0432\u044b \u043e\u0447\u0435\u043d\u044c \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u043a\u0430\u0442\u0438\u0442\u0435\u0441\u044c ~\u0432 \u0443\u043d\u044b\u043b\u043e\u0435 \u0433\u043e~ \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0438\u043f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 (\u0441 \u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442).","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_6","text":"TestLogin \u2013 \u043d\u0435 \u0441\u0430\u043c\u043e\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430. \u0427\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f? \u041a\u0430\u043a\u043e\u0432\u044b \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b? \u041c\u043e\u0433\u0443\u0442 \u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438? \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0430\u043a\u043e\u0439: [\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434]_[\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439]_[\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435] . \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Calculator, \u0430 \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434 Sum, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 (\u043f\u0440\u0438\u0432\u0435\u0442, \u041a\u044d\u043f!) \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430. \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \u0441lass CalculatorTests { public void Sum_2Plus5_7Returned () { // \u2026 } } \u0422\u0430\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u0430 \u0431\u0435\u0437 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439. \u042d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043a\u043e\u0434\u0443.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u00ab\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439\u00bb \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_7","text":"\u0412\u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b. \u042f \u0432\u0438\u0434\u0435\u043b \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b (\u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c, \u043d\u0435 \u044e\u043d\u0438\u0442, \u0430 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u0435) \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041d\u0435 \u043d\u0430\u0434\u043e \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0432\u0441\u0435 \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0437\u0430 \u0432\u0430\u0441. \u0423\u0434\u0435\u043b\u0438\u0442\u0435 \u0447\u0443\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043e\u0431\u0437\u043e\u0440\u0443 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043d\u043e\u0433\u0438\u0435 .NET \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 MsTest \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u0441\u0442\u0443\u0434\u0438\u0438. \u041c\u043d\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e \u0434\u0443\u0448\u0435 NUnit. \u041e\u043d \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0430\u043f\u043e\u043a \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u0438\u043c\u0435\u0435\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042f \u043c\u043e\u0433\u0443 \u0442\u0430\u043a \u0436\u0435 \u043b\u0435\u0433\u043a\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 NUnit \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0420\u0435\u0448\u0430\u0440\u043f\u0435\u0440\u0430. \u041a\u043e\u043c\u0443-\u0442\u043e \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u043b\u0435\u0433\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c xUnit\u2019\u0430: \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f IDisposable \u043a\u0430\u043a TearDown.","title":"\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432\u0430\u043c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_8","text":"\u041e\u0434\u043d\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 100%, \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u044d\u0442\u043e \u043b\u0438\u0448\u043d\u0435\u0439 \u0442\u0440\u0430\u0442\u043e\u0439 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. \u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434: \u0440\u0430\u0441\u0447\u0435\u0440\u0442\u0438\u0442\u0435 \u043b\u0438\u0441\u0442 \u0431\u0443\u043c\u0430\u0433\u0438 \u043f\u043e \u043e\u0441\u0438 X \u0438 Y, \u0433\u0434\u0435 X \u2013 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c, \u0430 Y \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412\u0430\u0448 \u043a\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438: \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0434\u0435\u0441\u044c \u0438 \u0442\u0430\u043a \u0432\u0441\u0435 \u044f\u0441\u043d\u043e. \u0415\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0421\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0425\u043c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u0434, \u0442\u0443\u0442 \u043f\u0430\u0445\u043d\u0435\u0442 God Object\u2019\u043e\u043c \u0438 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u044c\u044e. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041c\u044b \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u0435\u0433\u043e, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u0443 \u043d\u0430\u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u043f\u043e\u044f\u0432\u044f\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b. \u0422\u0430\u043a \u0437\u0430\u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0438\u0442\u044c? \u0425\u043e\u0447\u0443 \u043e\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u043e\u0434\u0430 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043d\u0430\u043c \u0432\u0441\u0435 \u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438 . \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0427\u0442\u043e \u0443 \u043d\u0430\u0441 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f: C\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0431\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u042d\u0442\u043e \u043d\u0435\u043a\u0438\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438\u043b\u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445. \u041d\u0435 \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b. \u0422\u0435\u0441\u0442\u044b \u0432\u0430\u0436\u043d\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c, \u043a\u0430\u043a \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435. \u041f\u0440\u0438\u0447\u0438\u043d\u0430 \u043f\u043e\u0442\u0435\u0440\u0438 Mars Climate Orbiter 23 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f 1999 \u0433\u043e\u0434\u0430 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u043b\u0430\u0441\u044c \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e-\u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0435: \u043e\u0434\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u0447\u0438\u0442\u0430\u043b\u043e \u00ab\u0432 \u0434\u044e\u0439\u043c\u0430\u0445\u00bb, \u0430 \u0434\u0440\u0443\u0433\u043e\u0435 \u2013 \u00ab\u0432 \u043c\u0435\u0442\u0440\u0430\u0445\u00bb, \u0438 \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u043b\u0438 \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0433 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c, \u0435\u0441\u043b\u0438 \u0431\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u00ab\u0448\u0432\u044b\u00bb \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0427\u0442\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0430 \u0447\u0442\u043e \u2013 \u043d\u0435\u0442?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_9","text":"\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0437\u0430\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043b \u0441\u0435\u0431\u044f \u043f\u043e\u0434\u0445\u043e\u0434 AAA (arrange, act, assert) . \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u043c: class CalculatorTests { public void Sum_2Plus5_7Returned () { // arrange var calc = new Calculator (); // act var res = calc . Sum ( 2 , 5 ); // assert Assert . AreEqual ( 7 , res ); } } \u0422\u0430\u043a\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f, \u0447\u0435\u043c class CalculatorTests { public void Sum_2Plus5_7Returned () { Assert . AreEqual ( 7 , new Calculator (). sum ( 2 , 5 )); } } \u0410 \u0437\u043d\u0430\u0447\u0438\u0442, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u043f\u0440\u043e\u0449\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c.","title":"\u041f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435\u0441\u044c \u0435\u0434\u0438\u043d\u043e\u0433\u043e \u0441\u0442\u0438\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u043b\u0430 \u0442\u0435\u0441\u0442\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_10","text":"\u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c. \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u0435\u043d (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0432 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u0442\u0435\u0439 \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0431\u0443\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0432\u0430\u0448\u0438 \u0442\u0435\u0441\u0442\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438, \u0438 \u0432\u0441\u043a\u043e\u0440\u0435 \u0432\u0430\u043c \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u0438\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c.","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_11","text":"\u0414\u043e \u0441\u0438\u0445 \u043f\u043e\u0440 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440. \u0423 \u043d\u0435\u0433\u043e \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439. \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043c\u0430\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0430\u043a\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _orderManager ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _ orderManager . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } \u0424\u0430\u0431\u0440\u0438\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0431\u0435\u0440\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 AccountData \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0447\u0442\u043e \u043d\u0430\u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u041c\u044b \u0436\u0435 \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u043e\u043e\u043f\u0430\u0440\u043a \u0444\u0430\u0439\u043b\u043e\u0432 *.config. \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0432\u0438\u0441\u0435\u0442\u044c \u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u0441\u043b\u0438 \u043c\u044b \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0432 \u0442\u043e\u043c \u0436\u0435 \u0434\u0443\u0445\u0435, \u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u043e\u0434\u044b \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u0438 \u043d\u0430\u0447\u043d\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u041a\u0430\u043a \u043c\u044b \u043f\u043e\u043c\u043d\u0438\u043c, \u044d\u0442\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c . \u0427\u0442\u043e\u0431\u044b \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u043c\u044b \u043f\u043e\u0434\u0441\u0443\u043d\u0435\u043c \u0444\u0430\u043b\u044c\u0448\u0438\u0432\u0443\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e (fake) . \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043d\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 \u0442\u0430\u043a: public class AccountManagementController : BaseAdministrationController { # region Vars private readonly IOrderManager _oms ; private readonly IAccountData _accountData ; private readonly IUserManager _userManager ; private readonly FilterParam _disabledAccountsFilter ; # endregion public AccountManagementController () { _oms = OrderManagerFactory . GetOrderManager (); _accountData = _oms . GetComponent < IAccountData > (); _userManager = UserManagerFactory . Get (); _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } /// <summary> /// For testability /// </summary> /// <param name=\"accountData\"></param> /// <param name=\"userManager\"></param> public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } } ``` \u0422\u0435\u043f\u0435\u0440\u044c \u0443 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u043f\u043e\u044f\u0432\u0438\u043b\u0430\u0441\u044c \u043d\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 , \u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 . ### Fakes : stubs & mocks \u041c\u044b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b\u0438 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0434\u0441\u0443\u043d\u0443\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0443 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u0442\u0430\u043d\u0443\u0442 \u043b\u0435\u0437\u0442\u044c \u0432 \u0431\u0430\u0437\u0443 , \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0438 \u0442 . \u0434 . \u0421\u043b\u043e\u0432\u043e\u043c , \u0431\u0443\u0434\u0443\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u043e , \u0447\u0442\u043e \u043e\u0442 \u043d\u0438\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f . \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0438 \u0432\u043b\u0430\u0441\u0442\u0432\u0443\u0435\u043c . \u041d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 . \u0421\u0435\u0439\u0447\u0430\u0441 \u043c\u044b \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 . ** \u0412\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u043e\u0434\u0434\u0435\u043b\u043e\u043a : \u0441\u0442\u0430\u0431\u044b ( stubs ) \u0438 \u043c\u043e\u043a\u0438 ( mock ). ** \u0427\u0430\u0441\u0442\u043e \u044d\u0442\u0438 \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u043f\u0443\u0442\u0430\u044e\u0442 . \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0442\u043e\u043c , \u0447\u0442\u043e \u0441\u0442\u0430\u0431 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 , \u0430 \u043b\u0438\u0448\u044c \u0438\u043c\u0438\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 . \u0410 \u043c\u043e\u043a \u2013 \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043a\u0442 , \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 , \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437 . \u0418\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 , \u0432\u0430\u0448 \u0442\u0435\u0441\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0441\u043b\u043e\u043c\u0430\u0435\u0442\u0441\u044f \u0438\u0437 - \u0437\u0430 \u00ab \u0441\u0442\u0430\u0431\u0430 \u00bb , \u0430 \u0432\u043e\u0442 \u0438\u0437 - \u0437\u0430 \u043c\u043e\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 . \u0421 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 , \u0447\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0430\u0431\u044b \u0432 Assert \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430 . \u041f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u043a\u0430 \u043c\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 . #### \u0421\u0442\u0430\u0431 #### ![] ( https : //habrastorage.org/storage2/95a/409/842/95a40984251f9529238b2e48c61e79f2.png) ``` java @Test public void LogIn_ExisingUser_HashReturned () { // Arrange OrderProcessor = Mock . Of < IOrderProcessor > (); OrderData = Mock . Of < IOrderData > (); LayoutManager = Mock . Of < ILayoutManager > (); NewsProvider = Mock . Of < INewsProvider > (); Service = new IosService ( UserManager , AccountData , OrderProcessor , OrderData , LayoutManager , NewsProvider ); // Act var hash = Service . LogIn ( \"ValidUser\" , \"Password\" ); // Assert Assert . That ( ! string . IsNullOrEmpty ( hash )); } ``` #### \u041c\u043e\u043a #### ![] ( https : //habrastorage.org/storage2/92d/add/11c/92dadd11ca7c689b6cc19e1f040c1888.png) ``` java @Test public void Create_AddAccountToSpecificUser_AccountCreatedAndAddedToUser () { // Arrange var account = Mock . Of < AccountViewModel > (); // Act _controller . Create ( 1 , account ); // Assert _accountData . Verify ( m => m . CreateAccount ( It . IsAny < IAccount > ()), Times . Exactly ( 1 )); _accountData . Verify ( m => m . AddAccountToUser ( It . IsAny < int > (), It . IsAny < int > ()), Times . Once ()); } ``` ### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u041f\u043e\u0447\u0435\u043c\u0443 \u0432\u0430\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c , \u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0431\u044b , \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u0442\u0430\u0431\u0430\u043c\u0438 ? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c , \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u043e\u043b\u0438\u0432\u0430 . \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043e\u0439\u0442\u0438 \u043a \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 : #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b ( 12 \u0447\u0430\u0441\u043e\u0432 ). \u0418 \u0447\u0435\u0440\u0435\u0437 12 \u0447\u0430\u0441\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c , \u0445\u043e\u0440\u043e\u0448\u043e \u043b\u0438 \u043f\u043e\u043b\u0438\u0442\u044b \u0440\u0430\u0441\u0442\u0435\u043d\u0438\u044f , \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043b\u0438 \u0432\u043e\u0434\u044b , \u043a\u0430\u043a\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0447\u0432\u044b \u0438 \u0442 . \u0434 . #### \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0434\u0430\u0442\u0447\u0438\u043a\u0438 , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u0441\u0435\u043a\u0430\u0442\u044c , \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u0441\u044f \u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u0441\u044f , \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0434\u044b \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043b\u043e \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b . \u0421\u0442\u0430\u0431\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f , \u0430 \u043c\u043e\u043a\u0438 \u2013 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f . ** \u041b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u043e\u043a\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442 ** . \u0418\u043d\u0430\u0447\u0435 \u0441 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u0442\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u00ab \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0432\u0435\u0449\u044c \u00bb . \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u0441\u0442\u0430\u0431\u043e\u0432 \u0438\u043b\u0438 \u0436\u0435 \u043c\u043e\u043a \u0438 \u0441\u0442\u0430\u0431\u044b . ### \u0418\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u043a\u0438 \u041c\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u043a\u0438 \u0438 \u0441\u0442\u0430\u0431\u044b \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e , \u043d\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0447\u0438\u043d , \u043f\u043e\u0447\u0435\u043c\u0443 \u044f \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e : * \u0412\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u043e \u043d\u0430\u0441 * \u041c\u043d\u043e\u0433\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u043d\u0435 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u043f\u0438\u043d\u043a\u0430 * \u041d\u0430\u0448\u0438 \u0441\u0430\u043c\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438 * \u042d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u0434 , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [ Moq ] ( http : //code.google.com/p/moq/) \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u043e\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u0431\u043e\u0432. \u0414\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a [Rhino Mocks](http://www.hibernatingrhinos.com/oss/rhino-mocks). \u041e\u0431\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 \u2014 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u043e\u043d\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u044b, \u043d\u043e Moq \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435. \u041d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0436\u0435 \u0434\u0432\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 : _TypeMock Isolator_ \u0438 _Microsoft Moles_ . \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043e\u043d\u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0447\u0440\u0435\u0437\u043c\u0435\u0440\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0435\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b . \u0425\u043e\u0442\u044f \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u044d\u0442\u043e \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e , \u043d\u0438\u0436\u0435 \u044f \u043e\u043f\u0438\u0448\u0443 , \u043f\u043e\u0447\u0435\u043c\u0443 \u0432\u0441\u0435 - \u0442\u0430\u043a\u0438 \u043d\u0435 \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438 \u0432\u0435\u0449\u0430\u043c\u0438 . \u0428\u043e\u0443\u043a\u0435\u0439\u0441\u044b \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c [ \u0442\u0443\u0442 ] ( http : //code.google.com/p/mocking-frameworks-compare/). \u0410 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c\u0438 \u043b\u0435\u0433\u043a\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435. ### \u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0412\u0435\u0440\u043d\u0435\u043c\u0441\u044f \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0441 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u043c . ``` java public AccountManagementController ( IAccountData accountData , IUserManager userManager ) { _accountData = accountData ; _userManager = userManager ; _disabledAccountsFilter = new FilterParam ( \"Enabled\" , Expression . Eq , true ); } ``` \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u043e\u0442\u0434\u0435\u043b\u0430\u043b\u0438\u0441\u044c \u00ab \u043c\u0430\u043b\u043e\u0439 \u043a\u0440\u043e\u0432\u044c\u044e \u00bb . \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e , \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u0441\u0435 \u0431\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e . \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 , \u043a\u0430\u043a \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u043d\u0435\u0434\u0440\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 : #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u0438\u043b\u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 ( \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0442\u043e\u0433\u043e , \u043a\u0430\u043a \u0432\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u043b\u0438 IOC - \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 ). \u042d\u0442\u0438\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435 . #### \u0418\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0432 \u0444\u0430\u0431\u0440\u0438\u043a\u0443 Setter \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u00ab \u0441\u043f\u0440\u044f\u0442\u0430\u0442\u044c \u00bb \u043e\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f , \u0435\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 IUserManagerFactory \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d - \u043a\u043e\u0434\u0435 \u043f\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043d\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u0435 . ``` java public class UserManagerFactory { private IUserManager _instance ; /// <summary> /// Get UserManager instance /// </summary> /// <returns>IUserManager with configuration from the configuration file</returns> public IUserManager Get () { return _instance ?? Get ( UserConfigurationSection . GetSection ()); } private IUserManager Get ( UserConfigurationSection config ) { return _instance ?? ( _instance = Create ( config )); } /// <summary> /// For testing purposes only! /// </summary> /// <param name=\"userManager\"></param> public void Set ( IUserManager userManager ) { _instance = userManager ; } }","title":"\u0411\u043e\u0440\u044c\u0431\u0430 \u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_12","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u044e \u0444\u0430\u0431\u0440\u0438\u043a\u0443 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u042d\u0442\u043e \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u043b\u0438 \u0432\u0430\u0448\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0438.","title":"\u041f\u043e\u0434\u043c\u0435\u043d\u0430 \u0444\u0430\u0431\u0440\u0438\u043a\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_13","text":"\u0415\u0441\u043b\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e \u0432 \u043a\u043e\u0434\u0435 \u044f\u0432\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0443\u0442\u044c \u2013 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u044b\u0439 protected-\u043c\u0435\u0442\u043e\u0434 CreateObjectName() \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0432 \u043a\u043b\u0430\u0441\u0441\u0435-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441-\u043d\u0430\u0441\u043b\u0435\u0434\u043d\u0438\u043a, \u0430 \u043d\u0435 \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043b\u0430\u0441\u0441. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u044b\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440 (\u0441\u043e \u0441\u043b\u043e\u0436\u043d\u044b\u043c\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438) \u0438 \u043d\u0430\u0447\u0430\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438. public class Calculator { public double Multipy ( double a , double b ) { var multiplier = new Multiplier (); return multiplier . Execute ( a , b ); } } public interface IArithmetic { double Execute ( double a , double b ); } public class Multiplier : IArithmetic { public double Execute ( double a , double b ) { return a * b ; } } \u041c\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 Multiplier , \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u0441\u0442. \u041f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u0442\u0430\u043a: public class Calculator { public double Multipy ( double a , double b ) { var multiplier = CreateMultiplier (); return multiplier . Execute ( a , b ); } protected virtual IArithmetic CreateMultiplier () { var multiplier = new Multiplier (); return multiplier ; } } public class CalculatorUnderTest : Calculator { protected override IArithmetic CreateMultiplier () { return new FakeMultiplier (); } } public class FakeMultiplier : IArithmetic { public double Execute ( double a , double b ) { return 5 ; } } \u041a\u043e\u0434 \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0430\u043a\u0446\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0436\u0438\u0437\u043d\u0438 \u0432\u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0431\u0443\u0434\u0443\u0442 DataProvider\u2019\u044b, UserManager\u2019\u044b \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0441 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439.","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0444\u0430\u0431\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#vs-oop","text":"\u041c\u043d\u043e\u0433\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u0434\u0435\u0441\u043a\u0430\u0442\u044c \u00ab\u044d\u0442\u043e\u0442 \u0432\u0430\u0448 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d\u00bb \u043d\u0430\u0440\u0443\u0448\u0430\u0435\u0442 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e. \u042f \u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u0441 \u0431\u0435\u0441\u043f\u043e\u043a\u043e\u0438\u0442\u044c:","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 VS OOP"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_14","text":"\u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044f, \u0431\u0438\u043d\u0430\u0440\u043d\u0438\u043a\u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u044b, \u0438 \u0432\u0441\u0435 \u043e\u0431\u0432\u0435\u0448\u0430\u043d\u043e \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u0430\u043c\u0438. \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0442\u0430\u043a, \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0438\u0441\u0441\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 .NET \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c internal-\u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442 [InternalsVisibleTo] , \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u0430\u043c \u0438\u0437 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u0431\u043e\u0440\u043e\u043a.","title":"\u0421\u0435\u0440\u044c\u0435\u0437\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_15","text":"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0433\u0434\u0430 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0436\u0435\u0440\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u0433\u043e\u0434\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0438 \u0434\u043b\u044f \u043a\u043e\u0433\u043e-\u0442\u043e \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u043f\u043e\u0432\u043e\u0434\u043e\u043c \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 \u043c\u043e\u0435\u0439 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043e\u043a\u0438\u043d\u0443\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440/\u043f\u0440\u043e\u0430\u043f\u0433\u0440\u0435\u0439\u0434\u0438\u0442\u044c \u0436\u0435\u043b\u0435\u0437\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u044b\u043b\u043e \u0434\u0435\u0448\u0435\u0432\u043b\u0435, \u0447\u0435\u043c \u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0435\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434. \u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0443\u0447\u0430\u0441\u0442\u043e\u043a, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435. \u0412\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 C#? \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u043d\u0443 \u043d\u0435\u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0441\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0421++. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u043a\u043e\u0434: \u041c\u044b\u0441\u043b\u0438\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043c\u0438, \u0430 \u043d\u0435 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0435\u0433\u043a\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0434\u0435\u043b\u043a\u0430\u043c\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043a\u043e\u0434\u0435 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0430\u043d\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432\u043d\u0443\u0442\u0440\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0430\u0431\u0440\u0438\u043a\u0438 \u0438\u043b\u0438 dependency injection . \u0412 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 IOC-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0430\u043c \u0440\u0430\u0431\u043e\u0442\u0443. \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0432\u044b\u0437\u043e\u0432\u0430 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0418\u0437\u0431\u0435\u0433\u0430\u0439\u0442\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043b\u043e\u0433\u0438\u043a\u0443: \u0432\u0430\u043c \u0441\u043b\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c.","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_16","text":"\u041f\u043e\u0434 \u00ab\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u00bb \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u043e\u0434 \u0431\u0435\u0437 \u0442\u0435\u0441\u0442\u043e\u0432. \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c. \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u0435\u0442\u043e\u0432, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430\u043c\u0438.","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_17","text":"\u041d\u0430\u043c \u043f\u043e\u0432\u0435\u0437\u043b\u043e, \u043f\u0440\u044f\u043c\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0439 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u044f\u0441\u043e\u0440\u0443\u0431\u043a\u0438 \u043d\u0435\u0442, \u0430 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b SOLID \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u2013 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u0438 \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u0430\u0442\u044c\u0435. \u0412 \u043a\u0440\u0430\u0439\u043d\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043d\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0430\u0440\u0443 \u0441\u0435\u0442\u0442\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0444\u0430\u0431\u0440\u0438\u043a \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432.","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_18","text":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0436\u0435\u0441\u0442\u043a\u0438\u0435 \u0441\u0432\u044f\u0437\u0438, \u043a\u043e\u0441\u0442\u044b\u043b\u0438 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435 \u0440\u0430\u0434\u043e\u0441\u0442\u0438 \u0436\u0438\u0437\u043d\u0438. \u041d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433. \u041a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u2013 \u0442\u0435\u043c\u0430, \u0432\u044b\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0434\u0430\u043b\u0435\u043a\u043e \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0438. \u0421\u0442\u043e\u0438\u0442 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e. \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u2013 \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u043e, \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430. \u0410 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0434\u0443\u043c\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u044b, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u044b (\u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e). \u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a: \u044f\u0434\u0440\u043e, \u043c\u043e\u0434\u0443\u043b\u044c #1, \u043c\u043e\u0434\u0443\u043b\u044c #2 \u0438 \u0442.\u0434. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0436\u0435\u0440\u0442\u0432\u0443. \u0422\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435 \u0441 \u044f\u0434\u0440\u0430. \u0412\u043e\u0437\u044c\u043c\u0438\u0442\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u043c\u0435\u043d\u044c\u0448\u0435: \u0442\u043e, \u0447\u0442\u043e \u0432\u044b \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u044b \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c \u0437\u0430 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u041f\u043e\u043a\u0440\u044b\u0432\u0430\u0439\u0442\u0435 \u044d\u0442\u0443 \u043f\u043e\u0434\u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0438/\u0438\u043b\u0438 \u043f\u0440\u0438\u0435\u043c\u043e\u0447\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0410 \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u0442\u0435, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043a\u0440\u044b\u0442\u044c \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430\u043c\u0438. \u0420\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e, \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c, \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0443\u0441\u043f\u0435\u0442\u044c. \u0411\u0443\u0434\u044c\u0442\u0435 \u0433\u043e\u0442\u043e\u0432\u044b, \u0447\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0431\u044b\u0441\u0442\u0440\u043e ~\u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e~ \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f. \u0412\u0430\u043c \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u044f\u0432\u0438\u0442\u044c \u0432\u043e\u043b\u0435\u0432\u044b\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043d\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u0430"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_19","text":"\u041d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u0441\u044c \u043a \u0441\u0432\u043e\u0438\u043c \u0442\u0435\u0441\u0442\u0430\u043c \u043a\u0430\u043a \u043a \u0432\u0442\u043e\u0440\u043e\u0441\u043e\u0440\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u0434\u0443. \u041c\u043d\u043e\u0433\u0438\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e \u043f\u043e\u043b\u0430\u0433\u0430\u044e\u0442, \u0447\u0442\u043e DRY, KISS \u0438 \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u2013 \u044d\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d\u0430. \u0410 \u0432 \u0442\u0435\u0441\u0442\u0430\u0445 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u0432\u0441\u0435. \u042d\u0442\u043e \u043d\u0435 \u0432\u0435\u0440\u043d\u043e. \u0422\u0435\u0441\u0442\u044b \u2013 \u0442\u0430\u043a\u043e\u0439-\u0436\u0435 \u043a\u043e\u0434. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u0440\u0443\u0433\u0430\u044f \u0446\u0435\u043b\u044c \u2013 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u043c\u044b\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0430 \u043c\u043e\u0433\u0443\u0442 \u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432. \u0415\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0435\u0441\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043b \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c: \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434\u0435: \u044d\u0442\u043e \u0431\u0430\u0433, \u0435\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u0431\u0430\u0433-\u0442\u0440\u0435\u043a\u0435\u0440\u0435 \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c. \u0411\u0430\u0433 \u0432 \u0442\u0435\u0441\u0442\u0435: \u0432\u0438\u0434\u0438\u043c\u043e, \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d-\u043a\u043e\u0434 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0441\u044f, \u0430 \u0442\u0435\u0441\u0442 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043d\u0443\u0436\u043d\u043e). \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u043d\u044c\u0448\u0435 \u043e\u043d \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u043e. \u0420\u0430\u0437\u0431\u0435\u0440\u0438\u0442\u0435\u0441\u044c \u0438 \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u0435 \u0442\u0435\u0441\u0442. \u0421\u043c\u0435\u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0438\u0441\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u2013 \u0442\u0435\u0441\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043f\u0430\u0441\u0442\u044c. \u042d\u0442\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442. \u0418\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u0435\u043d. \u0423\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0435 \u0432\u0430\u0448\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u0447\u0438\u043d\u0438\u0442\u0435 \u0438\u0445 \u0432\u043e\u0432\u0440\u0435\u043c\u044f, \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b, \u0432\u044b\u0434\u0435\u043b\u044f\u0439\u0442\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u0438 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0439\u0442\u0435 API \u0442\u0435\u0441\u0442\u043e\u0432. \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u043d\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044f\u0437\u044b\u0432\u0430\u044e\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0442\u0435\u0441\u0442\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 CRUD). \u0415\u0441\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e, \u0442\u043e \u0432\u0441\u043a\u043e\u0440\u0435 \u044d\u0442\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_20","text":"\u0414\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0433\u043e\u0432 \u0432 \u043d\u043e\u0432\u044b\u0445 \u0440\u0435\u043b\u0438\u0437\u0430\u0445 (\u0432 \u0442.\u0447. \u0438 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438) \u041f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u0434\u0430 \u041f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043d\u0430\u0448\u0438\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0438\u043b\u0438 \u043c\u044b \u0432\u043f\u0443\u0441\u0442\u0443\u044e \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u043c \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u0444\u0438\u0447\u0438. \u0412\u0442\u043e\u0440\u0430\u044f \u2013 \u043a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u043d\u0430\u043c \u0435\u0449\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0442\u0443\u043b\u0437\u044b \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u043a\u043e\u0434\u0430 \u043d\u0430 .NET \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 \u044d\u0442\u043e: NCover dotTrace \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 \u0441\u0442\u0443\u0434\u0438\u044e Test Coverage","title":"\u041a\u0430\u043a \u00ab\u0438\u0437\u043c\u0435\u0440\u0438\u0442\u044c\u00bb \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#test-first","text":"\u042f \u0443\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e \u043d\u0435 \u043a\u0430\u0441\u0430\u043b\u0441\u044f \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0430. \u0421 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f Test First \u2013 \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430, \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0449\u0430\u044f \u0440\u044f\u0434\u043e\u043c \u043d\u0435\u043e\u0441\u043f\u043e\u0440\u0438\u043c\u044b\u0445 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e \u0442\u0435\u043c \u0438\u043b\u0438 \u0438\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c, \u0438\u043d\u043e\u0433\u0434\u0430 \u044f \u043e\u0442\u0441\u0442\u0443\u043f\u0430\u044e \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u043f\u0438\u0448\u0443 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0433\u043e\u0442\u043e\u0432 \u043a\u043e\u0434. \u041d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434, \u00ab\u043a\u0430\u043a \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b\u00bb \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0432\u0430\u0436\u043d\u0435\u0435, \u0447\u0435\u043c \u00ab\u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c\u00bb. \u0414\u0435\u043b\u0430\u0439\u0442\u0435, \u043a\u0430\u043a \u0432\u0430\u043c \u0443\u0434\u043e\u0431\u043d\u043e, \u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435: \u0435\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u00ab\u0432 \u043f\u0440\u0438\u0434\u0430\u0447\u0443\u00bb. \u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043c\u0435\u043d\u044f\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c.","title":"Test First?"},{"location":"java/%D0%AE%D0%BD%D0%B8%D1%82-%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BB%D1%8F%20%D1%87%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2/#_21","text":"\u041e\u0442\u043b\u0438\u0447\u043d\u0443\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u043a\u0443 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u043a\u043d\u0438\u0433 \u043f\u043e \u0442\u0435\u043c\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 \u043d\u0430 \u0425\u0430\u0431\u0440\u0435 . \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u044e \u043a\u043d\u0438\u0433\u0443 The Art of Unit Testing. \u042f \u0447\u0438\u0442\u0430\u043b \u043f\u0435\u0440\u0432\u043e\u0435 \u0438\u0437\u0434\u0430\u043d\u0438\u0435. \u041e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0432\u044b\u0448\u043b\u043e \u0443\u0436\u0435 \u0438 \u0432\u0442\u043e\u0440\u043e\u0435. Source","title":"\u041f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0442\u0435\u043c\u0443"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/","text":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430... Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 5: \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 6: \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 7: sed \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 8: \u044f\u0437\u044b\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 9: \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 10: \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 11: expect \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0443\u0442\u0438\u043b\u0438\u0442 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u042d\u0442\u043e \u2014 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 , \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 bash. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 zsh, tcsh, ksh, \u043d\u043e \u043c\u044b \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 bash. \u042d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u0445, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0443\u043c\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 Linux. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440\u044b \u0442\u0435\u0445 \u0436\u0435 \u0441\u0430\u043c\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043b\u044c\u044e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043b\u0438\u0431\u043e \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0418\u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0432\u0432\u0435\u0434\u044f \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439: pwd ; whoami \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e \u0432 \u0441\u0432\u043e\u0451\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u044b\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u043d \u0442\u0430\u043a. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 pwd \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 whoami \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0432\u043e\u0448\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u2014 \u043b\u0438\u0448\u044c \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: getconf ARG_MAX \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043d\u0435\u0451 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043d\u0438\u0445 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0444\u0430\u0439\u043b \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f? \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c, \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u041a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u044b bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b touch . \u0412 \u0435\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443 \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 bash , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0439: #!/bin/bash \u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u0438\u043c\u0432\u043e\u043b \u0440\u0435\u0448\u0451\u0442\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u043e\u0441\u043e\u0431\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0448\u0451\u0442\u043a\u0430, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a (\u044d\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0448\u0435\u0431\u0430\u043d\u0433 ) \u0438 \u043f\u0443\u0442\u044c \u043a bash , \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0441\u043e\u0437\u0434\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f bash . \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0437\u043d\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0451\u0442\u043a\u0438. \u0412\u043e\u0442 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442: #!/bin/bash pwd whoami \u0422\u0443\u0442, \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0444\u0430\u0439\u043b \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0442\u044c. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b, \u0434\u0430\u0432 \u0435\u043c\u0443 \u0438\u043c\u044f myscript , \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u0447\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430. \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043b\u0438\u0448\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c, \u0438\u043d\u0430\u0447\u0435, \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 Permission denied . \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c: chmod +x ./myscript \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: ./myscript \u041f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c Linux \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 echo . \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0437\u043d\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u0434\u0430\u043d\u043d\u044b\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u043d\u0451\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b: #!/bin/bash echo \"The current directory is:\" pwd echo \"The user logged in is:\" whoami \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043d\u0430\u0434\u043f\u0438\u0441\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0443 echo . \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u043f\u043e\u043b\u044c\u0437\u0443\u044f\u0441\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Linux, \u0438\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 echo , \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u0435\u0437 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445: \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u0418\u043d\u043e\u0433\u0434\u0430 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u043a\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0412\u043e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u044e\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: #!/bin/bash echo \"Home for the current user is: $HOME\" \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e $HOME \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445, \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u043c\u0435\u0448\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0451 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c. \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0410 \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430? \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a: echo \"I have $1 in my pocket\" \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442 \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u043c\u0438, \u0438 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u0441\u043e\u0441\u043b\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 $1 . \u042d\u0442\u043e \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e. \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c? \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u043f\u0435\u0440\u0435\u0434 \u0437\u043d\u0430\u043a\u043e\u043c \u0434\u043e\u043b\u043b\u0430\u0440\u0430: echo \"I have \\$1 in my pocket\" \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0437\u043d\u0430\u043a\u0430 \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u044b, bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430: TNW-CUS-FMP \u2014 \u043f\u0440\u043e\u043c\u043e-\u043a\u043e\u0434 \u043d\u0430 10% \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0430 \u043d\u0430\u0448\u0438 \u0443\u0441\u043b\u0443\u0433\u0438, \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 7 \u0434\u043d\u0435\u0439 #!/bin/bash grade=5 person=\"Adam\" echo \"$person is a good boy, he is in grade $grade\" \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u041f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u041e\u0434\u043d\u0430 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u2014 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u0435\u0451 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u043d\u0430\u0447\u043a\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u00ab`\u00bb \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 $() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u043d\u0435 \u0432\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u0443\u044e \u043a\u0430\u0432\u044b\u0447\u043a\u0443. \u041a\u043e\u043c\u0430\u043d\u0434\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 \u0434\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u043a\u0430: mydir=`pwd` \u041f\u0440\u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a: mydir=$(pwd) \u0410 \u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u0438\u0442\u043e\u0433\u0435, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: #!/bin/bash mydir=$(pwd) echo $mydir \u0412 \u0445\u043e\u0434\u0435 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 mydir , \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b echo , \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c. \u0421\u043a\u0440\u0438\u043f\u0442, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0438\u0434\u0430 $((a+b)) : #!/bin/bash var1=$(( 5 + 5 )) echo $var1 var2=$(( $var1 * 2 )) echo $var2 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0435\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u044f\u0442\u0438, \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u2014 \u0434\u0440\u0443\u0433\u043e\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u0438 \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then . \u0412 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0410 \u0432\u043e\u0442 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: #!/bin/bash if pwd then echo \"It works\" fi \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0442\u0435\u043a\u0441\u0442 \u00abit works\u00bb. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0443 \u043d\u0430\u0441 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0421\u043a\u0430\u0436\u0435\u043c, \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 /etc/passwd , \u0438 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. #!/bin/bash user=likegeeks if grep $user /etc/passwd then echo \"The user $user Exists\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 grep \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 /etc/passwd . \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 grep \u0432\u0430\u043c \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u0430, \u0435\u0451 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c . \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0410 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c? \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0432. \u0425\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0441\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u043c \u0438 \u043e\u0431 \u044d\u0442\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u0443\u0435\u043c \u043a\u043e\u0434. \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then-else \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u0438 \u043e \u043d\u0435\u0443\u0434\u0430\u0447\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else . \u0412\u043e\u0442 \u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b else \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0439\u0434\u0451\u0442 \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043e \u0447\u0442\u043e-\u0442\u043e, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u044f, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u0443, \u0438\u043b\u0438 \u043b\u043e\u0436\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 else . \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0430\u043a\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" else echo \"The user $user doesn\u2019t exist\" fi \u0415\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0448\u043b\u043e \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0441 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else \u041d\u0443 \u0447\u0442\u043e \u0436\u0435, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435 \u0438 \u0437\u0430\u0434\u0430\u0434\u0438\u043c\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u043e\u0434\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0449\u0451 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u04301 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b elif \u043a\u043e\u043c\u0430\u043d\u0434\u04302 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 then , \u0438\u043d\u0430\u0447\u0435, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u043e\u0436\u043d\u044b\u043c, \u0438 \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430. #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" elif ls /home then echo \"The user doesn\u2019t exist but anyway there is a directory under /home\" fi \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b useradd , \u0435\u0441\u043b\u0438 \u043f\u043e\u0438\u0441\u043a \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0438\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0449\u0451 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0412 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. n1 -eq n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0440\u0430\u0432\u043d\u043e n2 . n1 -ge n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -gt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 n2 . n1 -le n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -lt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 n2 . n1 -ne n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e n2 . \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438. #!/bin/bash val1=6 if [ $val1 -gt 5 ] then echo \"The test value $val1 is greater than 5\" else echo \"The test value $val1 is not greater than 5\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u044d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 val1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5, \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0442\u0432\u044c then \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0412 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043a\u043e\u0441\u043d\u0451\u043c\u0441\u044f \u043d\u0438\u0436\u0435. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432. str1 = str2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. s tr1 != str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. str1 < str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c str2 . str1 > str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c str2 . -n str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. -z str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438: #!/bin/bash user =\"likegeeks\" if [$user = $USER] then echo \"The user $user is the current logged in user\" fi \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0412\u043e\u0442 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u00ab>\u00bb \u0438 \u00ab<\u00bb \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u0438\u043d\u0430\u0447\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0445\u043e\u0442\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0421\u043a\u0440\u0438\u043f\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u043d\u0430\u043a \u00ab>\u00bb \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430. \u0412\u043e\u0442 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432 \u043a\u043e\u0434\u0435: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0412\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u043a\u0440\u0438\u043f\u0442, \u0445\u043e\u0442\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0432\u044b\u0434\u0430\u0451\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: ./myscript: line 5: [: too many arguments \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u043c $val2 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> \"$val2\" ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0415\u0449\u0451 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u00ab>\u00bb \u0438 \u00ab<\u00bb \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0442\u0430\u043a\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c: Likegeeks likegeeks \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e, \u0434\u0430\u0432 \u0438\u043c\u044f myfile , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443: sort myfile \u041e\u043d\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0430\u043a: likegeeks Likegeeks \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0438: #!/bin/bash val1=Likegeeks val2=likegeeks if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0451 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u2014 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0451\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ASCII-\u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u041f\u043e\u0436\u0430\u043b\u0443\u0439, \u043d\u0438\u0436\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043a\u0430\u0441\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. -d file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0435\u0439. -e file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b. -f file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0444\u0430\u0439\u043b\u043e\u043c. -r file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. -s file \u041f \u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u043f\u0443\u0441\u0442\u044b\u043c. -w file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438. -x file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c. file1 -nt file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u043e\u0432\u0435\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . file1 -ot file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . -O file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. -G file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u0430\u043a \u0432\u043f\u0440\u043e\u0447\u0435\u043c, \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f, \u043d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c. \u0418\u0445 \u0438\u043c\u0435\u043d\u0430, \u044f\u0432\u043b\u044f\u044f\u0441\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u043f\u0440\u044f\u043c\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u0438\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u041e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435: #!/bin/bash mydir=/home/likegeeks if [ -d $mydir ] then echo \"The $mydir directory exists\" cd $ mydir ls else echo \"The $mydir directory does not exist\" fi \u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0435\u0451 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u0441\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443. \u0418\u0442\u043e\u0433\u0438 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u0435\u0449\u0438. \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0442\u0435\u043c\u0430 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0433\u0440\u043e\u043c\u043d\u0430. \u042d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0438\u0437 11 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u2014 \u0432\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u0432 \u044d\u0442\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u044e\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0438 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043f\u0440\u043e\u0447\u043b\u0438. Bash Script Step By Step \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u0439\u043b\u0430\u0445. Bash Scripting Part 2, Bash the awesome \u2014 \u0442\u0443\u0442 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438 for \u0438 while. Bash Scripting Part 3, Parameters & options \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043a\u043b\u044e\u0447\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c, \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432. Bash Scripting Part 4, Input & Output \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u0430\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438, \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0432\u0432\u043e\u0434\u0430, \u0432\u044b\u0432\u043e\u0434\u0430, \u043e\u0448\u0438\u0431\u043e\u043a, \u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0430. Bash Scripting Part 5, Sighals & Jobs \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0438\u0433\u043d\u0430\u043b\u0430\u043c Linux, \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e. Bash Scripting Part 6, Functions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. Bash Scripting Part 7, Using sed \u2014 \u044d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c sed. Bash Scripting Part 8, Using awk \u2014 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk. Bash Scripting Part 9, Regular Expressions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. Bash Scripting Part 10, Practical Examples \u2014 \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u0451\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0434\u0438\u0441\u043a\u0430. Bash Scripting Part 11, Expect Command \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0443 Expect, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c\u0438. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0437\u0434\u0435\u0441\u044c \u0438\u0434\u0451\u0442 \u0440\u0435\u0447\u044c \u043e\u0431 expect-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0438 \u043e\u0431 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438. \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u043e\u0434\u043d\u043e \u0438\u0437 \u0446\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u044d\u0442\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f\u0441\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043b\u044e\u0431\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0432\u0435\u0434\u0451\u0442 \u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u044b\u043c \u0442\u0435\u043c\u0430\u043c, \u0434\u0430\u0432\u0430\u044f \u0448\u0430\u043d\u0441 \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u043c \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Linux. \u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438! \u041f\u0440\u043e\u0441\u0438\u043c \u0433\u0443\u0440\u0443 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u043c\u0430\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u0430, \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u043c\u0438, \u0430 \u043e\u0442 \u0442\u0435\u0445, \u043a\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442, \u0436\u0434\u0451\u043c \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0439. \u0422\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u043e\u0441\u0435. \u0412\u043e\u0439\u0434\u0438\u0442\u0435 , \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430. Source","title":"Bash \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043d\u0430\u0447\u0430\u043b\u043e"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#bash-","text":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430... Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 2: \u0446\u0438\u043a\u043b\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 3: \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043a\u043b\u044e\u0447\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 4: \u0432\u0432\u043e\u0434 \u0438 \u0432\u044b\u0432\u043e\u0434 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 5: \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0444\u043e\u043d\u043e\u0432\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 6: \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 7: sed \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 8: \u044f\u0437\u044b\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 9: \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 10: \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b, \u0447\u0430\u0441\u0442\u044c 11: expect \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0443\u0442\u0438\u043b\u0438\u0442 \u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043f\u043e\u0433\u043e\u0432\u043e\u0440\u0438\u043c \u043e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. \u042d\u0442\u043e \u2014 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 , \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 bash. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 zsh, tcsh, ksh, \u043d\u043e \u043c\u044b \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u043c\u0441\u044f \u043d\u0430 bash. \u042d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u0445, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0443\u043c\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 Linux. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440\u044b \u0442\u0435\u0445 \u0436\u0435 \u0441\u0430\u043c\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u0430\u0439\u043b\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0435\u0439 \u043e\u0431\u0449\u0435\u0439 \u0446\u0435\u043b\u044c\u044e. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043b\u0438\u0431\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043b\u0438\u0431\u043e \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0432\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u2014 \u044d\u0442\u043e \u043c\u043e\u0449\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0418\u0442\u0430\u043a, \u0435\u0441\u043b\u0438 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0437\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u0432\u0432\u0435\u0434\u044f \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u0447\u043a\u0443 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439: pwd ; whoami \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b \u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0438 \u044d\u0442\u043e \u0432 \u0441\u0432\u043e\u0451\u043c \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435, \u0432\u0430\u0448 \u043f\u0435\u0440\u0432\u044b\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0443\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d. \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u043d \u0442\u0430\u043a. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 pwd \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0447\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0430 whoami \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b \u0432\u043e\u0448\u043b\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0433\u043e\u0434\u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u2014 \u043b\u0438\u0448\u044c \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: getconf ARG_MAX \u041a\u043e\u043c\u0430\u043d\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043d\u043e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043d\u0435\u0451 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043d\u0438\u0445 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0444\u0430\u0439\u043b \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f? \u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u0442\u043e\u0442 \u0444\u0430\u0439\u043b, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u044b \u0433\u043e\u0432\u043e\u0440\u0438\u043c, \u0438 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.","title":"Bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b: \u043d\u0430\u0447\u0430\u043b\u043e"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#bash-_1","text":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b touch . \u0412 \u0435\u0433\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u043a\u0430\u043a\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443 \u043c\u044b \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u041d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u0435\u0442 bash , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0439: #!/bin/bash \u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0441\u0438\u043c\u0432\u043e\u043b \u0440\u0435\u0448\u0451\u0442\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442. \u041e\u0434\u043d\u0430\u043a\u043e, \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u043e\u0441\u043e\u0431\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0448\u0451\u0442\u043a\u0430, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432\u043e\u0441\u043a\u043b\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u043d\u0430\u043a (\u044d\u0442\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0448\u0435\u0431\u0430\u043d\u0433 ) \u0438 \u043f\u0443\u0442\u044c \u043a bash , \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0441\u043e\u0437\u0434\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f bash . \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u043d\u0430\u043a\u043e\u043c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u0437\u043d\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0451\u0442\u043a\u0438. \u0412\u043e\u0442 \u043a\u0430\u043a \u044d\u0442\u043e \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442: #!/bin/bash pwd whoami \u0422\u0443\u0442, \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u041e\u0434\u043d\u0430\u043a\u043e, \u0435\u0441\u043b\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0444\u0430\u0439\u043b \u043b\u0435\u0433\u0447\u0435 \u0447\u0438\u0442\u0430\u0442\u044c. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0430 \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.","title":"\u041a\u0430\u043a \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u044b bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_1","text":"\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b, \u0434\u0430\u0432 \u0435\u043c\u0443 \u0438\u043c\u044f myscript , \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u0447\u0442\u0438 \u0437\u0430\u043a\u043e\u043d\u0447\u0435\u043d\u0430. \u0421\u0435\u0439\u0447\u0430\u0441 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043b\u0438\u0448\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c, \u0438\u043d\u0430\u0447\u0435, \u043f\u043e\u043f\u044b\u0442\u0430\u0432\u0448\u0438\u0441\u044c \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0432\u044b \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 Permission denied . \u041f\u043e\u043f\u044b\u0442\u043a\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0441 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c: chmod +x ./myscript \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c: ./myscript \u041f\u043e\u0441\u043b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_2","text":"\u0414\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c Linux \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 echo . \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0437\u043d\u0430\u043d\u0438\u0435\u043c \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u0434\u0430\u043d\u043d\u044b\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0432 \u043d\u0451\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b: #!/bin/bash echo \"The current directory is:\" pwd echo \"The user logged in is:\" whoami \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043d\u0430\u0434\u043f\u0438\u0441\u0438, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0443 echo . \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u0442\u0435, \u043a\u0430\u043a \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b, \u043f\u043e\u043b\u044c\u0437\u0443\u044f\u0441\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Linux, \u0438\u043b\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 echo , \u0432\u0437\u0433\u043b\u044f\u043d\u0438\u0442\u0435 \u043d\u0430 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b.","title":"\u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_3","text":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438. \u041d\u0435\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043f\u043b\u043e\u0445\u043e\u0433\u043e \u0432 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0431\u0435\u0437 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0432\u0435\u0441\u044c\u043c\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u044b. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0432\u0430 \u0442\u0438\u043f\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445: \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_4","text":"\u0418\u043d\u043e\u0433\u0434\u0430 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u043a\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0412\u043e\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u044e\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: #!/bin/bash echo \"Home for the current user is: $HOME\" \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e $HOME \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0445 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u0445, \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u043c\u0435\u0448\u0430\u0435\u0442 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0451 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0442\u044c. \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u044b\u0448\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0410 \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u043e\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430? \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0430\u043a: echo \"I have $1 in my pocket\" \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u0442 \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0430\u043c\u0438, \u0438 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u043c\u044b \u0441\u043e\u0441\u043b\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u0421\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 $1 . \u042d\u0442\u043e \u043d\u0435 \u0442\u043e, \u0447\u0442\u043e \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e. \u0427\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c? \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u043f\u0435\u0440\u0435\u0434 \u0437\u043d\u0430\u043a\u043e\u043c \u0434\u043e\u043b\u043b\u0430\u0440\u0430: echo \"I have \\$1 in my pocket\" \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u043e, \u0447\u0442\u043e \u043e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0437\u043d\u0430\u043a\u0430 \u0434\u043e\u043b\u043b\u0430\u0440\u0430","title":"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u044b"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_5","text":"\u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u044b, bash-\u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041a\u0430\u043a \u0438 \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438, \u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0437\u043d\u0430\u043a \u0434\u043e\u043b\u043b\u0430\u0440\u0430: TNW-CUS-FMP \u2014 \u043f\u0440\u043e\u043c\u043e-\u043a\u043e\u0434 \u043d\u0430 10% \u0441\u043a\u0438\u0434\u043a\u0443 \u043d\u0430 \u043d\u0430\u0448\u0438 \u0443\u0441\u043b\u0443\u0433\u0438, \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0434\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 7 \u0434\u043d\u0435\u0439 #!/bin/bash grade=5 person=\"Adam\" echo \"$person is a good boy, he is in grade $grade\" \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0442\u0430\u043a\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_6","text":"\u041e\u0434\u043d\u0430 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u2014 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0432\u044b\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u0430\u043d\u0434 \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u0435\u0451 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0433\u0434\u0435 \u0443\u0433\u043e\u0434\u043d\u043e \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u043d\u0430\u0447\u043a\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u00ab`\u00bb \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 $() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043f\u0440\u043e\u0441\u043b\u0435\u0434\u0438\u0442\u0435 \u0437\u0430 \u0442\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0432\u043c\u0435\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430 \u043d\u0435 \u0432\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u0443\u044e \u043a\u0430\u0432\u044b\u0447\u043a\u0443. \u041a\u043e\u043c\u0430\u043d\u0434\u0443 \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 \u0434\u0432\u0430 \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u043a\u0430: mydir=`pwd` \u041f\u0440\u0438 \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435 \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a: mydir=$(pwd) \u0410 \u0441\u043a\u0440\u0438\u043f\u0442, \u0432 \u0438\u0442\u043e\u0433\u0435, \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: #!/bin/bash mydir=$(pwd) echo $mydir \u0412 \u0445\u043e\u0434\u0435 \u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0451\u043d \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 mydir , \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b echo , \u043f\u043e\u043f\u0430\u0434\u0451\u0442 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c. \u0421\u043a\u0440\u0438\u043f\u0442, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","title":"\u041f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043a\u043e\u043c\u0430\u043d\u0434"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_7","text":"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0438\u0434\u0430 $((a+b)) : #!/bin/bash var1=$(( 5 + 5 )) echo $var1 var2=$(( $var1 * 2 )) echo $var2 \u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438","title":"\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#if-then","text":"\u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0435\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u044f\u0442\u0438, \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0434\u043d\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u2014 \u0434\u0440\u0443\u0433\u043e\u0435. \u041f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445, \u0438 \u0437\u0434\u0435\u0441\u044c \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then . \u0412 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u043e\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0410 \u0432\u043e\u0442 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440: #!/bin/bash if pwd then echo \"It works\" fi \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b pwd \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u0441\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u043d \u0442\u0435\u043a\u0441\u0442 \u00abit works\u00bb. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u0443 \u043d\u0430\u0441 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439. \u0421\u043a\u0430\u0436\u0435\u043c, \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u043a\u043e\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 /etc/passwd , \u0438 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u043e\u0441\u044c, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442. #!/bin/bash user=likegeeks if grep $user /etc/passwd then echo \"The user $user Exists\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u044d\u0442\u043e\u0433\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 grep \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 /etc/passwd . \u0415\u0441\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 grep \u0432\u0430\u043c \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u0430, \u0435\u0451 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0437\u0434\u0435\u0441\u044c . \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0410 \u0435\u0441\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c? \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0430\u043c \u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0432. \u0425\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0431\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0441\u043a\u0430\u0437\u0430\u043b \u043d\u0430\u043c \u0438 \u043e\u0431 \u044d\u0442\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0441\u043e\u0432\u0435\u0440\u0448\u0435\u043d\u0441\u0442\u0432\u0443\u0435\u043c \u043a\u043e\u0434.","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#if-then-else","text":"\u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u0438 \u043e \u043d\u0435\u0443\u0434\u0430\u0447\u0435, \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else . \u0412\u043e\u0442 \u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430: if \u043a\u043e\u043c\u0430\u043d\u0434\u0430 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b else \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0438\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u0438\u043d\u043d\u044b\u043c \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0439\u0434\u0451\u0442 \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u043e \u0447\u0442\u043e-\u0442\u043e, \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u043e\u0442 \u043d\u0443\u043b\u044f, \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c \u043d\u0435\u0443\u0434\u0430\u0447\u0443, \u0438\u043b\u0438 \u043b\u043e\u0436\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u0431\u0443\u0434\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0441\u043b\u0435 else . \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0430\u043a\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" else echo \"The user $user doesn\u2019t exist\" fi \u0415\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0448\u043b\u043e \u043f\u043e \u0432\u0435\u0442\u043a\u0435 else . \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0441 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 if-then-else \u041d\u0443 \u0447\u0442\u043e \u0436\u0435, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043b\u044c\u0448\u0435 \u0438 \u0437\u0430\u0434\u0430\u0434\u0438\u043c\u0441\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c \u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445. \u0427\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0430\u0434\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0435 \u043e\u0434\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e? \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0439\u0434\u0435\u043d, \u043d\u0430\u0434\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0435\u0449\u0451 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u2014 \u0435\u0449\u0451 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f. \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u044d\u0442\u043e \u0442\u0430\u043a: if \u043a\u043e\u043c\u0430\u043d\u0434\u04301 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b elif \u043a\u043e\u043c\u0430\u043d\u0434\u04302 then \u043a\u043e\u043c\u0430\u043d\u0434\u044b fi \u0415\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0435\u0451 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 then , \u0438\u043d\u0430\u0447\u0435, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0432\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u043e\u0436\u043d\u044b\u043c, \u0438 \u0435\u0441\u043b\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430. #!/bin/bash user=anotherUser if grep $user /etc/passwd then echo \"The user $user Exists\" elif ls /home then echo \"The user doesn\u2019t exist but anyway there is a directory under /home\" fi \u0412 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u043c \u0441\u043a\u0440\u0438\u043f\u0442\u0435 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b useradd , \u0435\u0441\u043b\u0438 \u043f\u043e\u0438\u0441\u043a \u043d\u0435 \u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0438\u043b\u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0449\u0451 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0435.","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f if-then-else"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_8","text":"\u0412 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. n1 -eq n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0440\u0430\u0432\u043d\u043e n2 . n1 -ge n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -gt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u0431\u043e\u043b\u044c\u0448\u0435 n2 . n1 -le n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e n2 . n1 -lt n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043c\u0435\u043d\u044c\u0448\u0435 n2 . n1 -ne n2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 n1 \u043d\u0435 \u0440\u0430\u0432\u043d\u043e n2 . \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u0438\u043d \u0438\u0437 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438. #!/bin/bash val1=6 if [ $val1 -gt 5 ] then echo \"The test value $val1 is greater than 5\" else echo \"The test value $val1 is not greater than 5\" fi \u0412\u043e\u0442 \u0447\u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u044d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 val1 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5, \u0432 \u0438\u0442\u043e\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0442\u0432\u044c then \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_9","text":"\u0412 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u041e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u043a\u043e\u0441\u043d\u0451\u043c\u0441\u044f \u043d\u0438\u0436\u0435. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432. str1 = str2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. s tr1 != str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b. str1 < str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c str2 . str1 > str2 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 str1 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c str2 . -n str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. -z str1 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u0443, \u0435\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 str1 \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438: #!/bin/bash user =\"likegeeks\" if [$user = $USER] then echo \"The user $user is the current logged in user\" fi \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0412\u043e\u0442 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a, \u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u0438\u0442 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044c. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e, \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u00ab>\u00bb \u0438 \u00ab<\u00bb \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u043a\u043e\u0441\u043e\u0439 \u0447\u0435\u0440\u0442\u044b, \u0438\u043d\u0430\u0447\u0435 \u0441\u043a\u0440\u0438\u043f\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0445\u043e\u0442\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 \u0438 \u043d\u0435 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f. \u0421\u043a\u0440\u0438\u043f\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u0442 \u0437\u043d\u0430\u043a \u00ab>\u00bb \u043a\u0430\u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0432\u043e\u0434\u0430. \u0412\u043e\u0442 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u044d\u0442\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432 \u043a\u043e\u0434\u0435: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0412\u043e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043a\u0440\u0438\u043f\u0442\u0430. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435 \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u043a\u0440\u0438\u043f\u0442, \u0445\u043e\u0442\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f, \u0432\u044b\u0434\u0430\u0451\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435: ./myscript: line 5: [: too many arguments \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u043c $val2 \u0432 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438: #!/bin/bash val1=text val2=\"another text\" if [ $val1 \\> \"$val2\" ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0451 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u043d\u0430\u0434\u043e. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0415\u0449\u0451 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 \u00ab>\u00bb \u0438 \u00ab<\u00bb \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0438 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0445. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u044d\u0442\u0443 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0444\u0430\u0439\u043b \u0441 \u0442\u0430\u043a\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c: Likegeeks likegeeks \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e, \u0434\u0430\u0432 \u0438\u043c\u044f myfile , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0442\u0430\u043a\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443: sort myfile \u041e\u043d\u0430 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0430\u043a: likegeeks Likegeeks \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043a\u0440\u0438\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0442\u0435 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0438: #!/bin/bash val1=Likegeeks val2=likegeeks if [ $val1 \\> $val2 ] then echo \"$val1 is greater than $val2\" else echo \"$val1 is less than $val2\" fi \u0415\u0441\u043b\u0438 \u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0451 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442 \u2014 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u043e\u0439. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort \u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0412 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0438\u0441\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0437\u0434\u0435\u0441\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0451\u043c \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ASCII-\u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u0434\u043e\u0432 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 sort , \u0432 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438, \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430.","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_10","text":"\u041f\u043e\u0436\u0430\u043b\u0443\u0439, \u043d\u0438\u0436\u0435\u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. \u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u043a\u0430\u0441\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u0412\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. -d file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0435\u0439. -e file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b. -f file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0444\u0430\u0439\u043b\u043e\u043c. -r file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. -s file \u041f \u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u043f\u0443\u0441\u0442\u044b\u043c. -w file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043b\u0438 \u043e\u043d \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438. -x file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u043c. file1 -nt file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u043e\u0432\u0435\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . file1 -ot file2 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0442\u0430\u0440\u0448\u0435 \u043b\u0438 file1 , \u0447\u0435\u043c file2 . -O file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. -G file \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0444\u0430\u0439\u043b, \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u0433\u0440\u0443\u043f\u043f\u044b \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u0430\u043a \u0432\u043f\u0440\u043e\u0447\u0435\u043c, \u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f, \u043d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043c\u043d\u0438\u0442\u044c. \u0418\u0445 \u0438\u043c\u0435\u043d\u0430, \u044f\u0432\u043b\u044f\u044f\u0441\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043b\u043e\u0432, \u043f\u0440\u044f\u043c\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043d\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u0438\u043c\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. \u041e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0434\u043d\u0443 \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435: #!/bin/bash mydir=/home/likegeeks if [ -d $mydir ] then echo \"The $mydir directory exists\" cd $ mydir ls else echo \"The $mydir directory does not exist\" fi \u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442, \u0434\u043b\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0435\u0451 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435. \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0441 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u0441\u0435 \u043e\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0442\u043e\u043c\u0443 \u0436\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443.","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"linux/bash%20scripting/Bash-%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D1%8B%20%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%BE/#_11","text":"\u0421\u0435\u0433\u043e\u0434\u043d\u044f \u043c\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0432\u0435\u0449\u0438. \u041d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435, \u0442\u0435\u043c\u0430 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0433\u0440\u043e\u043c\u043d\u0430. \u042d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0438\u0437 11 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u044f\u043c\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u2014 \u0432\u043e\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u043e\u0432 \u044d\u0442\u0438\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0441\u044e\u0434\u0430 \u0432\u043a\u043b\u044e\u0447\u0451\u043d \u0438 \u0442\u043e\u0442, \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043f\u0440\u043e\u0447\u043b\u0438. Bash Script Step By Step \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043e\u043f\u0438\u0441\u0430\u043d\u044b \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b, \u0441\u0442\u0440\u043e\u043a, \u0432\u044b\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e \u0444\u0430\u0439\u043b\u0430\u0445. Bash Scripting Part 2, Bash the awesome \u2014 \u0442\u0443\u0442 \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0446\u0438\u043a\u043b\u0430\u043c\u0438 for \u0438 while. Bash Scripting Part 3, Parameters & options \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043a\u043b\u044e\u0447\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c, \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432. Bash Scripting Part 4, Input & Output \u2014 \u0437\u0434\u0435\u0441\u044c \u0440\u0435\u0447\u044c \u0438\u0434\u0451\u0442 \u043e \u0434\u0435\u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0440\u0430\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043d\u0438\u043c\u0438, \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445 \u0432\u0432\u043e\u0434\u0430, \u0432\u044b\u0432\u043e\u0434\u0430, \u043e\u0448\u0438\u0431\u043e\u043a, \u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0430. Bash Scripting Part 5, Sighals & Jobs \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0438\u0433\u043d\u0430\u043b\u0430\u043c Linux, \u0438\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u0437\u0430\u043f\u0443\u0441\u043a\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043f\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044e. Bash Scripting Part 6, Functions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432 \u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445, \u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. Bash Scripting Part 7, Using sed \u2014 \u044d\u0442\u0430 \u0441\u0442\u0430\u0442\u044c\u044f \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c sed. Bash Scripting Part 8, Using awk \u2014 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 awk. Bash Scripting Part 9, Regular Expressions \u2014 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445. Bash Scripting Part 10, Practical Examples \u2014 \u0437\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u0451\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0434\u0438\u0441\u043a\u0430. Bash Scripting Part 11, Expect Command \u2014 \u044d\u0442\u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043f\u043e\u0441\u0432\u044f\u0449\u0451\u043d \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0443 Expect, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u043c\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c\u0438. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0437\u0434\u0435\u0441\u044c \u0438\u0434\u0451\u0442 \u0440\u0435\u0447\u044c \u043e\u0431 expect-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0438 \u043e\u0431 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 bash-\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u043c\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438. \u041f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u043e\u0434\u043d\u043e \u0438\u0437 \u0446\u0435\u043d\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u044d\u0442\u043e\u0439 \u0441\u0435\u0440\u0438\u0438 \u0441\u0442\u0430\u0442\u0435\u0439 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f\u0441\u044c \u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043b\u044e\u0431\u043e\u0433\u043e \u0443\u0440\u043e\u0432\u043d\u044f, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0432\u0435\u0434\u0451\u0442 \u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u044b\u043c \u0442\u0435\u043c\u0430\u043c, \u0434\u0430\u0432\u0430\u044f \u0448\u0430\u043d\u0441 \u0432\u0441\u0435\u043c \u0436\u0435\u043b\u0430\u044e\u0449\u0438\u043c \u043f\u0440\u043e\u0434\u0432\u0438\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u0434\u0435\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 Linux. \u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438! \u041f\u0440\u043e\u0441\u0438\u043c \u0433\u0443\u0440\u0443 bash-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u043e\u043d\u0438 \u0434\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0434\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u043c\u0430\u0441\u0442\u0435\u0440\u0441\u0442\u0432\u0430, \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0441\u0435\u043a\u0440\u0435\u0442\u0430\u043c\u0438, \u0430 \u043e\u0442 \u0442\u0435\u0445, \u043a\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442, \u0436\u0434\u0451\u043c \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0439. \u0422\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u043e\u0441\u0435. \u0412\u043e\u0439\u0434\u0438\u0442\u0435 , \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430. Source","title":"\u0418\u0442\u043e\u0433\u0438"},{"location":"linux/bash%20scripting/Read%20Command/","text":"Read Command Bash ships with a number of built-in commands that you can use on the command line or in your shell scripts. In this article, we\u2019ll explore the built-in read command. Bash read Built-in read is a bash built-in command that reads a line from the standard input (or from the file descriptor) and split the line into words. The first word is assigned to the first name, the second one to the second name, and so on. The general syntax of the read built-in takes the following form: To illustrate how the command works, open your terminal, type read var1 var2 , and hit \u201cEnter\u201d. The command will wait for the user to enter the input. Type two words and press \u201cEnter\u201d. ` read var1 var2 `` Hello, World! ` The words are assigned to the names that are passed to the read command as arguments. Use echo or printf to verify it: ` echo $var1 `` echo $var2 ` Hello, World! Instead of typing on the terminal, you can pass the standard input to read using other methods such as piping, here-string, or heredoc : echo \"Hello, World!\" | ( read var1 var2 ; echo -e \" $var1 \\n $var2 \" ) read and echo are enclosed in parentheses and executed in the same subshell. Hello, World! Here is an example using a here string and printf : ` read -r var1 var2 <<< \"Hello, World!\" `` printf \"var1: %s \\nvar2: %s\\n\" \" $var1 \" \" $var2 \" ` Var1: Hello, Var2: World! When no argument is provided to the read command, the entire line is assigned to the REPLY variable: echo \"Hello, world!\" | ( read ; echo \" $REPLY \" ) Hello, World! If the number of arguments supplied to read is bigger than the number of words read from the input, the remaining words are assigned to the last name: echo \"Linux is awesome.\" | ( read var1 var2 ; echo -e \"Var1: $var1 \\nVar2: $var2 \" ) Var1: Linux Var2: is awesome. Otherwise, if the number of arguments is less than the number of names, an empty value is assigned to the remaining names: echo \"Hello, World!\" | ( read var1 var2 var3 ; echo -e \"Var1: $var1 \\nVar2: $var2 \\nVar3: $var3 \" ) Var1: Hello, Var2: World! Var3: By default, read interprets the backslash as an escape character, which sometimes may cause unexpected behavior. To disable backslash escaping, invoke the command with the -r option. Below is an example showing how read works when invoked with and without the -r option: ` read <<< \"Hello, \\tWorld!\" `` printf %s \" $REPLY \" ` Hello, tWorld! ` read -r <<< \"Hello, \\tWorld!\" `` printf %s \" $REPLY \" ` Hello, \\t World! Generally, you should always use read with the -r option. Changing the Delimiter The default behavior of read is to split the line into words using one or more spaces, tabs, and newline as delimiters. To use another character as a delimiter, assign it to the IFS variable (Internal Field Separator). echo \"Linux:is:awesome.\" | ( IFS = \":\" read -r var1 var2 var3 ; echo -e \" $var1 \\n $var2 \\n $var3 \" ) Linux is awesome. When IFS is set to a character other than space or tab, the words are separated by exactly one character: ` echo \"Linux::is:awesome.\" | \\` ` ( IFS = \":\" read -r var1 var2 var3 var4 ; echo -e \"Var1: $var1 \\nVar2: $var2 \\nVar3: $var3 \\nVar4: $var4 \" ) ` The line is separated in four words. The second word is an empty value representing the segment between the delimiters. It is created because we used two delimiter characters next to each other( :: ). Var1: Linux Var2: Var3: is Var4: awesome. You can use more than one delimiter to split the line. When specifying multiple delimiters, assign the characters to the IFS variable without a space between them. Here is an example using _ an - as delimiters: echo 'Linux_is-awesome.' | ( IFS = \"-_\" read -r var1 var2 var3 ; echo -e \" $var1 \\n $var2 \\n $var3 \" ) Linux is awesome. Prompt String When writing interactive bash scripts, you can use the read command to get the user input. To specify a prompt string, use the -p option. The prompt is printed before the read is executed and doesn\u2019t include a newline. Here is a simple example: read -r -p \"Are you sure?\" Generally, you would use the read command inside a while loop to force the user to give one of the expected answers. The code below will prompt the user for system reboot : while true ; do read -r -p \"Do you wish to reboot the system? (Y/N): \" answer case $answer in [ Yy ] * ) reboot ; break ;; [ Nn ] * ) exit ;; * ) echo \"Please answer Y or N.\" ;; esac done If the shell script asks users to enter sensitive information, like password, use the -s option that tells read not to print the input on the terminal: read -r -s -p \"Enter your password: \" Assign the Words to Array To assign the words to an array instead of variable names, invoke the read command with the -a option: read -r -a MY_ARR <<< \"Linux is awesome.\" for i in \" ${ MY_ARR [@] } \" ; do echo \" $i \" done Linux is awesome. When both an array and a variable name are given, all words are assigned to the array. Conclusion The read command is used to split a line of input into words. Source","title":"Read Command"},{"location":"linux/bash%20scripting/Read%20Command/#bash-read-built-in","text":"read is a bash built-in command that reads a line from the standard input (or from the file descriptor) and split the line into words. The first word is assigned to the first name, the second one to the second name, and so on. The general syntax of the read built-in takes the following form: To illustrate how the command works, open your terminal, type read var1 var2 , and hit \u201cEnter\u201d. The command will wait for the user to enter the input. Type two words and press \u201cEnter\u201d. ` read var1 var2 `` Hello, World! ` The words are assigned to the names that are passed to the read command as arguments. Use echo or printf to verify it: ` echo $var1 `` echo $var2 ` Hello, World! Instead of typing on the terminal, you can pass the standard input to read using other methods such as piping, here-string, or heredoc : echo \"Hello, World!\" | ( read var1 var2 ; echo -e \" $var1 \\n $var2 \" ) read and echo are enclosed in parentheses and executed in the same subshell. Hello, World! Here is an example using a here string and printf : ` read -r var1 var2 <<< \"Hello, World!\" `` printf \"var1: %s \\nvar2: %s\\n\" \" $var1 \" \" $var2 \" ` Var1: Hello, Var2: World! When no argument is provided to the read command, the entire line is assigned to the REPLY variable: echo \"Hello, world!\" | ( read ; echo \" $REPLY \" ) Hello, World! If the number of arguments supplied to read is bigger than the number of words read from the input, the remaining words are assigned to the last name: echo \"Linux is awesome.\" | ( read var1 var2 ; echo -e \"Var1: $var1 \\nVar2: $var2 \" ) Var1: Linux Var2: is awesome. Otherwise, if the number of arguments is less than the number of names, an empty value is assigned to the remaining names: echo \"Hello, World!\" | ( read var1 var2 var3 ; echo -e \"Var1: $var1 \\nVar2: $var2 \\nVar3: $var3 \" ) Var1: Hello, Var2: World! Var3: By default, read interprets the backslash as an escape character, which sometimes may cause unexpected behavior. To disable backslash escaping, invoke the command with the -r option. Below is an example showing how read works when invoked with and without the -r option: ` read <<< \"Hello, \\tWorld!\" `` printf %s \" $REPLY \" ` Hello, tWorld! ` read -r <<< \"Hello, \\tWorld!\" `` printf %s \" $REPLY \" ` Hello, \\t World! Generally, you should always use read with the -r option.","title":"Bash read Built-in"},{"location":"linux/bash%20scripting/Read%20Command/#changing-the-delimiter","text":"The default behavior of read is to split the line into words using one or more spaces, tabs, and newline as delimiters. To use another character as a delimiter, assign it to the IFS variable (Internal Field Separator). echo \"Linux:is:awesome.\" | ( IFS = \":\" read -r var1 var2 var3 ; echo -e \" $var1 \\n $var2 \\n $var3 \" ) Linux is awesome. When IFS is set to a character other than space or tab, the words are separated by exactly one character: ` echo \"Linux::is:awesome.\" | \\` ` ( IFS = \":\" read -r var1 var2 var3 var4 ; echo -e \"Var1: $var1 \\nVar2: $var2 \\nVar3: $var3 \\nVar4: $var4 \" ) ` The line is separated in four words. The second word is an empty value representing the segment between the delimiters. It is created because we used two delimiter characters next to each other( :: ). Var1: Linux Var2: Var3: is Var4: awesome. You can use more than one delimiter to split the line. When specifying multiple delimiters, assign the characters to the IFS variable without a space between them. Here is an example using _ an - as delimiters: echo 'Linux_is-awesome.' | ( IFS = \"-_\" read -r var1 var2 var3 ; echo -e \" $var1 \\n $var2 \\n $var3 \" ) Linux is awesome.","title":"Changing the Delimiter"},{"location":"linux/bash%20scripting/Read%20Command/#prompt-string","text":"When writing interactive bash scripts, you can use the read command to get the user input. To specify a prompt string, use the -p option. The prompt is printed before the read is executed and doesn\u2019t include a newline. Here is a simple example: read -r -p \"Are you sure?\" Generally, you would use the read command inside a while loop to force the user to give one of the expected answers. The code below will prompt the user for system reboot : while true ; do read -r -p \"Do you wish to reboot the system? (Y/N): \" answer case $answer in [ Yy ] * ) reboot ; break ;; [ Nn ] * ) exit ;; * ) echo \"Please answer Y or N.\" ;; esac done If the shell script asks users to enter sensitive information, like password, use the -s option that tells read not to print the input on the terminal: read -r -s -p \"Enter your password: \"","title":"Prompt String"},{"location":"linux/bash%20scripting/Read%20Command/#assign-the-words-to-array","text":"To assign the words to an array instead of variable names, invoke the read command with the -a option: read -r -a MY_ARR <<< \"Linux is awesome.\" for i in \" ${ MY_ARR [@] } \" ; do echo \" $i \" done Linux is awesome. When both an array and a variable name are given, all words are assigned to the array.","title":"Assign the Words to Array"},{"location":"linux/bash%20scripting/Read%20Command/#conclusion","text":"The read command is used to split a line of input into words. Source","title":"Conclusion"},{"location":"linux/bash%20scripting/Remove%20recursive%20by%20extension/","text":"Remove recursive by extension Remove files recursively by extension find . -name \"*.bak\" -type f -delete But use it with precaution. Run first: find . -name \"*.bak\" -type f to see exactly which files you will remove. Also, make sure that -delete is the last argument in your command. If you put it before the -name *.bak argument, it will delete everything.","title":"Remove recursive by extension"},{"location":"linux/bash%20scripting/Remove%20recursive%20by%20extension/#remove-files-recursively-by-extension","text":"find . -name \"*.bak\" -type f -delete But use it with precaution. Run first: find . -name \"*.bak\" -type f to see exactly which files you will remove. Also, make sure that -delete is the last argument in your command. If you put it before the -name *.bak argument, it will delete everything.","title":"Remove files recursively by extension"},{"location":"linux/bash%20scripting/Write%20to%20File/","text":"Write to File One of the most common tasks when writing Bash scripts or working on the Linux command line is reading and writing files. This article explains how to write text to a file in Bash, using the redirection operators and tee command. Writing to a File using Redirection Operators In Bash, the redirection of output allows you to capture the output from a command and write it to a file. The general format for redirecting and writing output to a file is as follows: output > filename output >> filename The > redirection operator writes the output to a given file. If the file exists, it is truncated to zero length. Otherwise, the file is created. Be extra careful when using this operator as you may overwrite an important file. The >> redirection operator appends the output to a given file. The file is created if it does not exist. You need to have write permissions to the file. Otherwise, you will receive a permission denied error. Here is a simple example showing how the redirect the output of the echo command to a file: echo \"this is a line\" > file.txt To prevent overwriting existing files, enable the \u201cnoclobber\u201d option with the set builtin: ` set -o noclobber `` echo \"this is a line\" > file.txt ` bash: file.txt: cannot overwrite existing file The >| operator allows you to override the Bash \u201cnoclobber\u201d option: ` set -o noclobber `` echo \"this is a line\" > | file.txt ` The >> operator append the output to the end of the file, rather than overwriting the file: echo \"this is a line\" >> file.txt Use the printf command to create a complex output: printf \"Hello, I'm %s.\\n\" $USER > file.txt If you want to write multiple lines to a file, use the Here document (Heredoc) redirection. For example, you can pass the content to the cat command and write it to a file: cat << EOF > file.txt The current working directory is: $PWD You are logged in as $(whoami) EOF To append the lines, change > with >> before the file name: cat << EOF >> file.txt The current working directory is: $PWD You are logged in as $(whoami) EOF You can write the output of any command to a file: date + \"Year: %Y, Month: %m, Day: %d\" > file.txt The output of the date command will be written to the file. Writing to a File using the tee Command The tee command reads from the standard input and writes to both standard output and one or more files simultaneously. echo \"this is a line\" | tee file.txt The tee command\u2019s default behavior is to overwrite the specified file, same as the > operator. To append the output to the file, invoke the command with the -a ( --append ) option: echo \"this is a line\" | tee -a file.txt If you don\u2019t want the tee to write to the standard output, you can redirect it to /dev/null : echo \"this is a line\" | tee file.txt >/dev/null To write the text to more than one file, specify the files as arguments to the tee command: echo \"this is a line\" | tee file_1.txt file_2.txt file_3.txt Another advantage of the tee command is that you can use it in conjunction with sudo and write to files owned by other users. To append text to a file that you don\u2019t have write permissions to, prepend sudo before tee : echo \"this is a line\" | sudo tee file.txt The echo command output is passed as input to the tee , which elevates the sudo permissions and writes the text to the file. Conclusion In Linux, to write text to a file, use the > and >> redirection operators or the tee command. Source","title":"Write to File"},{"location":"linux/bash%20scripting/Write%20to%20File/#writing-to-a-file-using-redirection-operators","text":"In Bash, the redirection of output allows you to capture the output from a command and write it to a file. The general format for redirecting and writing output to a file is as follows: output > filename output >> filename The > redirection operator writes the output to a given file. If the file exists, it is truncated to zero length. Otherwise, the file is created. Be extra careful when using this operator as you may overwrite an important file. The >> redirection operator appends the output to a given file. The file is created if it does not exist. You need to have write permissions to the file. Otherwise, you will receive a permission denied error. Here is a simple example showing how the redirect the output of the echo command to a file: echo \"this is a line\" > file.txt To prevent overwriting existing files, enable the \u201cnoclobber\u201d option with the set builtin: ` set -o noclobber `` echo \"this is a line\" > file.txt ` bash: file.txt: cannot overwrite existing file The >| operator allows you to override the Bash \u201cnoclobber\u201d option: ` set -o noclobber `` echo \"this is a line\" > | file.txt ` The >> operator append the output to the end of the file, rather than overwriting the file: echo \"this is a line\" >> file.txt Use the printf command to create a complex output: printf \"Hello, I'm %s.\\n\" $USER > file.txt If you want to write multiple lines to a file, use the Here document (Heredoc) redirection. For example, you can pass the content to the cat command and write it to a file: cat << EOF > file.txt The current working directory is: $PWD You are logged in as $(whoami) EOF To append the lines, change > with >> before the file name: cat << EOF >> file.txt The current working directory is: $PWD You are logged in as $(whoami) EOF You can write the output of any command to a file: date + \"Year: %Y, Month: %m, Day: %d\" > file.txt The output of the date command will be written to the file.","title":"Writing to a File using Redirection Operators"},{"location":"linux/bash%20scripting/Write%20to%20File/#writing-to-a-file-using-the-tee-command","text":"The tee command reads from the standard input and writes to both standard output and one or more files simultaneously. echo \"this is a line\" | tee file.txt The tee command\u2019s default behavior is to overwrite the specified file, same as the > operator. To append the output to the file, invoke the command with the -a ( --append ) option: echo \"this is a line\" | tee -a file.txt If you don\u2019t want the tee to write to the standard output, you can redirect it to /dev/null : echo \"this is a line\" | tee file.txt >/dev/null To write the text to more than one file, specify the files as arguments to the tee command: echo \"this is a line\" | tee file_1.txt file_2.txt file_3.txt Another advantage of the tee command is that you can use it in conjunction with sudo and write to files owned by other users. To append text to a file that you don\u2019t have write permissions to, prepend sudo before tee : echo \"this is a line\" | sudo tee file.txt The echo command output is passed as input to the tee , which elevates the sudo permissions and writes the text to the file.","title":"Writing to a File using the tee Command"},{"location":"linux/bash%20scripting/Write%20to%20File/#conclusion","text":"In Linux, to write text to a file, use the > and >> redirection operators or the tee command. Source","title":"Conclusion"},{"location":"linux/customization/Cinnamon%20in%20Ubuntu%2020.04/","text":"Cinnamon in Ubuntu 20.04 Install Cinnamon in Ubuntu To install Cinnamon in Ubuntu: sudo apt update sudo apt full-upgrade To install Cinnamon: sudo apt install cinnamon-desktop-environment After the installation is complete, restart your computer or end your current session. In the login window, you can select a Cinnamon session by clicking on a gear icon:","title":"Cinnamon in Ubuntu 20.04"},{"location":"linux/customization/Cinnamon%20in%20Ubuntu%2020.04/#install-cinnamon-in-ubuntu","text":"To install Cinnamon in Ubuntu: sudo apt update sudo apt full-upgrade To install Cinnamon: sudo apt install cinnamon-desktop-environment After the installation is complete, restart your computer or end your current session. In the login window, you can select a Cinnamon session by clicking on a gear icon:","title":"Install Cinnamon in Ubuntu"},{"location":"linux/customization/Cinnamon%20theme%20switch%20script/","text":"Cinnamon theme switch script Simple dark/light theme switcher script #!/bin/bash current_theme = ` gsettings get org.cinnamon.desktop.interface gtk-theme ` normal_theme = \"'Mint-Y-Darker-Aqua'\" dark_theme = 'Mint-Y-Dark-Aqua' normal_icon_set = 'ePapirus' dark_icon_set = 'Papirus-Dark' if [ \" $current_theme \" == \" $normal_theme \" ] then gsettings set org.cinnamon.desktop.interface gtk-theme \" $dark_theme \" gsettings set org.cinnamon.desktop.interface icon-theme \" $dark_icon_set \" else gsettings set org.cinnamon.desktop.interface gtk-theme \" $normal_theme \" gsettings set org.cinnamon.desktop.interface icon-theme \" $normal_icon_set \" fi","title":"Cinnamon theme switch script"},{"location":"linux/customization/GTK%203.16%20Fix%20Large%20Black%20Borders%20Around%20Windows/","text":"GTK 3.16 Fix Large Black Borders Around Windows Fix Large Black Borders Around Header Bar Apps With Some Themes In Ubuntu 15.10 (GTK 3.16) Author: Andrew | Posted: November 13, 2015 In Ubuntu 15.10 (which uses GTK 3.16), there's a bug which causes some themes, like Numix, to have large black borders. This bug only occurs for applications that use header bars (client-side decorations) and it affects Ubuntu (with Unity), while Xubuntu, Ubuntu MATE and Ubuntu GNOME don't seem to be affected (at least in my quick test). Update: MATE with Compiz enabled is also affected so I guess any desktop environment under which you use Compiz is affected (thanks to pawelp!). Here's a screenshot with GNOME Clocks (an app that uses header bars) under Unity (Ubuntu 15.10), using Numix GTK theme: I'm not sure when/if this bug will be fixed but until then, you can fix it yourself. Below you'll find a simple fix which will remove the black borders no matter what GTK theme you're using. To fix the large black borders bug in Ubuntu, open ~/.config/gtk-3.0/gtk.css (create the ~/.config/gtk-3.0 folder if it doesn't exist) with a text editor (I'll use Gedit below): mkdir -p ~/.config/gtk-3.0 gedit ~/.config/gtk-3.0/gtk.css and in this file, add the following: .window-frame { box-shadow: none; margin: 1px; } This forces any theme you use to have a 1 pixel border. You can use any value you want - for instance, use \"0\" for borderless windows . Then save the file and close all the applications affected by the black border bug (or you can log out and log back in) , then try them again and you shouldn't see large black borders any more. Here's the same application I've used above to show the bug (GNOME Clocks, running under Unity), after applying the fix: Thanks to Phaeilo @ GitHub for the fix! Source","title":"GTK 3.16 Fix Large Black Borders Around Windows"},{"location":"linux/customization/GTK%203.16%20Fix%20Large%20Black%20Borders%20Around%20Windows/#fix-large-black-borders-around-header-bar-apps-with-some-themes-in-ubuntu-1510-gtk-316","text":"Author: Andrew | Posted: November 13, 2015 In Ubuntu 15.10 (which uses GTK 3.16), there's a bug which causes some themes, like Numix, to have large black borders. This bug only occurs for applications that use header bars (client-side decorations) and it affects Ubuntu (with Unity), while Xubuntu, Ubuntu MATE and Ubuntu GNOME don't seem to be affected (at least in my quick test). Update: MATE with Compiz enabled is also affected so I guess any desktop environment under which you use Compiz is affected (thanks to pawelp!). Here's a screenshot with GNOME Clocks (an app that uses header bars) under Unity (Ubuntu 15.10), using Numix GTK theme: I'm not sure when/if this bug will be fixed but until then, you can fix it yourself. Below you'll find a simple fix which will remove the black borders no matter what GTK theme you're using. To fix the large black borders bug in Ubuntu, open ~/.config/gtk-3.0/gtk.css (create the ~/.config/gtk-3.0 folder if it doesn't exist) with a text editor (I'll use Gedit below): mkdir -p ~/.config/gtk-3.0 gedit ~/.config/gtk-3.0/gtk.css and in this file, add the following: .window-frame { box-shadow: none; margin: 1px; } This forces any theme you use to have a 1 pixel border. You can use any value you want - for instance, use \"0\" for borderless windows . Then save the file and close all the applications affected by the black border bug (or you can log out and log back in) , then try them again and you shouldn't see large black borders any more. Here's the same application I've used above to show the bug (GNOME Clocks, running under Unity), after applying the fix: Thanks to Phaeilo @ GitHub for the fix! Source","title":"Fix Large Black Borders Around Header Bar Apps With Some Themes In Ubuntu 15.10 (GTK 3.16)"},{"location":"linux/customization/Nemo%20add%20keyboard%20shortcuts/","text":"Nemo add keyboard shortcuts Add keyboard shortcuts to nemo for Nemo 2.2.4 under Linux Mint 17 do this: Go to: /home/yourusername/.gnome2/accels --- NOTE: .gnome2 is a hidden folder! Open the \"nemo\" file with your text editor Add your shortcut: for example, when having 2 panes to move a folder or file from one pane to the other using \"CTRL+j\" : (gtk_accel_path \"/DirViewActions/Move to next pane\" \"j\") Note: remove the \";\" at the beginning of the line Restart the GTK system : sudo killall -u yourusername Open Nemo, to test my example: press \"F3\" choose different folders on each pane, select one folder or file from one pane and press \"Ctrl+j\", that folder or file should move from one pane to the other one. There are a lot of different commands to customize in that file, be careful not to use a current shortcut! Source","title":"Nemo add keyboard shortcuts"},{"location":"linux/customization/Nemo%20add%20keyboard%20shortcuts/#add-keyboard-shortcuts-to-nemo","text":"for Nemo 2.2.4 under Linux Mint 17 do this: Go to: /home/yourusername/.gnome2/accels --- NOTE: .gnome2 is a hidden folder! Open the \"nemo\" file with your text editor Add your shortcut: for example, when having 2 panes to move a folder or file from one pane to the other using \"CTRL+j\" : (gtk_accel_path \"/DirViewActions/Move to next pane\" \"j\") Note: remove the \";\" at the beginning of the line Restart the GTK system : sudo killall -u yourusername Open Nemo, to test my example: press \"F3\" choose different folders on each pane, select one folder or file from one pane and press \"Ctrl+j\", that folder or file should move from one pane to the other one. There are a lot of different commands to customize in that file, be careful not to use a current shortcut! Source","title":"Add keyboard shortcuts to nemo"},{"location":"linux/customization/Nemo%20context%20menu%20action/","text":"Nemo context menu action Add Nemo context menu action Go to /usr/share/nemo/actions Create file terminator.nemo_action : [Nemo Action] Active=true Name=Open in Terminator Name[uk]=\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432 Terminator Comment=Run Terminator here Exec=terminator -m -e 'cd %P; exec bash' Icon-Name=terminator Selection=none Extensions=any; Example .nemo_action: [Nemo Action] ############################################# #### DEBUGGING: #### #### Run Nemo in debug mode using with ### NEMO_DEBUG set to include 'Actions' #### #### i.e. $ nemo --quit #### $ NEMO_DEBUG=Actions nemo --debug ############################################# # Whether this action is active. For troubleshooting. # Optional - if this field is omitted, the action will be active Active=false # Standard tokens that can be used in the Name, Comment (tooltip) and Exec fields: # # %U - insert URI list of selection # %F - insert path list of selection # %P - insert path of parent (current) directory # %f or %N (deprecated) - insert display name of first selected file # %p - insert display name of parent directory # %D - insert device path of file (i.e. /dev/sdb1) # The name to show in the menu, locale supported with standard desktop spec. # **** REQUIRED **** Name=Test Custom Action applied to %N # Tool tip, locale supported (Appears in the status bar) Comment=This is a test for Nemo actions. Action will be applied to %N # What to run. Enclose in < > to run an executable that resides in the actions folder. # **** REQUIRED **** #Exec=gedit %F Exec=<myaction.py -r -g %P %F %U> # Icon name to use in the menu - must be a theme icon name Icon-Name=folder # Gtk Stock ID to use for the icon. Note if both Icon-name and Stock-Id are # defined, the Stock-Id takes precedence. #Stock-Id=gtk-cdrom # What type selection: [s]ingle, [m]ultiple, any, notnone, none (background click), or # a number representing how many files must be selected to display. # ****** REQUIRED ******* Selection=m # What extensions to display on - this is an array, end with a semicolon # Single entry options, ending in a semicolon: # \"dir\" for directory selection # \"none\" for no extension. # \"nodirs\" for any selection, but not including directories. # \"any\" for any file type, including directories. # Individual specific extensions can be a semicolon-terminated list # Extensions are NOT case sensitive. jpg will match JPG, jPg, jpg, etc.. # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** Extensions=any; # What mime-types to display on - this is an array, end with a semicolon # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** #Mimetypes=text/plain; # Separator to use (if any) - add a string to insert between path/url entries # in the exec line. Optional - if you leave this out, a space is inserted. # Note you can have trailing spaces here. #Separator=, # Quote type to use (if any) - enclose paths/urls with quotes. Optional - defaults # to no quotes. # Can be: single, double, backtick #Quote=double # Dependencies - program executables required for this action to work. Nemo will # Search in the path for these program(s) and not display the action if any are missing. # You can also supply an absolute path to a file (i.e. /usr/lib/gvfs/gvfsd-archive) to check # instead of or in addition to an executable in the path. # This is an array, separate entries with semi-colon, and terminate with a semicolon. #Dependencies=gedit; # Conditions - semicolon-separated array of special conditions: # \"desktop\" current (parent) folder is desktop # \"removable\" target (first selection) is removable # \"gsettings <schema> <boolean key>\" is true # \"gsettings <schema> <key> <key-type> <[eq|ne|gt|lt]> <value>\" # \"dbus <name>\" exists # \"exec <program>\" run program and check its exit code (0 is pass, non-0 is fail). # Enclose in < > if the program resides in the action's folder. #Conditions=desktop; # Escape Spaces - set to true to escape spaces in filenames and uris ($U, $F, $P, $D) # # Sometimes this may be preferred to getting raw filenames that must be enclosed in # quotes. # # Optional - by default this is false EscapeSpaces=true # Run in terminal - set to true to execute the Exec line in a spawned terminal window. # # Generally if you use this you should not have Quotes defined, as that will be taken care # of during converting the expanded command string into an arg vector. # # Optional - by default this is false #Terminal=false","title":"Nemo context menu action"},{"location":"linux/customization/Nemo%20context%20menu%20action/#add-nemo-context-menu-action","text":"Go to /usr/share/nemo/actions Create file terminator.nemo_action : [Nemo Action] Active=true Name=Open in Terminator Name[uk]=\u0412\u0456\u0434\u043a\u0440\u0438\u0442\u0438 \u0432 Terminator Comment=Run Terminator here Exec=terminator -m -e 'cd %P; exec bash' Icon-Name=terminator Selection=none Extensions=any;","title":"Add Nemo context menu action"},{"location":"linux/customization/Nemo%20context%20menu%20action/#example-nemo_action","text":"[Nemo Action] ############################################# #### DEBUGGING: #### #### Run Nemo in debug mode using with ### NEMO_DEBUG set to include 'Actions' #### #### i.e. $ nemo --quit #### $ NEMO_DEBUG=Actions nemo --debug ############################################# # Whether this action is active. For troubleshooting. # Optional - if this field is omitted, the action will be active Active=false # Standard tokens that can be used in the Name, Comment (tooltip) and Exec fields: # # %U - insert URI list of selection # %F - insert path list of selection # %P - insert path of parent (current) directory # %f or %N (deprecated) - insert display name of first selected file # %p - insert display name of parent directory # %D - insert device path of file (i.e. /dev/sdb1) # The name to show in the menu, locale supported with standard desktop spec. # **** REQUIRED **** Name=Test Custom Action applied to %N # Tool tip, locale supported (Appears in the status bar) Comment=This is a test for Nemo actions. Action will be applied to %N # What to run. Enclose in < > to run an executable that resides in the actions folder. # **** REQUIRED **** #Exec=gedit %F Exec=<myaction.py -r -g %P %F %U> # Icon name to use in the menu - must be a theme icon name Icon-Name=folder # Gtk Stock ID to use for the icon. Note if both Icon-name and Stock-Id are # defined, the Stock-Id takes precedence. #Stock-Id=gtk-cdrom # What type selection: [s]ingle, [m]ultiple, any, notnone, none (background click), or # a number representing how many files must be selected to display. # ****** REQUIRED ******* Selection=m # What extensions to display on - this is an array, end with a semicolon # Single entry options, ending in a semicolon: # \"dir\" for directory selection # \"none\" for no extension. # \"nodirs\" for any selection, but not including directories. # \"any\" for any file type, including directories. # Individual specific extensions can be a semicolon-terminated list # Extensions are NOT case sensitive. jpg will match JPG, jPg, jpg, etc.. # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** Extensions=any; # What mime-types to display on - this is an array, end with a semicolon # **** EITHER EXTENSIONS OR MIMETYPES IS REQUIRED ***** #Mimetypes=text/plain; # Separator to use (if any) - add a string to insert between path/url entries # in the exec line. Optional - if you leave this out, a space is inserted. # Note you can have trailing spaces here. #Separator=, # Quote type to use (if any) - enclose paths/urls with quotes. Optional - defaults # to no quotes. # Can be: single, double, backtick #Quote=double # Dependencies - program executables required for this action to work. Nemo will # Search in the path for these program(s) and not display the action if any are missing. # You can also supply an absolute path to a file (i.e. /usr/lib/gvfs/gvfsd-archive) to check # instead of or in addition to an executable in the path. # This is an array, separate entries with semi-colon, and terminate with a semicolon. #Dependencies=gedit; # Conditions - semicolon-separated array of special conditions: # \"desktop\" current (parent) folder is desktop # \"removable\" target (first selection) is removable # \"gsettings <schema> <boolean key>\" is true # \"gsettings <schema> <key> <key-type> <[eq|ne|gt|lt]> <value>\" # \"dbus <name>\" exists # \"exec <program>\" run program and check its exit code (0 is pass, non-0 is fail). # Enclose in < > if the program resides in the action's folder. #Conditions=desktop; # Escape Spaces - set to true to escape spaces in filenames and uris ($U, $F, $P, $D) # # Sometimes this may be preferred to getting raw filenames that must be enclosed in # quotes. # # Optional - by default this is false EscapeSpaces=true # Run in terminal - set to true to execute the Exec line in a spawned terminal window. # # Generally if you use this you should not have Quotes defined, as that will be taken care # of during converting the expanded command string into an arg vector. # # Optional - by default this is false #Terminal=false","title":"Example .nemo_action:"},{"location":"linux/customization/Powerline%20for%20Bash/","text":"Powerline for Bash Powerline for Bash (Tested on Ubuntu 19.10, 20.04) Since Powerline is provided via pip, the first step is to install pip3 if we do not already have it on our system. Install pip3: sudo apt install python3-pip Install Powerline: pip3 install --user powerline-status ```` Start powerline by adding it to ` ~/.bashrc ` file: ``` bash # Add this to your PATH if it\u2019s not already declared export PATH = $PATH : $HOME /.local/bin # Powerline configuration if [ -f $HOME /.local/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh ] ; then $HOME /.local/bin/powerline-daemon -q POWERLINE_BASH_CONTINUATION = 1 POWERLINE_BASH_SELECT = 1 source $HOME /.local/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh fi Logout and log back in. With this configuration, when starting a new terminal we will already see Powerline popping up. Unfortunately, this does not yet show any git related information when changing your location into a git repository. To make Powerline working with git as described, there is something more we need to do. Installing Powerline Gitstatus: pip3 install powerline-gitstatus Open the following file and add the lines after the \u201cattached_clients\u201d entry: ~/.local/lib/python3.8/site-packages/powerline/config_files/colorschemes/default.json \"gitstatus\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_clean\" : { \"fg\" : \"green\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_dirty\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_detached\" : { \"fg\" : \"mediumpurple\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_tag\" : { \"fg\" : \"darkcyan\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_behind\" : { \"fg\" : \"gray10\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_ahead\" : { \"fg\" : \"gray10\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_staged\" : { \"fg\" : \"green\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_unmerged\" : { \"fg\" : \"brightred\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_changed\" : { \"fg\" : \"mediumorange\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_untracked\" : { \"fg\" : \"brightestorange\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_stashed\" : { \"fg\" : \"darkblue\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus:divider\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] } Open the following file and change the lines: ~/.local/lib/python3.8/site-packages/powerline/config_files/themes/shell/default.json Change line from: \"function\" : \"powerline.segments.shell.jobnum\" , \"priority\" : 20 To: \"function\" : \"powerline_gitstatus.gitstatus\" , \"priority\" : 40 Finally, we need to install the Powerline font enabling our shell to show all the special characters and icons correctly. Go to your Download directory and clone the Powerline font git repository and install the fonts: cd ~/Downloads git clone https://github.com/powerline/fonts.git --depth = 1 fonts ./fonts/install.sh To use the newly installed fonts in the terminal open preferences and open the selected profile. Check \u201ccustom font\u201d and change the font to \u201cSource Code Pro for Powerline Regular\u201d. Since we have updated the files in the main directory, we can copy the configurations to the user\u2019s home to ensure that the configuration persists even when update change things in the background. To do so generate the directory structure in the user\u2019s home: mkdir ~/.config/powerline mkdir ~/.config/powerline/colorschemes mkdir ~/.config/powerline/themes mkdir ~/.config/powerline/themes/shell And copy the configuration files: cp ~/.local/lib/python3.8/site-packages/powerline/config_files/colorschemes/default.json ~/.config/powerline/colorschemes/ cp ~/.local/lib/python3.8/site-packages/powerline/config_files/themes/shell/default.json ~/.config/powerline/themes/shell/ Visual Studio Code Since, I am using Visual Studio Code, I did recognize that Powerline does not out of the box display properly in the integrated terminal. To improve this behaviour, the settings for the integrated terminal should also be changed: Terminal Integrated Font Family \u2192 Source Code Pro for Powerline Source","title":"Powerline for Bash"},{"location":"linux/customization/Powerline%20for%20Bash/#powerline-for-bash","text":"(Tested on Ubuntu 19.10, 20.04) Since Powerline is provided via pip, the first step is to install pip3 if we do not already have it on our system. Install pip3: sudo apt install python3-pip Install Powerline: pip3 install --user powerline-status ```` Start powerline by adding it to ` ~/.bashrc ` file: ``` bash # Add this to your PATH if it\u2019s not already declared export PATH = $PATH : $HOME /.local/bin # Powerline configuration if [ -f $HOME /.local/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh ] ; then $HOME /.local/bin/powerline-daemon -q POWERLINE_BASH_CONTINUATION = 1 POWERLINE_BASH_SELECT = 1 source $HOME /.local/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh fi Logout and log back in. With this configuration, when starting a new terminal we will already see Powerline popping up. Unfortunately, this does not yet show any git related information when changing your location into a git repository. To make Powerline working with git as described, there is something more we need to do. Installing Powerline Gitstatus: pip3 install powerline-gitstatus Open the following file and add the lines after the \u201cattached_clients\u201d entry: ~/.local/lib/python3.8/site-packages/powerline/config_files/colorschemes/default.json \"gitstatus\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_clean\" : { \"fg\" : \"green\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_dirty\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_branch_detached\" : { \"fg\" : \"mediumpurple\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_tag\" : { \"fg\" : \"darkcyan\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_behind\" : { \"fg\" : \"gray10\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_ahead\" : { \"fg\" : \"gray10\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_staged\" : { \"fg\" : \"green\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_unmerged\" : { \"fg\" : \"brightred\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_changed\" : { \"fg\" : \"mediumorange\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_untracked\" : { \"fg\" : \"brightestorange\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus_stashed\" : { \"fg\" : \"darkblue\" , \"bg\" : \"gray2\" , \"attrs\" : [] }, \"gitstatus:divider\" : { \"fg\" : \"gray8\" , \"bg\" : \"gray2\" , \"attrs\" : [] } Open the following file and change the lines: ~/.local/lib/python3.8/site-packages/powerline/config_files/themes/shell/default.json Change line from: \"function\" : \"powerline.segments.shell.jobnum\" , \"priority\" : 20 To: \"function\" : \"powerline_gitstatus.gitstatus\" , \"priority\" : 40 Finally, we need to install the Powerline font enabling our shell to show all the special characters and icons correctly. Go to your Download directory and clone the Powerline font git repository and install the fonts: cd ~/Downloads git clone https://github.com/powerline/fonts.git --depth = 1 fonts ./fonts/install.sh To use the newly installed fonts in the terminal open preferences and open the selected profile. Check \u201ccustom font\u201d and change the font to \u201cSource Code Pro for Powerline Regular\u201d. Since we have updated the files in the main directory, we can copy the configurations to the user\u2019s home to ensure that the configuration persists even when update change things in the background. To do so generate the directory structure in the user\u2019s home: mkdir ~/.config/powerline mkdir ~/.config/powerline/colorschemes mkdir ~/.config/powerline/themes mkdir ~/.config/powerline/themes/shell And copy the configuration files: cp ~/.local/lib/python3.8/site-packages/powerline/config_files/colorschemes/default.json ~/.config/powerline/colorschemes/ cp ~/.local/lib/python3.8/site-packages/powerline/config_files/themes/shell/default.json ~/.config/powerline/themes/shell/","title":"Powerline for Bash"},{"location":"linux/customization/Powerline%20for%20Bash/#visual-studio-code","text":"Since, I am using Visual Studio Code, I did recognize that Powerline does not out of the box display properly in the integrated terminal. To improve this behaviour, the settings for the integrated terminal should also be changed: Terminal Integrated Font Family \u2192 Source Code Pro for Powerline Source","title":"Visual Studio Code"},{"location":"linux/customization/Shortcuts%20Export%20Cinnamon/","text":"Shortcuts Export Cinnamon Shortcuts Export Cinnamon Shortcuts only Export: dconf dump /org/cinnamon/desktop/keybindings/ > dconf-settings.conf Import: dconf load /org/cinnamon/desktop/keybindings/ < dconf-settings.conf All settings Export: dconf dump /org/cinnamon/ > file.txt Import: dconf load /org/cinnamon/ < file.txt","title":"Shortcuts Export Cinnamon"},{"location":"linux/customization/Shortcuts%20Export%20Cinnamon/#shortcuts-export-cinnamon","text":"","title":"Shortcuts Export Cinnamon"},{"location":"linux/customization/Shortcuts%20Export%20Cinnamon/#shortcuts-only","text":"Export: dconf dump /org/cinnamon/desktop/keybindings/ > dconf-settings.conf Import: dconf load /org/cinnamon/desktop/keybindings/ < dconf-settings.conf","title":"Shortcuts only"},{"location":"linux/customization/Shortcuts%20Export%20Cinnamon/#all-settings","text":"Export: dconf dump /org/cinnamon/ > file.txt Import: dconf load /org/cinnamon/ < file.txt","title":"All settings"},{"location":"linux/customization/Terminal%20set%20wrong%20sudo%20password%20message/","text":"Terminal set wrong sudo password message To set wrong sudo password message first open sudoers file in a text editor sudo xed /etc/sudoers Add this line to file: Defaults badpass_message = \"I've never met this man in my life\"","title":"Terminal set wrong sudo password message"},{"location":"linux/customization/Terminator%20Themes/","text":"Terminator Themes Terminator Themes The biggest collection of themes for Terminator in a plugin. Installation 1. Install the requests python package pip install requests Note: If you're using python 3, ignore the previous command and install the python2-requests package for your specific OS. 2. Create plugins directory if it does not exist mkdir -p $HOME /.config/terminator/plugins 3. Getting the correct plugin For terminator >= 1.9 wget https://git.io/v5Zww -O $HOME \"/.config/terminator/plugins/terminator-themes.py\" For terminator < 1.9 wget https://git.io/v5Zwz -O $HOME \"/.config/terminator/plugins/terminator-themes.py\" 4. Activation Check the TerminatorThemes option under terminator > preferences > plugins . Usage Open the terminator context menu and select Themes . Select you favorite theme and click install (you can preview available themes before installing). Enjoy! Setting a Default There are two ways to set a chosen theme as a default: Option One: Edit Terminator Config Manually Once you install a theme it's stored in Preferences > Profiles. To change an installed theme to the default one open ~/.config/terminator/config and replace the [[default]] theme with your preferred theme under the [profiles] setting. (thanks @jacsmith21) Option Two: Use the GUI If you do not want to deal with the modification of the configuration file, you can do the following: Go to Preferences Choose the Layouts tab. Choose your preferred layout. Choose the layout terminal (in the next column). Choose you preferred profile. Additionally in order to reuse your new selected profile in the new terminals (avoid selecting the profile in each split) open preferences > global and check the 'Re-use profiles for new terminals' option. Source","title":"Terminator Themes"},{"location":"linux/customization/Terminator%20Themes/#terminator-themes","text":"The biggest collection of themes for Terminator in a plugin.","title":"Terminator Themes"},{"location":"linux/customization/Terminator%20Themes/#installation","text":"1. Install the requests python package pip install requests Note: If you're using python 3, ignore the previous command and install the python2-requests package for your specific OS. 2. Create plugins directory if it does not exist mkdir -p $HOME /.config/terminator/plugins 3. Getting the correct plugin For terminator >= 1.9 wget https://git.io/v5Zww -O $HOME \"/.config/terminator/plugins/terminator-themes.py\" For terminator < 1.9 wget https://git.io/v5Zwz -O $HOME \"/.config/terminator/plugins/terminator-themes.py\" 4. Activation Check the TerminatorThemes option under terminator > preferences > plugins .","title":"Installation"},{"location":"linux/customization/Terminator%20Themes/#usage","text":"Open the terminator context menu and select Themes . Select you favorite theme and click install (you can preview available themes before installing). Enjoy!","title":"Usage"},{"location":"linux/customization/Terminator%20Themes/#setting-a-default","text":"There are two ways to set a chosen theme as a default: Option One: Edit Terminator Config Manually Once you install a theme it's stored in Preferences > Profiles. To change an installed theme to the default one open ~/.config/terminator/config and replace the [[default]] theme with your preferred theme under the [profiles] setting. (thanks @jacsmith21) Option Two: Use the GUI If you do not want to deal with the modification of the configuration file, you can do the following: Go to Preferences Choose the Layouts tab. Choose your preferred layout. Choose the layout terminal (in the next column). Choose you preferred profile. Additionally in order to reuse your new selected profile in the new terminals (avoid selecting the profile in each split) open preferences > global and check the 'Re-use profiles for new terminals' option. Source","title":"Setting a Default"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/","text":"Thunderbird Tray Icon Systray-x with the Thunderbird app is working good on Linux. SysTray-X is a system tray extension for Thunderbird 68+. The addon uses the WebExtension API's to control an external system dependent system tray application. The addon and system tray application can do: custom new mail icon display number of unread / new mails show / hide Thunderbird (minimize) minimizing hides to tray (remove Thunderbird from taskbar, pager and switcher when minimized) minimize on startup minimize on close Ubuntu repository Add the repository 20.10 wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.10/Release.key sudo mv -f Release.key /etc/apt/trusted.gpg.d/Systray-x.Ximi1970.asc sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.10 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update 20.04 LTS wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update 18.04 LTS wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_18.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_18.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update 16.04 LTS wget -q http://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_16.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb http://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_16.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update Install Installing the SysTray-X addon and companion app package: sudo apt install systray-x For other distros see https://github.com/Ximi1970/systray-x#package My custom icon Source","title":"Thunderbird Tray Icon"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#ubuntu-repository","text":"","title":"Ubuntu repository"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#add-the-repository","text":"","title":"Add the repository"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#2010","text":"wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.10/Release.key sudo mv -f Release.key /etc/apt/trusted.gpg.d/Systray-x.Ximi1970.asc sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.10 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update","title":"20.10"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#2004-lts","text":"wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_20.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update","title":"20.04 LTS"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#1804-lts","text":"wget -q https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_18.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb https://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_18.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update","title":"18.04 LTS"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#1604-lts","text":"wget -q http://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_16.04/Release.key sudo apt-key add Release.key sudo bash -c 'echo \"deb http://download.opensuse.org/repositories/home:/Ximi1970:/Mozilla:/Add-ons/xUbuntu_16.04 ./\" > /etc/apt/sources.list.d/systray-x.list' sudo apt update","title":"16.04 LTS"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#install","text":"Installing the SysTray-X addon and companion app package: sudo apt install systray-x For other distros see https://github.com/Ximi1970/systray-x#package","title":"Install"},{"location":"linux/customization/Thunderbird%20Tray%20Icon/#my-custom-icon","text":"Source","title":"My custom icon"},{"location":"linux/how-to/AppImage%20Repack/","text":"AppImage Repack Unpack First , look if your AppImage file is using the newest version of its internal format: /path/to/your.AppImage --appimage-help If you see the following line in the output: --appimage-extract Extract content from embedded filesystem image you can conclude yourself how to proceed. In this case you have a (newer) type 2 AppImage format in front of you. (The 'path' part of the command may be relative or absolute.) Second , if the first command didn't work, you can use a helper tool. However, you need sudo/root privileges for this: download appimagetool (which off course is available as an AppImage). Make it executable and run: /path/to/appimagetool-x86_64.AppImage --list /path/to/your.AppImage This should give you a list of all files and their (relative) paths embedded in your.AppImage . To extract your.AppImage into a directory named and located at /path/to/somedir , run mkdir /path/to/somedir /path/to/appimagetool-x86_64.AppImage /path/to/your.AppImage /path/to/somedir Third , you can mount AppImages (type 1 as well as type 2) without the helper tool too: Type 1: mkdir mountpoint sudo mount -o loop my.AppImage mountpoint/ # You can now inspect the contents # You can now also copy the contents to a writable location of your hard disk sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Type 2: mkdir mountpoint my.AppImage --appimage-offset 123456 # This is just an example output sudo mount my.AppImage mountpoint/ -o offset = 123456 # you can now inspect the contents sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Hint for the 'paranoid': If you do not want to trust the AppImage, the third method is preferable. Because running (for type 2 AppImages) the.AppImage --appimage-extract or the.AppImage --appimage-mount or the.AppImage --appimage-offset means you are actually executing an AppImage (though not its content). Repack: To answer the question of @jayarjo in the comment below ( how to re-package the AppImage after modifications? ): You can use appimagetool not just to extract an existing AppImage into an AppDir. You can use it to also re-package the AppDir (possibly after some changes) back into a (modified) AppImage. Just run appimagetool -v /path/to/AppDir or ARCH = x86_64 ./appimagetool-x86_64.AppImage -v /path/to/AppDir Watch output of command (made verbose by -v ) for the location and name of the newly created AppImage. That's it. Source","title":"AppImage Repack"},{"location":"linux/how-to/AppImage%20Repack/#unpack","text":"First , look if your AppImage file is using the newest version of its internal format: /path/to/your.AppImage --appimage-help If you see the following line in the output: --appimage-extract Extract content from embedded filesystem image you can conclude yourself how to proceed. In this case you have a (newer) type 2 AppImage format in front of you. (The 'path' part of the command may be relative or absolute.) Second , if the first command didn't work, you can use a helper tool. However, you need sudo/root privileges for this: download appimagetool (which off course is available as an AppImage). Make it executable and run: /path/to/appimagetool-x86_64.AppImage --list /path/to/your.AppImage This should give you a list of all files and their (relative) paths embedded in your.AppImage . To extract your.AppImage into a directory named and located at /path/to/somedir , run mkdir /path/to/somedir /path/to/appimagetool-x86_64.AppImage /path/to/your.AppImage /path/to/somedir Third , you can mount AppImages (type 1 as well as type 2) without the helper tool too: Type 1: mkdir mountpoint sudo mount -o loop my.AppImage mountpoint/ # You can now inspect the contents # You can now also copy the contents to a writable location of your hard disk sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Type 2: mkdir mountpoint my.AppImage --appimage-offset 123456 # This is just an example output sudo mount my.AppImage mountpoint/ -o offset = 123456 # you can now inspect the contents sudo umount mountpoint/ # Do not forget the umount step! # If you do forget it, your system may exhibit unwanted behavior. Hint for the 'paranoid': If you do not want to trust the AppImage, the third method is preferable. Because running (for type 2 AppImages) the.AppImage --appimage-extract or the.AppImage --appimage-mount or the.AppImage --appimage-offset means you are actually executing an AppImage (though not its content).","title":"Unpack"},{"location":"linux/how-to/AppImage%20Repack/#repack","text":"To answer the question of @jayarjo in the comment below ( how to re-package the AppImage after modifications? ): You can use appimagetool not just to extract an existing AppImage into an AppDir. You can use it to also re-package the AppDir (possibly after some changes) back into a (modified) AppImage. Just run appimagetool -v /path/to/AppDir or ARCH = x86_64 ./appimagetool-x86_64.AppImage -v /path/to/AppDir Watch output of command (made verbose by -v ) for the location and name of the newly created AppImage. That's it. Source","title":"Repack:"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/","text":"Check for Listening Ports in Linux When troubleshooting network connectivity or application-specific issues, one of the first things to check should be what ports are actually in use on your system and which application is listening on a specific port. This article explains how to use the netstat , ss and lsof commands to find out which services are listening on which ports. The instructions are applicable for all Linux and Unix-based operating systems like macOS. What is Listening Port Network port is identified by its number, the associated IP address, and type of the communication protocol, such as TCP or UDP. Listening port is a network port on which an application or process listens on, acting as a communication endpoint. Each listening port can be open or closed (filtered) using a firewall. In general terms, an open port is a network port that accepts incoming packets from remote locations. You can\u2019t have two services listening to the same port on the same IP address. For example, if you are running an Apache web server that listens on ports 80 and 443 and you try to install Nginx , the later will fail to start because the HTTP and HTTPS ports are already in use. Check Listening Ports with netstat netstat is a command-line tool that can provide information about network connections. To list all TCP or UDP ports that are being listened on, including the services using the ports and the socket status use the following command: sudo netstat -tunlp The options used in this command have the following meaning: -t - Show TCP ports. -u - Show UDP ports. -n - Show numerical addresses instead of resolving hosts. -l - Show only listening ports. -p - Show the PID and name of the listener\u2019s process. This information is shown only if you run the command as root or sudo user. The output will look something like this: Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 445/sshd tcp 0 0 0.0.0.0:25 0.0.0.0:* LISTEN 929/master tcp6 0 0 :::3306 :::* LISTEN 534/mysqld tcp6 0 0 :::80 :::* LISTEN 515/apache2 tcp6 0 0 :::22 :::* LISTEN 445/sshd tcp6 0 0 :::25 :::* LISTEN 929/master tcp6 0 0 :::33060 :::* LISTEN 534/mysqld udp 0 0 0.0.0.0:68 0.0.0.0:* 966/dhclient The important columns in our case are: Proto - The protocol used by the socket. Local Address - The IP Address and port number on which the process listen to. PID/Program name - The PID and the name of the process. If you want to filter the results, use the grep command . For example, to find what process listens on TCP port 22 you would type: sudo netstat -tnlp | grep :22 The output shows that on this machine port 22 is used by the SSH server: tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 445/sshd tcp6 0 0 :::22 :::* LISTEN 445/sshd If the output is empty it means that nothing is listening on the port. You can also filter the list based on criteria, for example, PID, protocol, state, and so on. netstat is obsolete and replaced with ss and ip , but still it is of the most used commands to check network connections. Check Listening Ports with ss ss is the new netstat . It lacks some of the netstat features, but exposes more TCP states and it is slightly faster. The command options are mostly the same, so the transition from netstat to ss is not difficult. To get a list of all listening ports with ss you would type: sudo ss -tunlp The output is almost the same as the one reported by netstat : State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=445,fd=3)) LISTEN 0 100 0.0.0.0:25 0.0.0.0:* users:((\"master\",pid=929,fd=13)) LISTEN 0 128 *:3306 *:* users:((\"mysqld\",pid=534,fd=30)) LISTEN 0 128 *:80 *:* users:((\"apache2\",pid=765,fd=4),(\"apache2\",pid=764,fd=4),(\"apache2\",pid=515,fd=4)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=445,fd=4)) LISTEN 0 100 [::]:25 [::]:* users:((\"master\",pid=929,fd=14)) LISTEN 0 70 *:33060 *:* users:((\"mysqld\",pid=534,fd=33)) Check Listening Ports with lsof lsof is a powerful command-line utility that provides information about files opened by processes. In Linux, everything is a file. You can think of a socket as a file that writes to the network. To get a list of all listening TCP ports with lsof type: sudo lsof -nP -iTCP -sTCP:LISTEN The options used are as follows: -n - Do not convert port numbers to port names. -p - Do not resolve hostnames, show numerical addresses. -iTCP -sTCP:LISTEN - Show only network files with TCP state LISTEN. COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME sshd 445 root 3u IPv4 16434 0t0 TCP *:22 (LISTEN) sshd 445 root 4u IPv6 16445 0t0 TCP *:22 (LISTEN) apache2 515 root 4u IPv6 16590 0t0 TCP *:80 (LISTEN) mysqld 534 mysql 30u IPv6 17636 0t0 TCP *:3306 (LISTEN) mysqld 534 mysql 33u IPv6 19973 0t0 TCP *:33060 (LISTEN) apache2 764 www-data 4u IPv6 16590 0t0 TCP *:80 (LISTEN) apache2 765 www-data 4u IPv6 16590 0t0 TCP *:80 (LISTEN) master 929 root 13u IPv4 19637 0t0 TCP *:25 (LISTEN) master 929 root 14u IPv6 19638 0t0 TCP *:25 (LISTEN) Most of the output columns names are self-explanatory: COMMAND , PID , USER - The name, the pid and the user running the program associated with the port. NAME - The port number. To find what process is listening on a particular port, for example, port 3306 you would use: sudo lsof -nP -iTCP:3306 -sTCP:LISTEN The output shows that MySQL server uses port 3306 : COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME mysqld 534 mysql 30u IPv6 17636 0t0 TCP *:3306 (LISTEN) For more information, visit the lsof man page and read about all other powerful options of this tool. Conclusion We have shown you several commands that you can use to check what ports are in use on your system, and how to find what process listens on a specific port. If you have any questions or remarks, please leave a comment below. Source","title":"Check for Listening Ports in Linux"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/#what-is-listening-port","text":"Network port is identified by its number, the associated IP address, and type of the communication protocol, such as TCP or UDP. Listening port is a network port on which an application or process listens on, acting as a communication endpoint. Each listening port can be open or closed (filtered) using a firewall. In general terms, an open port is a network port that accepts incoming packets from remote locations. You can\u2019t have two services listening to the same port on the same IP address. For example, if you are running an Apache web server that listens on ports 80 and 443 and you try to install Nginx , the later will fail to start because the HTTP and HTTPS ports are already in use.","title":"What is Listening Port"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/#check-listening-ports-with-netstat","text":"netstat is a command-line tool that can provide information about network connections. To list all TCP or UDP ports that are being listened on, including the services using the ports and the socket status use the following command: sudo netstat -tunlp The options used in this command have the following meaning: -t - Show TCP ports. -u - Show UDP ports. -n - Show numerical addresses instead of resolving hosts. -l - Show only listening ports. -p - Show the PID and name of the listener\u2019s process. This information is shown only if you run the command as root or sudo user. The output will look something like this: Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 445/sshd tcp 0 0 0.0.0.0:25 0.0.0.0:* LISTEN 929/master tcp6 0 0 :::3306 :::* LISTEN 534/mysqld tcp6 0 0 :::80 :::* LISTEN 515/apache2 tcp6 0 0 :::22 :::* LISTEN 445/sshd tcp6 0 0 :::25 :::* LISTEN 929/master tcp6 0 0 :::33060 :::* LISTEN 534/mysqld udp 0 0 0.0.0.0:68 0.0.0.0:* 966/dhclient The important columns in our case are: Proto - The protocol used by the socket. Local Address - The IP Address and port number on which the process listen to. PID/Program name - The PID and the name of the process. If you want to filter the results, use the grep command . For example, to find what process listens on TCP port 22 you would type: sudo netstat -tnlp | grep :22 The output shows that on this machine port 22 is used by the SSH server: tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 445/sshd tcp6 0 0 :::22 :::* LISTEN 445/sshd If the output is empty it means that nothing is listening on the port. You can also filter the list based on criteria, for example, PID, protocol, state, and so on. netstat is obsolete and replaced with ss and ip , but still it is of the most used commands to check network connections.","title":"Check Listening Ports with netstat"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/#check-listening-ports-with-ss","text":"ss is the new netstat . It lacks some of the netstat features, but exposes more TCP states and it is slightly faster. The command options are mostly the same, so the transition from netstat to ss is not difficult. To get a list of all listening ports with ss you would type: sudo ss -tunlp The output is almost the same as the one reported by netstat : State Recv-Q Send-Q Local Address:Port Peer Address:Port LISTEN 0 128 0.0.0.0:22 0.0.0.0:* users:((\"sshd\",pid=445,fd=3)) LISTEN 0 100 0.0.0.0:25 0.0.0.0:* users:((\"master\",pid=929,fd=13)) LISTEN 0 128 *:3306 *:* users:((\"mysqld\",pid=534,fd=30)) LISTEN 0 128 *:80 *:* users:((\"apache2\",pid=765,fd=4),(\"apache2\",pid=764,fd=4),(\"apache2\",pid=515,fd=4)) LISTEN 0 128 [::]:22 [::]:* users:((\"sshd\",pid=445,fd=4)) LISTEN 0 100 [::]:25 [::]:* users:((\"master\",pid=929,fd=14)) LISTEN 0 70 *:33060 *:* users:((\"mysqld\",pid=534,fd=33))","title":"Check Listening Ports with ss"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/#check-listening-ports-with-lsof","text":"lsof is a powerful command-line utility that provides information about files opened by processes. In Linux, everything is a file. You can think of a socket as a file that writes to the network. To get a list of all listening TCP ports with lsof type: sudo lsof -nP -iTCP -sTCP:LISTEN The options used are as follows: -n - Do not convert port numbers to port names. -p - Do not resolve hostnames, show numerical addresses. -iTCP -sTCP:LISTEN - Show only network files with TCP state LISTEN. COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME sshd 445 root 3u IPv4 16434 0t0 TCP *:22 (LISTEN) sshd 445 root 4u IPv6 16445 0t0 TCP *:22 (LISTEN) apache2 515 root 4u IPv6 16590 0t0 TCP *:80 (LISTEN) mysqld 534 mysql 30u IPv6 17636 0t0 TCP *:3306 (LISTEN) mysqld 534 mysql 33u IPv6 19973 0t0 TCP *:33060 (LISTEN) apache2 764 www-data 4u IPv6 16590 0t0 TCP *:80 (LISTEN) apache2 765 www-data 4u IPv6 16590 0t0 TCP *:80 (LISTEN) master 929 root 13u IPv4 19637 0t0 TCP *:25 (LISTEN) master 929 root 14u IPv6 19638 0t0 TCP *:25 (LISTEN) Most of the output columns names are self-explanatory: COMMAND , PID , USER - The name, the pid and the user running the program associated with the port. NAME - The port number. To find what process is listening on a particular port, for example, port 3306 you would use: sudo lsof -nP -iTCP:3306 -sTCP:LISTEN The output shows that MySQL server uses port 3306 : COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME mysqld 534 mysql 30u IPv6 17636 0t0 TCP *:3306 (LISTEN) For more information, visit the lsof man page and read about all other powerful options of this tool.","title":"Check Listening Ports with lsof"},{"location":"linux/how-to/Check%20for%20Listening%20Ports%20in%20Linux/#conclusion","text":"We have shown you several commands that you can use to check what ports are in use on your system, and how to find what process listens on a specific port. If you have any questions or remarks, please leave a comment below. Source","title":"Conclusion"},{"location":"linux/how-to/Checksum%20verify%20with%20GtkHash/","text":"Checksum verify with GtkHash Checksum verify with GtkHash GtkHash is a desktop utility for computing message digests or checksums. Most well-known hash functions are supported, including MD5, SHA1, SHA2 (SHA256/SHA512), SHA3 and BLAKE2. It's designed to be an easy to use, graphical alternative to command-line tools such as md5sum. Install as snap SnapCraft link sudo snap install gtkhash File manager extension Adds a Hash feature to File Properties in: Caja (MATE) Nautilus (GNOME) Nemo (Cinnamon) Peony (UKUI) Thunar (Xfce) Install Nemo extension: sudo apt install nemo-gtkhash Nemo actions Add gtkhash-verifi.nemo_action to /usr/share/nemo/actions [Nemo Action] Active=true Name=Verify checksum Name[uk]=\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443 \u0441\u0443\u043c\u0443 Comment=Check the checksum of the file Exec=gtkhash '%F' Icon-Name=system-run-symbolic Selection=s Terminal=false Extensions=any; Right-click menu:","title":"Checksum verify with GtkHash"},{"location":"linux/how-to/Checksum%20verify%20with%20GtkHash/#checksum-verify-with-gtkhash","text":"GtkHash is a desktop utility for computing message digests or checksums. Most well-known hash functions are supported, including MD5, SHA1, SHA2 (SHA256/SHA512), SHA3 and BLAKE2. It's designed to be an easy to use, graphical alternative to command-line tools such as md5sum.","title":"Checksum verify with GtkHash"},{"location":"linux/how-to/Checksum%20verify%20with%20GtkHash/#install-as-snap","text":"SnapCraft link sudo snap install gtkhash","title":"Install as snap"},{"location":"linux/how-to/Checksum%20verify%20with%20GtkHash/#file-manager-extension","text":"Adds a Hash feature to File Properties in: Caja (MATE) Nautilus (GNOME) Nemo (Cinnamon) Peony (UKUI) Thunar (Xfce) Install Nemo extension: sudo apt install nemo-gtkhash","title":"File manager extension"},{"location":"linux/how-to/Checksum%20verify%20with%20GtkHash/#nemo-actions","text":"Add gtkhash-verifi.nemo_action to /usr/share/nemo/actions [Nemo Action] Active=true Name=Verify checksum Name[uk]=\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u0438\u0442\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0443 \u0441\u0443\u043c\u0443 Comment=Check the checksum of the file Exec=gtkhash '%F' Icon-Name=system-run-symbolic Selection=s Terminal=false Extensions=any; Right-click menu:","title":"Nemo actions"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/","text":"Grep \u043f\u043e\u0438\u0441\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 grep [ options ] template [ file name... ] \u0418\u043b\u0438: some_command | grep [ options ] template \u041e\u043f\u0446\u0438\u0438 \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0430\u043c\u044b\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 grep : -b - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0431\u043b\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u0442\u0440\u043e\u043a\u043e\u0439; -c - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0448\u0430\u0431\u043b\u043e\u043d\u0430; -h - \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 Linux; -i - \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440; - l - \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0439\u0434\u0435\u043d \u0448\u0430\u0431\u043b\u043e\u043d; -n - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435; -s - \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445; -v - \u0438\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0438\u0441\u043a, \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u0440\u043e\u043c\u0435 \u0442\u0435\u0445, \u0447\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0448\u0430\u0431\u043b\u043e\u043d; -w - \u0438\u0441\u043a\u0430\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d \u043a\u0430\u043a \u0441\u043b\u043e\u0432\u043e, \u043e\u043a\u0440\u0443\u0436\u0451\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438; -e - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435; -An - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 n \u0441\u0442\u0440\u043e\u043a \u0434\u043e \u043d\u0435\u0433\u043e; -Bn - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0433\u043e; -Cn - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c n \u0441\u0442\u0440\u043e\u043a \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f; \u041f\u043e\u0438\u0441\u043a \u0442\u0435\u043a\u0441\u0442\u0430 grep User /etc/passwd Output: User:x:1000:1000:User,,,:/home/User:/bin/bash \u0412\u044b\u0432\u043e\u0434 \u043d\u0435\u0441\u043a\u043e\u0440\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a C\u0442\u0440\u043e\u043a\u0430 \u0438 4 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0451 grep -A4 \"EE\" /var/log/xorg.0.log C\u0442\u0440\u043e\u043a\u0430 \u0438 4 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e \u043d\u0435\u0451 grep -B4 \"EE\" /var/log/xorg.0.log \u041f\u043e \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0432\u0435\u0440\u0445\u0443 \u0438 \u0441\u043d\u0438\u0437\u0443 \u043e\u0442 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f grep -C2 \"EE\" /var/log/xorg.0.log \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f grep - \u043e\u0447\u0435\u043d\u044c \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0432 \u0440\u0430\u0437\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. \u0414\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u043f\u0446\u0438\u044e -e . \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432: \u041f\u043e\u0438\u0441\u043a \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u0430 \"^\", \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0437\u0430 \u043d\u043e\u044f\u0431\u0440\u044c: grep \"^Nov 10\" messages.1 Nov 10 01 :12:55 gs123 ntpd [ 2241 ] : time reset +0.177479 s Nov 10 01 :17:17 gs123 ntpd [ 2241 ] : synchronized to LOCAL ( 0 ) , stratum 10 \u041f\u043e\u0438\u0441\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 - \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b \"$\": grep \"terminating. $ \" messages Jul 12 17 :01:09 cloneme kernel: Kernel log daemon terminating. Oct 28 06 :29:54 cloneme kernel: Kernel log daemon terminating. \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0446\u0438\u0444\u0440\u044b: grep \"[0-9]\" /var/log/Xorg.0.log \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 grep grep -rnw '/base/dir' -e 'word' \u041f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432 \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043a\u0430\u0442\u044c \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e, \u0430 \u0434\u0432\u0430 \u0441\u0440\u0430\u0437\u0443: grep -w 'word1|word2' /path/to/file ` \u0418\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u041a\u043e\u043c\u0430\u043d\u0434\u0430 grep Linux \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043b\u043e\u0432\u043e \u043f\u0430\u0440: grep -v \u043f\u0430\u0440 /path/to/file \u0412\u044b\u0432\u043e\u0434 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c grep \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0446\u0438\u0438 -l . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0432\u0441\u0435 \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 primary: grep -l 'primary' *.c \u0426\u0432\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u0432\u043e\u0434 \u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0432\u044b\u0432\u043e\u0434\u0435: grep --color root /etc/passwd Source","title":"Grep \u043f\u043e\u0438\u0441\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_1","text":"grep [ options ] template [ file name... ] \u0418\u043b\u0438: some_command | grep [ options ] template","title":"\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_2","text":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0430\u043c\u044b\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u0438\u0441\u043a \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445 grep : -b - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0431\u043b\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u0442\u0440\u043e\u043a\u043e\u0439; -c - \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u0448\u0430\u0431\u043b\u043e\u043d\u0430; -h - \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 Linux; -i - \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440; - l - \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0439\u0434\u0435\u043d \u0448\u0430\u0431\u043b\u043e\u043d; -n - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435; -s - \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445; -v - \u0438\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0438\u0441\u043a, \u0432\u044b\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u0440\u043e\u043c\u0435 \u0442\u0435\u0445, \u0447\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0448\u0430\u0431\u043b\u043e\u043d; -w - \u0438\u0441\u043a\u0430\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d \u043a\u0430\u043a \u0441\u043b\u043e\u0432\u043e, \u043e\u043a\u0440\u0443\u0436\u0451\u043d\u043d\u043e\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438; -e - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435; -An - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 n \u0441\u0442\u0440\u043e\u043a \u0434\u043e \u043d\u0435\u0433\u043e; -Bn - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 n \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0433\u043e; -Cn - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c n \u0441\u0442\u0440\u043e\u043a \u0434\u043e \u0438 \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f;","title":"\u041e\u043f\u0446\u0438\u0438"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_3","text":"grep User /etc/passwd Output: User:x:1000:1000:User,,,:/home/User:/bin/bash","title":"\u041f\u043e\u0438\u0441\u043a \u0442\u0435\u043a\u0441\u0442\u0430"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_4","text":"","title":"\u0412\u044b\u0432\u043e\u0434 \u043d\u0435\u0441\u043a\u043e\u0440\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#c-4","text":"grep -A4 \"EE\" /var/log/xorg.0.log","title":"C\u0442\u0440\u043e\u043a\u0430 \u0438 4 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043d\u0435\u0451"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#c-4_1","text":"grep -B4 \"EE\" /var/log/xorg.0.log","title":"C\u0442\u0440\u043e\u043a\u0430 \u0438 4 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e \u043d\u0435\u0451"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_5","text":"grep -C2 \"EE\" /var/log/xorg.0.log","title":"\u041f\u043e \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0432\u0435\u0440\u0445\u0443 \u0438 \u0441\u043d\u0438\u0437\u0443 \u043e\u0442 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_6","text":"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f grep - \u043e\u0447\u0435\u043d\u044c \u043c\u043e\u0449\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0432 \u0440\u0430\u0437\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0438\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0444\u0430\u0439\u043b\u0430\u0445. \u0414\u043b\u044f \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u0436\u0438\u043c\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043e\u043f\u0446\u0438\u044e -e . \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432: \u041f\u043e\u0438\u0441\u043a \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b\u0430 \"^\", \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0437\u0430 \u043d\u043e\u044f\u0431\u0440\u044c: grep \"^Nov 10\" messages.1 Nov 10 01 :12:55 gs123 ntpd [ 2241 ] : time reset +0.177479 s Nov 10 01 :17:17 gs123 ntpd [ 2241 ] : synchronized to LOCAL ( 0 ) , stratum 10 \u041f\u043e\u0438\u0441\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 - \u0441\u043f\u0435\u0446\u0441\u0438\u043c\u0432\u043e\u043b \"$\": grep \"terminating. $ \" messages Jul 12 17 :01:09 cloneme kernel: Kernel log daemon terminating. Oct 28 06 :29:54 cloneme kernel: Kernel log daemon terminating. \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0446\u0438\u0444\u0440\u044b: grep \"[0-9]\" /var/log/Xorg.0.log","title":"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#grep","text":"grep -rnw '/base/dir' -e 'word'","title":"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 grep"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_7","text":"\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043a\u0430\u0442\u044c \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0430 \u043d\u0435 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e, \u0430 \u0434\u0432\u0430 \u0441\u0440\u0430\u0437\u0443: grep -w 'word1|word2' /path/to/file `","title":"\u041f\u043e\u0438\u0441\u043a \u0434\u0432\u0443\u0445 \u0441\u043b\u043e\u0432"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_8","text":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 grep Linux \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043b\u043e\u0432\u043e \u043f\u0430\u0440: grep -v \u043f\u0430\u0440 /path/to/file","title":"\u0418\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_9","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c grep \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u044b\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u043f\u0446\u0438\u0438 -l . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u0432\u0441\u0435 \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u0440\u0438 \u043f\u043e\u0438\u0441\u043a\u0435 \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u043e \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 primary: grep -l 'primary' *.c","title":"\u0412\u044b\u0432\u043e\u0434 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430"},{"location":"linux/how-to/Grep%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_10","text":"\u0422\u0430\u043a\u0436\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432 \u0432\u044b\u0432\u043e\u0434\u0435: grep --color root /etc/passwd Source","title":"\u0426\u0432\u0435\u0442\u043d\u043e\u0439 \u0432\u044b\u0432\u043e\u0434"},{"location":"linux/how-to/Joplin%20Terminal/","text":"Joplin Terminal Install: Operating system Method macOS, Linux, or Windows (via WSL ) Important: First, install Node 12+ . NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin By default, the application binary will be installed under ~/.joplin-bin . You may change this directory if needed. Alternatively, if your npm permissions are setup as described here (Option 2) then simply running npm -g install joplin would work. To start it, type joplin . Export notes: joplin --profile ~/.config/joplin-desktop export ~/dest_folder --format md --notebook notes","title":"Joplin Terminal"},{"location":"linux/how-to/Joplin%20Terminal/#install","text":"Operating system Method macOS, Linux, or Windows (via WSL ) Important: First, install Node 12+ . NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin By default, the application binary will be installed under ~/.joplin-bin . You may change this directory if needed. Alternatively, if your npm permissions are setup as described here (Option 2) then simply running npm -g install joplin would work. To start it, type joplin .","title":"Install:"},{"location":"linux/how-to/Joplin%20Terminal/#export-notes","text":"joplin --profile ~/.config/joplin-desktop export ~/dest_folder --format md --notebook notes","title":"Export notes:"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/","text":"KeePassXC with synchronization Setting up KeePassXC on Linux (with Cloud Synchronization) Stay open-source, trust no one. Master Password The most important thing about using a password manager is to choose a ( really, really ) strong master password. If you\u2019re not genuinely impressed with yourself when you type it in, it\u2019s not strong enough. The point of switching to a password manager is to have all of your most sensitive credentials in one impregnable place; your bank account, credit cards, mail, social media \u2014 whether it\u2019s your assets or your reputation, the dearest information you have is most probably accessible through the internet, ergo your passwords for this information should be as un-hackable as possible. xkcd knows. In my opinion the best approach in this case, and in many other cases, is to combine: choose four random words that are easy for you to remember, but combine uppercase, lowercase, and special characters as well. E.g. \u201ccorrect horse battery staple\u201d isn\u2019t much harder to remember than \u201cC0rrEct(hOrse)b@TTery+$7ap13|\u201d once you\u2019ve practiced typing it a couple of times, but the increase in entropy is substantial. It will take you longer to type, but I\u2019d argue the extra minute a day (at most!) is a fair price for securing all of your passwords. Let your muscle memory do the heavy lifting and you\u2019ll be surprised at how easily it comes to you after a few times. Just to be on the safe side, copy your master password to a physical note and put it in a completely secure place that no one with access to your computer could ever possibly know of. Key File Go to Database \u2192 Database settings\u2026 \u2192 Security . Under the Password section at the top you should see a Key File section. Database \u2192 Database settings\u2026 \u2192 Security This allows setting or creating a binary file that is used together with or instead of a master password. It is recommended to let the application generate a key file for you, and to copy it to three USB sticks. One you will carry with you, the other two you will keep as backup (in separate locations from the physical backup for your master password!). Having a key file means that even if someone somehow gains access to your password, you have a second form of authentication that prevents them from being able to use it. Again, you pay with convenience, but profit immensely in security. Simply get in the habit of throwing that USB stick in your pocket or backpack when you leave the house to any place where you might need access to your passwords. This should really be limited to perhaps one or two computers you work on. We\u2019ll talk about your mobile phone in a second. Decryption Time In the same Database settings\u2026 \u2192 Security menu, note the second tab titled Encryption Settings . The first field in this tab is labeled Decryption Time and should have a Change button opposite of it. Press the button and validate your decryption time setting is set to at least 1 second. Feel free to give it a couple of extra deciseconds (hundreds of milliseconds) while you\u2019re at it. The difference will be effectively indistinguishable, but the result will be a significant increase in the number of iterations used when encrypting your data, making it much harder to decrypt. These are the basics. You can also set a default username for new entries ( Database \u2192 Database settings\u2026 \u2192 General ), which I like to have as my e-mail address, change the time interval for clearing the clipboard after copying passwords ( Tools \u2192 Settings \u2192 Security ), decide to show a system tray icon ( Tools \u2192 Settings \u2192 General ), and much, much more. Explore and make it your own! First, you probably want to have your passwords available on your mobile phone. I use Keepass2Android and am very satisfied. Keepass2Android allows you to set the location of the database file from various cloud services (including Google Drive, Dropbox, OneDrive, ownCloud, NextCloud, and more). However, KeePassXC does not. As stated in the KeePassXC website : _Why is there no cloud synchronization feature built into KeePassXC? _Cloud synchronization with Dropbox, Google Drive, OneDrive, ownCloud, Nextcloud etc. can be easily accomplished by simply storing your KeePassXC database inside your shared cloud folder and letting your desktop synchronization client do the rest. We prefer this approach, because it is simple, not tied to a specific cloud provider and keeps the complexity of our code low. Now it really depends on what cloud service you are using. Dropbox provides a Linux client, and so do ownCloud and NextCloud , but Google Drive and OneDrive don\u2019t offer a particularly straightforward solution for Linux users. Also, you may not want or be able to install your cloud provider\u2019s client in all the computers you need to have access to your passwords from. EDIT : if you\u2019re using GNOME there actually is a simple method to mount both Google Drive and OneDrive, more information here . Thanks to KeePassXC on twitter, for pointing this out. This could pose a potential problem, but fret not \u2014 Rclone has got you covered. Rclone According to Rclone\u2019s GitHub project \u2019s README: Rclone (\u201crsync for cloud storage\u201d) is a command line program to sync files and directories to and from different cloud storage providers. If you\u2019ve clicked on either of two previous links and reviewed the incredible list of supported cloud storage providers , you could almost certainly spot whichever cloud service you might be using as well as just about any other one you\u2019ve ever heard of (and a dozen you haven\u2019t). Most importantly, the list includes any one of the services supported by Keepass2Android. Installation is as simple as running: curl https://rclone.org/install.sh | sudo bash . To verify everything went smoothly you can execute rclone --version (or -V ) and see that you get the expected output. Use the instructions on Rclone\u2019s homepage to set up a connection to your preferred cloud storage provider by following the link next to its name. This process is usually quite effortless and mostly entails running rclone config , selecting whichever provider you\u2019re using, choosing a name for the created remote location, and accepting some defaults. To validate your configuration, execute: rclone lsd _name_: , where name represents the name you chose for the remote (cloud) location. This will list all top-level directories within that location. Generally speaking, remote paths in Rclone are specified as _name_:remote/path (which is why _name_: points to the root directory). Automation Now that you have established a connection with your cloud storage provider, you need a script to automate the task of checking for updates and importing (if the remote version is newer) or exporting (if the local version is newer). I am not much of a bash scriptwriter, but I\u2019ve come up with something relatively simple that seems to work: Bash script to automate database file synchronization All you have to do is download the file (you can also click the \u201cview raw\u201d button and copy directly to a file on your computer) and change the values of the four variables under the \u201cConfiguration\u201d title ( DRIVE_NAME , DB_FILE_NAME , LOCAL_LOCATION , and REMOTE_LOCATION ) according to your setup. I like to keep such bash scripts under ~/Scripts ( ~ in the terminal is an alias to the home directory). Don\u2019t forget to give the file execution permissions: chmod +x ~/Scripts/sync-passwords.sh Alternatively, you can simply run: cd; mkdir -p Scripts; wget https://gist.githubusercontent.com/ZviBaratz/a4a51544c3d876543d37abfd0c6ee2a3/raw/1b739673cfe168a7c0797bc04e1ab90269c82281/sync-passwords.sh -P Scripts; chmod +x Scripts/sync-passwords.sh This will change directory to the user home\u2019s directory, create the \u2018Scripts\u2019 directory if it doesn\u2019t exist under it, download the GitHub gist, and change its permissions to make it executable. However, don\u2019t forget you still have to change the variables at the beginning of the script to match the name and location of your database file and the name of the cloud storage provider. Make sure it\u2019s working by running it: ~/Scripts/sync-passwords.sh Assuming you don\u2019t yet have a remote copy of the database file, you should see something like: In following runs the output will look like: Finally, you may want to create a cron job to automate the execution of this script, so that you don\u2019t have to remember running it every time you make a small change. To create a job that runs the synchronization script every 20 minutes, you can run: (crontab -l; echo \"*/20 * * * * $HOME/Scripts/sync-passwords.sh\") | crontab - If you would like to create a different synchronization schedule you can use crontab.guru or learn more about cron scheduling . If you already created this job and would like to edit it you can do so using crontab -e . Key File Don\u2019t forget about the key file! Connect your mobile phone to your desktop with a USB cable and copy the key file to your local storage. Open Keepass2Android and under \u201cselect master key type:\u201d choose \u201cPassword + Key File\u201d . Browse to select your key file from the phone\u2019s local storage. Once you\u2019ve unlocked your database successfully, click on the options button (should appear as three vertical dots in the top right corner) \u2192 Settings \u2192 Database, and select \u201cImport database to internal folder\u201d. Having completed that, delete the original version of the key file on the device so that it is not accessible to any other application. Source","title":"KeePassXC with synchronization"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#setting-up-keepassxc-on-linux-with-cloud-synchronization","text":"Stay open-source, trust no one.","title":"Setting up KeePassXC on Linux (with Cloud Synchronization)"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#master-password","text":"The most important thing about using a password manager is to choose a ( really, really ) strong master password. If you\u2019re not genuinely impressed with yourself when you type it in, it\u2019s not strong enough. The point of switching to a password manager is to have all of your most sensitive credentials in one impregnable place; your bank account, credit cards, mail, social media \u2014 whether it\u2019s your assets or your reputation, the dearest information you have is most probably accessible through the internet, ergo your passwords for this information should be as un-hackable as possible. xkcd knows. In my opinion the best approach in this case, and in many other cases, is to combine: choose four random words that are easy for you to remember, but combine uppercase, lowercase, and special characters as well. E.g. \u201ccorrect horse battery staple\u201d isn\u2019t much harder to remember than \u201cC0rrEct(hOrse)b@TTery+$7ap13|\u201d once you\u2019ve practiced typing it a couple of times, but the increase in entropy is substantial. It will take you longer to type, but I\u2019d argue the extra minute a day (at most!) is a fair price for securing all of your passwords. Let your muscle memory do the heavy lifting and you\u2019ll be surprised at how easily it comes to you after a few times. Just to be on the safe side, copy your master password to a physical note and put it in a completely secure place that no one with access to your computer could ever possibly know of.","title":"Master Password"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#key-file","text":"Go to Database \u2192 Database settings\u2026 \u2192 Security . Under the Password section at the top you should see a Key File section. Database \u2192 Database settings\u2026 \u2192 Security This allows setting or creating a binary file that is used together with or instead of a master password. It is recommended to let the application generate a key file for you, and to copy it to three USB sticks. One you will carry with you, the other two you will keep as backup (in separate locations from the physical backup for your master password!). Having a key file means that even if someone somehow gains access to your password, you have a second form of authentication that prevents them from being able to use it. Again, you pay with convenience, but profit immensely in security. Simply get in the habit of throwing that USB stick in your pocket or backpack when you leave the house to any place where you might need access to your passwords. This should really be limited to perhaps one or two computers you work on. We\u2019ll talk about your mobile phone in a second.","title":"Key File"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#decryption-time","text":"In the same Database settings\u2026 \u2192 Security menu, note the second tab titled Encryption Settings . The first field in this tab is labeled Decryption Time and should have a Change button opposite of it. Press the button and validate your decryption time setting is set to at least 1 second. Feel free to give it a couple of extra deciseconds (hundreds of milliseconds) while you\u2019re at it. The difference will be effectively indistinguishable, but the result will be a significant increase in the number of iterations used when encrypting your data, making it much harder to decrypt. These are the basics. You can also set a default username for new entries ( Database \u2192 Database settings\u2026 \u2192 General ), which I like to have as my e-mail address, change the time interval for clearing the clipboard after copying passwords ( Tools \u2192 Settings \u2192 Security ), decide to show a system tray icon ( Tools \u2192 Settings \u2192 General ), and much, much more. Explore and make it your own! First, you probably want to have your passwords available on your mobile phone. I use Keepass2Android and am very satisfied. Keepass2Android allows you to set the location of the database file from various cloud services (including Google Drive, Dropbox, OneDrive, ownCloud, NextCloud, and more). However, KeePassXC does not. As stated in the KeePassXC website : _Why is there no cloud synchronization feature built into KeePassXC? _Cloud synchronization with Dropbox, Google Drive, OneDrive, ownCloud, Nextcloud etc. can be easily accomplished by simply storing your KeePassXC database inside your shared cloud folder and letting your desktop synchronization client do the rest. We prefer this approach, because it is simple, not tied to a specific cloud provider and keeps the complexity of our code low. Now it really depends on what cloud service you are using. Dropbox provides a Linux client, and so do ownCloud and NextCloud , but Google Drive and OneDrive don\u2019t offer a particularly straightforward solution for Linux users. Also, you may not want or be able to install your cloud provider\u2019s client in all the computers you need to have access to your passwords from. EDIT : if you\u2019re using GNOME there actually is a simple method to mount both Google Drive and OneDrive, more information here . Thanks to KeePassXC on twitter, for pointing this out. This could pose a potential problem, but fret not \u2014 Rclone has got you covered.","title":"Decryption Time"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#rclone","text":"According to Rclone\u2019s GitHub project \u2019s README: Rclone (\u201crsync for cloud storage\u201d) is a command line program to sync files and directories to and from different cloud storage providers. If you\u2019ve clicked on either of two previous links and reviewed the incredible list of supported cloud storage providers , you could almost certainly spot whichever cloud service you might be using as well as just about any other one you\u2019ve ever heard of (and a dozen you haven\u2019t). Most importantly, the list includes any one of the services supported by Keepass2Android. Installation is as simple as running: curl https://rclone.org/install.sh | sudo bash . To verify everything went smoothly you can execute rclone --version (or -V ) and see that you get the expected output. Use the instructions on Rclone\u2019s homepage to set up a connection to your preferred cloud storage provider by following the link next to its name. This process is usually quite effortless and mostly entails running rclone config , selecting whichever provider you\u2019re using, choosing a name for the created remote location, and accepting some defaults. To validate your configuration, execute: rclone lsd _name_: , where name represents the name you chose for the remote (cloud) location. This will list all top-level directories within that location. Generally speaking, remote paths in Rclone are specified as _name_:remote/path (which is why _name_: points to the root directory).","title":"Rclone"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#automation","text":"Now that you have established a connection with your cloud storage provider, you need a script to automate the task of checking for updates and importing (if the remote version is newer) or exporting (if the local version is newer). I am not much of a bash scriptwriter, but I\u2019ve come up with something relatively simple that seems to work: Bash script to automate database file synchronization All you have to do is download the file (you can also click the \u201cview raw\u201d button and copy directly to a file on your computer) and change the values of the four variables under the \u201cConfiguration\u201d title ( DRIVE_NAME , DB_FILE_NAME , LOCAL_LOCATION , and REMOTE_LOCATION ) according to your setup. I like to keep such bash scripts under ~/Scripts ( ~ in the terminal is an alias to the home directory). Don\u2019t forget to give the file execution permissions: chmod +x ~/Scripts/sync-passwords.sh Alternatively, you can simply run: cd; mkdir -p Scripts; wget https://gist.githubusercontent.com/ZviBaratz/a4a51544c3d876543d37abfd0c6ee2a3/raw/1b739673cfe168a7c0797bc04e1ab90269c82281/sync-passwords.sh -P Scripts; chmod +x Scripts/sync-passwords.sh This will change directory to the user home\u2019s directory, create the \u2018Scripts\u2019 directory if it doesn\u2019t exist under it, download the GitHub gist, and change its permissions to make it executable. However, don\u2019t forget you still have to change the variables at the beginning of the script to match the name and location of your database file and the name of the cloud storage provider. Make sure it\u2019s working by running it: ~/Scripts/sync-passwords.sh Assuming you don\u2019t yet have a remote copy of the database file, you should see something like: In following runs the output will look like: Finally, you may want to create a cron job to automate the execution of this script, so that you don\u2019t have to remember running it every time you make a small change. To create a job that runs the synchronization script every 20 minutes, you can run: (crontab -l; echo \"*/20 * * * * $HOME/Scripts/sync-passwords.sh\") | crontab - If you would like to create a different synchronization schedule you can use crontab.guru or learn more about cron scheduling . If you already created this job and would like to edit it you can do so using crontab -e .","title":"Automation"},{"location":"linux/how-to/KeePassXC%20with%20synchronization/#key-file_1","text":"Don\u2019t forget about the key file! Connect your mobile phone to your desktop with a USB cable and copy the key file to your local storage. Open Keepass2Android and under \u201cselect master key type:\u201d choose \u201cPassword + Key File\u201d . Browse to select your key file from the phone\u2019s local storage. Once you\u2019ve unlocked your database successfully, click on the options button (should appear as three vertical dots in the top right corner) \u2192 Settings \u2192 Database, and select \u201cImport database to internal folder\u201d. Having completed that, delete the original version of the key file on the device so that it is not accessible to any other application. Source","title":"Key File"},{"location":"linux/how-to/Kill%20process%20by%20used%20port%20Ubuntu/","text":"Kill process by used port Ubuntu Using fuser The best way to kill a port is fuser -k 8080 /tcp Using kill Find what application/process is using the port: sudo netstat -lpn | grep :8080 You will get an output similar to this one tcp6 0 0 :::8080 :::* LISTEN 21994/java You got the process Id, which is 21994 , now this is the process that is using port 8080 Kill the process kill 21994","title":"Kill process by used port Ubuntu"},{"location":"linux/how-to/Kill%20process%20by%20used%20port%20Ubuntu/#using-fuser","text":"The best way to kill a port is fuser -k 8080 /tcp","title":"Using fuser"},{"location":"linux/how-to/Kill%20process%20by%20used%20port%20Ubuntu/#using-kill","text":"Find what application/process is using the port: sudo netstat -lpn | grep :8080 You will get an output similar to this one tcp6 0 0 :::8080 :::* LISTEN 21994/java You got the process Id, which is 21994 , now this is the process that is using port 8080 Kill the process kill 21994","title":"Using kill"},{"location":"linux/how-to/Mouse%20Buttons%20Bind%20To%20Keyboard%20Keys%20Or%20Commands/","text":"Mouse Buttons Bind To Keyboard Keys Or Commands If you have a mouse with extra buttons, you can bind those buttons to perform a key combination, run a program, command or script. This will only work if you use X11 (it does not work on Wayland) because the tools we'll use for this only support X11. To bind the mouse buttons to key combinations we'll use the following tools: xbindkeys : a program that grab keys and mouse button events in X and starts associated shell command xev : a tool that prints contents of X events xdotool : command-line X11 automation tool that lets you programmatically (or manually) simulate keyboard input and mouse activity (and more) In case you don't need to bind mouse buttons to keyboard keys, and all you want to bind to the mouse buttons are programs, commands or scripts, you can skip the installation of xdotool. 1. Install xbindkeys, xev and xdotool. Debian, Ubuntu, Linux Mint, Pop!_OS, Elementary OS and other Debian or Ubuntu based Linux distributions: sudo apt install xbindkeys x11-utils xdotool Fedora: sudo dnf install xbindkeys xorg-x11-utils xdotool openSUSE: sudo zypper install xbindkeys xev xdotool Arch Linux or Manjaro: sudo pacman -S xbindkeys xorg-xev xdotool On other Linux distributions you'll have to search in the repositories for xdotool , xev and xbindkeys and install them. 2. Grab the mouse button codes. To get the mouse button code(s), run this command: xev | grep button Next, focus the small window that pops up and watch the terminal output. Now press the mouse button for which you want to grab the code. After pressing the button you should see its code in the terminal where you ran xev, e.g.: $ xev | grep button state 0x10, button 8, same_screen YES In this example, the button code we'll need later is 8 . 3. Grab the keystrokes that we'll later send using a mouse button (skip if you want to bind a command / script / program to a mouse button) Open a terminal and run this command (via AskUbuntu ): xev | sed -ne '/^KeyPress/,/^$/p' Once again, a small window will pop up that you need to focus. Next, press the keys on your keyboard that you want to remap to your mouse, each at a time, and watch the xev command output in the terminal. For example if you want to bind Ctrl + Alt + Up to a mouse button, press Ctrl , then Alt and finally Up . In my case, this is the output of xev for these 3 key presses (the first one is for Control_L or left Control key, the second for Alt_L or left Alt, and the third is for Up : KeyPress event, serial 33, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6741696, (46,-37), root:(728,598), state 0x10, keycode 37 (keysym 0xffe3, Control_L), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False KeyPress event, serial 36, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6743289, (46,-37), root:(728,598), state 0x10, keycode 64 (keysym 0xffe9, Alt_L), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False KeyPress event, serial 36, synthetic NO, window 0x2200001, root 0x1eb, subw 0x0, time 6744780, (46,-37), root:(728,598), state 0x10, keycode 111 (keysym 0xff52, Up), same_screen YES, XLookupString gives 0 bytes: XmbLookupString gives 0 bytes: XFilterEvent returns: False Note down the keycode, keysim or name of the key. You can use any of the 3, e.g. for the first key above you can use either 37 , 0xffe3 , or Control_L . In this article I'll use the key name (e.g. Control_L for left control key) since they are easier to read. It's worth noting that xbindkeys can be used grab the keycodes too ( xbindkeys -k ), but it reads all active keys so it can be confusing in some cases, e.g. if you have Caps_Lock or Num_Lock on, etc., so I personally prefer to use xev for this task. Neither xed nor xbindkeys -k will show the keycodes / keyboard symbols for multimedia keys. In case you want to remap multimedia keys to mouse buttons, you can get a list of such keyboard symbols by visiting this link . Mouse-related article: How To Disable Mouse Acceleration In Ubuntu 18.04 Or 19.10 (Gnome) . 4. Create the xbindkeys configuration (in ~/.xbindkeysrc ). You may either create an empty ~/.xbindkeysrc file, or generate a sample configuration file using this command: xbindkeys -d > ~/.xbindkeysrc Next, open ~/.xbindkeysrc with your favorite text editor. Note that .xbindkeysrc is a hidden file in your home directory so you'll need to press Ctrl + h (to show hidden files and folders) to see it in your file manager. To bind a mouse button to a key combination , paste the following at the end of the ~/.xbindkeysrc file (it may already contain some key binds, it may contain the sample configuration or it can be empty - it doesn't matter): \"xdotool key 'KEY-COMBINATION'\" b:MOUSE-BUTTON-CODE Where: KEY-COMBINATION are the keystrokes you got under step 3 (separate the keys with a + sign) MOUSE-BUTTON-CODE is the mouse button code that you got under step 2 Example: \"xdotool key 'Control_L+Alt_L+Down'\" b:8 This remaps the mouse button 8 (which for my mouse is the button that can be used as a back button in a web browser for example) to Control_L+Alt_L+Down which in GNOME Shell is used to switch to workspace down. To also remap the mouse forward button (mouse button 9 in my case) to Control_L+Alt_L+Up (switch to workspace up in GNOME Shell), I'd have to add this to the ~/.xbindkeysrc file: \"xdotool key 'Control_L+Alt_L+Up'\" b:9 Another example. To bind the keyboard media keys for raising and lowering the volume to mouse buttons 8 and 9: \"xdotool key 'XF86AudioRaiseVolume'\" b:9 \"xdotool key 'XF86AudioLowerVolume'\" b:8 In the same way, add as many key binds as you wish, but make sure you're not using some already existing key combinations. To bind a command, script or program to a mouse button , use this in the ~/.xbindkeysrc file: \"COMMAND\" b:MOUSE-BUTTON-CODE Here: COMMAND is a command, script or program MOUSE-BUTTON-CODE is the mouse button code that you got under step 2 You may also like: Run Or Raise Application Windows On Linux (X11) Using A Single Keyboard Shortcut With jumpapp . Example for running a program using a mouse button: \"firefox\" b:8 This starts Firefox when pressing mouse button 9 (which for my mouse is the button that can be used as a back button in a web browser for example). 5. Start xbindkeys. Now you can start xbindkeys using a terminal and typing: xbindkeys In case xbindkeys was running, you can get it to use the new configuration by issuing: xbindkeys --poll-rc This command failed in a few cases for me when I changed the xbindkeys configuration, I'm not sure why. In such a case you can restart it by killing the xbindkeys process and running it again: killall xbindkeys xbindkeys On Ubuntu, xbindkeys is automatically started on system startup if it finds a non-empty (it needs to have lines that are not commented out) ~/.xbindkeysrc configuration file. If the tool doesn't automatically start for the Linux distribution you're using, add xbindkeys to your startup programs. Source","title":"Mouse Buttons Bind To Keyboard Keys Or Commands"},{"location":"linux/how-to/PDF%20create%20from%20images/","text":"PDF create from images Install ImageMagick sudo apt-get install imagemagick Convert Launch the Terminal in the desired directory with images and execute the following command: convert *.png outputfile.pdf In this case, the utility will convert all .png files to the output file outputfile.pdf. If you need to convert the files in the desired order, then rename them as follows: 01file.png 02file.png 03file.png If you need to convert a single file, for example file.png , then the command will be as follows: convert file.png outputfile.pdf If you need to convert graphic files of a different format, then simply change the file type in the command. For example: convert *.gif outputfile.pdf","title":"PDF create from images"},{"location":"linux/how-to/PDF%20create%20from%20images/#install-imagemagick","text":"sudo apt-get install imagemagick","title":"Install ImageMagick"},{"location":"linux/how-to/PDF%20create%20from%20images/#convert","text":"Launch the Terminal in the desired directory with images and execute the following command: convert *.png outputfile.pdf In this case, the utility will convert all .png files to the output file outputfile.pdf. If you need to convert the files in the desired order, then rename them as follows: 01file.png 02file.png 03file.png If you need to convert a single file, for example file.png , then the command will be as follows: convert file.png outputfile.pdf If you need to convert graphic files of a different format, then simply change the file type in the command. For example: convert *.gif outputfile.pdf","title":"Convert"},{"location":"linux/how-to/PDF%20file%20Compress/","text":"PDF file Compress \u0421\u043f\u043e\u0441\u043e\u0431 1 \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c Ghostscript \u0438 pdftk sudo apt-get install ghostscript pdftk \u0414\u0430\u043b\u0435\u0435 \u043a\u0438\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b pdf \u0432 \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043f\u0430\u043f\u043a\u0443,\u0434\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: for file in *.pdf ; do ps = \".ps\" ; pdf2ps $file \" $file + $ps \" ; done for file in *.ps ; do pdf = \".pdf\" ; pdf2ps $file \" $file + $pdf \" ; done \u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0436\u0430\u0442\u044b\u0435 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0444\u0430\u0439\u043b\u044b. \u0421\u043f\u043e\u0441\u043e\u0431 2 \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f ghostscript. \u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d: sudo apt-get install ghostscript \u0410 \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0436\u043c\u0435\u043c PDF: for file in *.pdf ; do pdf = \".pdf\" ; gs -sDEVICE = pdfwrite -dCompatibilityLevel = 1 .4 -dPDFSETTINGS = /ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile = \" $file$pdf \" $file done \u0418\u043b\u0438 \u043e\u0434\u043d\u0439 \u043a\u043e\u043c\u043c\u0430\u043d\u0434\u043e\u0439: gs -sDEVICE = pdfwrite -dCompatibilityLevel = 1 .4 -dPDFSETTINGS = /screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile = output.pdf input.pdf -dPDFSETTINGS settings: /screen selects low-resolution output similar to the Acrobat Distiller \u00abScreen Optimized\u00bb setting. /printer selects output similar to the Acrobat Distiller \u00abPrint Optimized\u00bb setting. /prepress selects output similar to Acrobat Distiller \u00abPrepress Optimized\u00bb setting. /default selects output intended to be useful across a wide variety of uses, possibly at the expense of a larger output file.","title":"PDF file Compress"},{"location":"linux/how-to/PDF%20file%20Compress/#1","text":"\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c Ghostscript \u0438 pdftk sudo apt-get install ghostscript pdftk \u0414\u0430\u043b\u0435\u0435 \u043a\u0438\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b pdf \u0432 \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043f\u0430\u043f\u043a\u0443,\u0434\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442: for file in *.pdf ; do ps = \".ps\" ; pdf2ps $file \" $file + $ps \" ; done for file in *.ps ; do pdf = \".pdf\" ; pdf2ps $file \" $file + $pdf \" ; done \u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0436\u0430\u0442\u044b\u0435 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0444\u0430\u0439\u043b\u044b.","title":"\u0421\u043f\u043e\u0441\u043e\u0431 1"},{"location":"linux/how-to/PDF%20file%20Compress/#2","text":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f ghostscript. \u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d: sudo apt-get install ghostscript \u0410 \u0437\u0430\u0442\u0435\u043c \u0441\u043e\u0436\u043c\u0435\u043c PDF: for file in *.pdf ; do pdf = \".pdf\" ; gs -sDEVICE = pdfwrite -dCompatibilityLevel = 1 .4 -dPDFSETTINGS = /ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile = \" $file$pdf \" $file done \u0418\u043b\u0438 \u043e\u0434\u043d\u0439 \u043a\u043e\u043c\u043c\u0430\u043d\u0434\u043e\u0439: gs -sDEVICE = pdfwrite -dCompatibilityLevel = 1 .4 -dPDFSETTINGS = /screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile = output.pdf input.pdf -dPDFSETTINGS settings: /screen selects low-resolution output similar to the Acrobat Distiller \u00abScreen Optimized\u00bb setting. /printer selects output similar to the Acrobat Distiller \u00abPrint Optimized\u00bb setting. /prepress selects output similar to Acrobat Distiller \u00abPrepress Optimized\u00bb setting. /default selects output intended to be useful across a wide variety of uses, possibly at the expense of a larger output file.","title":"\u0421\u043f\u043e\u0441\u043e\u0431 2"},{"location":"linux/how-to/Port%20forwarding/","text":"Port forwarding Port forwarding using iptables Use iptables for redirects iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080 if you need to use localhost also add this iptables -t nat -I OUTPUT -p tcp -d 127 .0.0.1 --dport 80 -j REDIRECT --to-ports 8080","title":"Port forwarding"},{"location":"linux/how-to/Port%20forwarding/#port-forwarding-using-iptables","text":"Use iptables for redirects iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080 if you need to use localhost also add this iptables -t nat -I OUTPUT -p tcp -d 127 .0.0.1 --dport 80 -j REDIRECT --to-ports 8080","title":"Port forwarding using iptables"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/","text":"Send notifications with notify-send Simple Notification notify-send 'Title' 'Text of the message' Fig: Simple desktop notification Notification with an icon notify-send can be used to send notification with an icon using -i option notify-send -u critical -i \"firefox\" 'Title' 'Text of the message' Notification with custom icon You can use your own custom icon using the notify-send -i option as shown below. notify-send -i ~/test/java.png 'Hello World!!' Notification with output of command notify-send 'ls example' \"`ls /boot`\" Notification after command execution To notify only if the command execution succeeds, use &&. command && notify-send To notify after a command (or shell-script, or background job ) is completed, without worrying whether the commands succeeded or failed use ; . long job ; notify-send This method is extremely helpful when you are executing a long running shell-script in the background and you would like to be notified with a little nice non-intrusive pop-up when the job is completed. Urgency level You can specify an urgency level with -u or --urgency=LEVEL . Levels can be used: - low - normal - critical Expire time Set the timeout in milliseconds at which to expire the notification using -t or --expire-time=TIME Source 1 Source 2","title":"Send notifications with notify send"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#simple-notification","text":"notify-send 'Title' 'Text of the message' Fig: Simple desktop notification","title":"Simple Notification"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#notification-with-an-icon","text":"notify-send can be used to send notification with an icon using -i option notify-send -u critical -i \"firefox\" 'Title' 'Text of the message'","title":"Notification with an icon"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#notification-with-custom-icon","text":"You can use your own custom icon using the notify-send -i option as shown below. notify-send -i ~/test/java.png 'Hello World!!'","title":"Notification with custom icon"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#notification-with-output-of-command","text":"notify-send 'ls example' \"`ls /boot`\"","title":"Notification with output of command"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#notification-after-command-execution","text":"To notify only if the command execution succeeds, use &&. command && notify-send To notify after a command (or shell-script, or background job ) is completed, without worrying whether the commands succeeded or failed use ; . long job ; notify-send This method is extremely helpful when you are executing a long running shell-script in the background and you would like to be notified with a little nice non-intrusive pop-up when the job is completed.","title":"Notification after command execution"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#urgency-level","text":"You can specify an urgency level with -u or --urgency=LEVEL . Levels can be used: - low - normal - critical","title":"Urgency level"},{"location":"linux/how-to/Send%20notifications%20with%20notify-send/#expire-time","text":"Set the timeout in milliseconds at which to expire the notification using -t or --expire-time=TIME Source 1 Source 2","title":"Expire time"},{"location":"linux/how-to/Services%20in%20Systemd/","text":"Services in Systemd How to enable and disable services in Systemd init List of all services: systemctl To list all loaded services on your system (whether active; running, exited or failed, use the list-units subcommand and --type switch with a value of service. systemctl list-units --type = service OR systemctl --type = service To start a service in systemd run the command as shown: systemctl start service-name For example, to start apache web service, run systemctl start apache2 To verify that the service is running, run systemctl status apache2 Output \u25cf apache2.service - LSB: Apache2 web server Loaded: loaded (/etc/init.d/apache2; bad; vendor preset: enabled) Drop-In: /lib/systemd/system/apache2.service.d \u2514\u2500apache2-systemd.conf Active: active (running) since Thu 2018-03-15 17:09:05 UTC; 35s ago Docs: man:systemd-sysv-generator(8) CGroup: /system.slice/apache2.service \u251c\u25002499 /usr/sbin/apache2 -k start \u251c\u25002502 /usr/sbin/apache2 -k start \u2514\u25002503 /usr/sbin/apache2 -k start Mar 15 17:09:04 ip-172-31-41-251 systemd[1]: Starting LSB: Apache2 web server... Mar 15 17:09:04 ip-172-31-41-251 apache2[2475]: * Starting Apache httpd web ser Mar 15 17:09:05 ip-172-31-41-251 apache2[2475]: * Mar 15 17:09:05 ip-172-31-41-251 systemd[1]: Started LSB: Apache2 web server. To stop the service running service systemctl stop apache2 To confirm that the service is not running, run systemctl status apache2 Output \u25cf apache2.service - LSB: Apache2 web server Loaded: loaded (/etc/init.d/apache2; bad; vendor preset: enabled) Drop-In: /lib/systemd/system/apache2.service.d \u2514\u2500apache2-systemd.conf Active: inactive (dead) since Thu 2018-03-15 17:19:47 UTC; 12s ago Docs: man:systemd-sysv-generator(8) Process: 2822 ExecStop=/etc/init.d/apache2 stop (code=exited, status=0/SUCCESS Process: 2687 ExecStart=/etc/init.d/apache2 start (code=exited, status=0/SUCCE Mar 15 17:10:11 ip-172-31-41-251 systemd[1]: Starting LSB: Apache2 web server... Mar 15 17:10:11 ip-172-31-41-251 apache2[2687]: * Starting Apache httpd web ser Mar 15 17:10:12 ip-172-31-41-251 apache2[2687]: * Mar 15 17:10:12 ip-172-31-41-251 systemd[1]: Started LSB: Apache2 web server. Mar 15 17:19:46 ip-172-31-41-251 systemd[1]: Stopping LSB: Apache2 web server... Mar 15 17:19:46 ip-172-31-41-251 apache2[2822]: * Stopping Apache httpd web ser Mar 15 17:19:47 ip-172-31-41-251 apache2[2822]: * Mar 15 17:19:47 ip-172-31-41-251 systemd[1]: Stopped LSB: Apache2 web server. To enable apache2 service on boot up run systemctl enable apache2 To disable apache2 service on boot up run systemctl disable apache2 To restart the service systemctl restart apache2 To check whether the service is currently configured to start on the next boot up systemctl is-enabled apache2 Output Executing /lib/systemd/systemd-sysv-install is-enabled apache2 enabled To check whether the service is active systemctl is-active apache2 Output active How to remove Systemd services completely What if you installed a package, and later on decide that you don't need it anymore. How do you go about removing it completely? Follow the commands below. First, stop the service systemctl stop service-name Then disable the service systemctl disable service-name Removing the service in systemd rm /etc/systemd/system/service-name rm /etc/systemd/system/service-name/ [ related symlinks ] Reload systemd systemctl daemon-reload Finally run, systemctl reset-failed Source Source","title":"Services in Systemd"},{"location":"linux/how-to/Services%20in%20Systemd/#how-to-enable-and-disable-services-in-systemd-init","text":"List of all services: systemctl To list all loaded services on your system (whether active; running, exited or failed, use the list-units subcommand and --type switch with a value of service. systemctl list-units --type = service OR systemctl --type = service To start a service in systemd run the command as shown: systemctl start service-name For example, to start apache web service, run systemctl start apache2 To verify that the service is running, run systemctl status apache2 Output \u25cf apache2.service - LSB: Apache2 web server Loaded: loaded (/etc/init.d/apache2; bad; vendor preset: enabled) Drop-In: /lib/systemd/system/apache2.service.d \u2514\u2500apache2-systemd.conf Active: active (running) since Thu 2018-03-15 17:09:05 UTC; 35s ago Docs: man:systemd-sysv-generator(8) CGroup: /system.slice/apache2.service \u251c\u25002499 /usr/sbin/apache2 -k start \u251c\u25002502 /usr/sbin/apache2 -k start \u2514\u25002503 /usr/sbin/apache2 -k start Mar 15 17:09:04 ip-172-31-41-251 systemd[1]: Starting LSB: Apache2 web server... Mar 15 17:09:04 ip-172-31-41-251 apache2[2475]: * Starting Apache httpd web ser Mar 15 17:09:05 ip-172-31-41-251 apache2[2475]: * Mar 15 17:09:05 ip-172-31-41-251 systemd[1]: Started LSB: Apache2 web server. To stop the service running service systemctl stop apache2 To confirm that the service is not running, run systemctl status apache2 Output \u25cf apache2.service - LSB: Apache2 web server Loaded: loaded (/etc/init.d/apache2; bad; vendor preset: enabled) Drop-In: /lib/systemd/system/apache2.service.d \u2514\u2500apache2-systemd.conf Active: inactive (dead) since Thu 2018-03-15 17:19:47 UTC; 12s ago Docs: man:systemd-sysv-generator(8) Process: 2822 ExecStop=/etc/init.d/apache2 stop (code=exited, status=0/SUCCESS Process: 2687 ExecStart=/etc/init.d/apache2 start (code=exited, status=0/SUCCE Mar 15 17:10:11 ip-172-31-41-251 systemd[1]: Starting LSB: Apache2 web server... Mar 15 17:10:11 ip-172-31-41-251 apache2[2687]: * Starting Apache httpd web ser Mar 15 17:10:12 ip-172-31-41-251 apache2[2687]: * Mar 15 17:10:12 ip-172-31-41-251 systemd[1]: Started LSB: Apache2 web server. Mar 15 17:19:46 ip-172-31-41-251 systemd[1]: Stopping LSB: Apache2 web server... Mar 15 17:19:46 ip-172-31-41-251 apache2[2822]: * Stopping Apache httpd web ser Mar 15 17:19:47 ip-172-31-41-251 apache2[2822]: * Mar 15 17:19:47 ip-172-31-41-251 systemd[1]: Stopped LSB: Apache2 web server. To enable apache2 service on boot up run systemctl enable apache2 To disable apache2 service on boot up run systemctl disable apache2 To restart the service systemctl restart apache2 To check whether the service is currently configured to start on the next boot up systemctl is-enabled apache2 Output Executing /lib/systemd/systemd-sysv-install is-enabled apache2 enabled To check whether the service is active systemctl is-active apache2 Output active","title":"How to enable and disable services in\u00a0\u00a0Systemd init"},{"location":"linux/how-to/Services%20in%20Systemd/#how-to-remove-systemd-services-completely","text":"What if you installed a package, and later on decide that you don't need it anymore. How do you go about removing it completely? Follow the commands below. First, stop the service systemctl stop service-name Then disable the service systemctl disable service-name Removing the service in systemd rm /etc/systemd/system/service-name rm /etc/systemd/system/service-name/ [ related symlinks ] Reload systemd systemctl daemon-reload Finally run, systemctl reset-failed Source Source","title":"How to remove\u00a0Systemd services completely"},{"location":"linux/how-to/sha256%20check/","text":"sha256 check A shortcut script that helps verify sha256 sums faster The script is based on sha256sum utility and allows to compare SHA 256 sums without downloading a file with the sum. How to install Option 1 : Download the sha256 script and add it to your PATH variable. Option 2 : Add the following function to your .bashrc or .zshrc file: shell script sha256() { echo \"$1 $2\" | sha256sum --check } Make sure you have sha256sum utility installed. How to use You can compare SHA 256 sums in the following way: shell script sha256 <expected-sha-256-sum> <name-of-the-file> ## Examples ```shell script sha256 94f874037b82ea5353f4061e543681a0e79657f787437974214629af8407d124 go1.13.1.linux-amd64.tar.gz The output if the sums match: shell script go1.13.1.linux-amd64.tar.gz: OK The output if the sums do not match: ```shell script go1.13.1.linux-amd64.tar.gz: FAILED Source","title":"Sha256 check"},{"location":"linux/how-to/sha256%20check/#a-shortcut-script-that-helps-verify-sha256-sums-faster","text":"The script is based on sha256sum utility and allows to compare SHA 256 sums without downloading a file with the sum.","title":"A shortcut script that helps verify sha256 sums faster"},{"location":"linux/how-to/sha256%20check/#how-to-install","text":"Option 1 : Download the sha256 script and add it to your PATH variable. Option 2 : Add the following function to your .bashrc or .zshrc file: shell script sha256() { echo \"$1 $2\" | sha256sum --check } Make sure you have sha256sum utility installed.","title":"How to install"},{"location":"linux/how-to/sha256%20check/#how-to-use","text":"You can compare SHA 256 sums in the following way: shell script sha256 <expected-sha-256-sum> <name-of-the-file> ## Examples ```shell script sha256 94f874037b82ea5353f4061e543681a0e79657f787437974214629af8407d124 go1.13.1.linux-amd64.tar.gz The output if the sums match: shell script go1.13.1.linux-amd64.tar.gz: OK The output if the sums do not match: ```shell script go1.13.1.linux-amd64.tar.gz: FAILED Source","title":"How to use"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/","text":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430 \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430 \u0415\u0441\u043b\u0438 \u0412\u044b \u0443\u0441\u0442\u0430\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u0422\u0430\u043a \u0443\u0436 \u043f\u043e\u0432\u0435\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Ubuntu \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0437\u044b\u0432\u0430\u044f \u0435\u0433\u043e \"\u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\". \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b (\u043a\u0440\u043e\u043c\u0435 \u0444\u043b\u044d\u0448\u0435\u043a \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432) \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0430\u0441 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0441\u043a\u043b\u0430\u0434 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u0442\u043e\u0440\u043e\u043c\u0443 (\u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u043c\u0443...) \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u041e\u0421. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0439 UUID ( Universally Unique Identifier ), \u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0433\u043e. \u0428\u0430\u0433 1. \u0423\u0437\u043d\u0430\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 sudo blkid \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u043e\u0435: /dev/sda1: UUID=\"b2098d42-3e3d-470c-8ddb-76f74f0f6d44\" TYPE=\"ext4\" /dev/sda3: LABEL=\"ntfs\" UUID=\"6798491F3EB8CFC8\" TYPE=\"ntfs\" /dev/sda5: LABEL=\"FAT32\" UUID=\"1D7D-F985\" TYPE=\"vfat\" /dev/sda6: LABEL=\"ext3\" UUID=\"a4f6af01-786f-4bdf-9405-d340fded6580\" TYPE=\"ext3\" /dev/sda7: LABEL=\"ext2\" UUID=\"4b2c5e07-97db-4a65-9147-e6b0dceb1353\" TYPE=\"ext2\" /dev/sda8: LABEL=\"ext4\" UUID=\"b74143c3-6679-4a3a-9a20-b608ba085170\" TYPE=\"ext4\" \u0415\u0441\u043b\u0438 \u0412\u0430\u0448\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0437\u0430\u0434\u0430\u043d Label, \u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u043f\u043e\u0438\u0441\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043d\u0435 \u0437\u0430\u0439\u043c\u0443\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b \"ntfs\" \u0441 UUID \"6798491F3EB8CFC8\". \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f UUID \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0431\u0435\u0437 Label \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 gParted \u0438\u043b\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u0438\u0441\u043a\u043e\u0432, \u0437\u0434\u0435\u0441\u044c \u0412\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f /dev/sdaX. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0412\u0430\u043c \u043b\u0435\u043d\u044c \u0438\u0441\u043a\u0430\u0442\u044c UUID, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c: /dev/sda3. \u041c\u0438\u043d\u0443\u0441 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 - \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u043a\u043e\u0432. \u0428\u0430\u0433 2. \u041e\u043f\u043e\u0432\u0435\u0449\u0430\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0412\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 fstab: sudo gedit /etc/fstab \u0415\u0441\u043b\u0438 \u0443 \u0412\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d gedit, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f nano \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c. \u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0443: UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 /media - \u0442\u0430\u043a \u043e\u043d\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nemo) \u043a\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u043f\u0430\u043f\u043a\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 /media/*username*. \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f NTFS. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u043f\u0430\u043a\u0435\u0442 ntfs-3g \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 \u0412\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u041e\u043d \u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u043f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e ntfs, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: NTFS ntfs-3g ntfs-3g defaults,uid=1000 0 0 FAT16, FAT32 vfat user,auto,fmask=0111,dmask=0000 Apple HFS hfsplus user,auto,file_umask=0177,dir_umask=0077,uid=1000 ext2 ext2 defaults ext3 ext3 ext4 ext4 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 UUID \u0438 \u043f\u0443\u0442\u044c \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0428\u0430\u0433 3. \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0434\u0435\u043b\u043e \u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u043a\u0438: sudo mount -a \u0428\u0430\u0433 4. \u0413\u0443\u043b\u044f\u0435\u043c \u0441\u043c\u0435\u043b\u043e \u0412\u043e\u0442 \u0438 \u0432\u0441\u0451. \u041e\u0442\u043d\u044b\u043d\u0435 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043d\u0438\u043c\u0438. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2. Gnome Disk Utility \u0412 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \"\u0414\u0438\u0441\u043a\u0438\" (gnome-disks). \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c \u043d\u0430 Elementary OS Freya (\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 Ubuntu 14.04): \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0438\u0441\u043a, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0441 \u0448\u0435\u0441\u0442\u0435\u0440\u0451\u043d\u043a\u0430\u043c\u0438, \u0432 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" (\"Edit Mount Options\"). \u0412 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\" (\"Automatic Mount Options\"), \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435\" (\"Mount at startup\") \u0438 \"\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435\" (\"Show in user interface\"). \u0412 \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\" (\"Identify as\") \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 UUID. \u041f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\"Filesystem Type\"), \u0422\u043e\u0447\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\"Mount Point\") \u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0435\u0449\u0451. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0432 /etc/fstab: UUID=3C1D4F9C296DA92C /mnt/3C1D4F9C296DA92C auto nosuid,nodev,nofail,x-gvfs-show 0 0 \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \"\u0414\u0438\u0441\u043a\u0438\" \u043d\u0435 \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: gnome-disks \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: sudo apt-get install gnome-disk-utility \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443? \u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441\u043e \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0432\u044b\u0434\u0430\u044e\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0440\u043e\u0434\u0435 \"\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\", \"\u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\" \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435, \u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 uid=1000. UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e (\u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u043b\u0438\u0431\u043e root, \u043b\u0438\u0431\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0415\u0441\u043b\u0438 \u0412\u0430\u0448 UID \u0438\u043d\u043e\u0439 (\u0447\u0442\u043e \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e), \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0438\u0441\u043a\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432 /etc/passwd \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e. \u0412\u043c\u0435\u0441\u0442\u043e uid \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c gid - \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 1000, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0432 /etc/group. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0415\u0441\u043b\u0438 Windows \u043c\u0435\u0448\u0430\u0435\u0442 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 Source","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_1","text":"\u0415\u0441\u043b\u0438 \u0412\u044b \u0443\u0441\u0442\u0430\u043b\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u0422\u0430\u043a \u0443\u0436 \u043f\u043e\u0432\u0435\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Ubuntu \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0437\u044b\u0432\u0430\u044f \u0435\u0433\u043e \"\u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439\". \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b (\u043a\u0440\u043e\u043c\u0435 \u0444\u043b\u044d\u0448\u0435\u043a \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u044b\u0445 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432) \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0430\u0441 \u0442\u0430\u043a\u043e\u0439 \u0440\u0430\u0441\u043a\u043b\u0430\u0434 \u043d\u0435 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0438 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0432\u0442\u043e\u0440\u043e\u043c\u0443 (\u0442\u0440\u0435\u0442\u044c\u0435\u043c\u0443, \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u043c\u0443...) \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u041e\u0421. \u041a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0441\u0432\u043e\u0439 UUID ( Universally Unique Identifier ), \u0438 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0433\u043e.","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0441\u043a\u0430"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#1","text":"sudo blkid \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0430\u043a\u043e\u0435: /dev/sda1: UUID=\"b2098d42-3e3d-470c-8ddb-76f74f0f6d44\" TYPE=\"ext4\" /dev/sda3: LABEL=\"ntfs\" UUID=\"6798491F3EB8CFC8\" TYPE=\"ntfs\" /dev/sda5: LABEL=\"FAT32\" UUID=\"1D7D-F985\" TYPE=\"vfat\" /dev/sda6: LABEL=\"ext3\" UUID=\"a4f6af01-786f-4bdf-9405-d340fded6580\" TYPE=\"ext3\" /dev/sda7: LABEL=\"ext2\" UUID=\"4b2c5e07-97db-4a65-9147-e6b0dceb1353\" TYPE=\"ext2\" /dev/sda8: LABEL=\"ext4\" UUID=\"b74143c3-6679-4a3a-9a20-b608ba085170\" TYPE=\"ext4\" \u0415\u0441\u043b\u0438 \u0412\u0430\u0448\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443 \u0437\u0430\u0434\u0430\u043d Label, \u0442\u043e \u0432\u0441\u0451 \u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u043f\u043e\u0438\u0441\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u043d\u0435 \u0437\u0430\u0439\u043c\u0443\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0440\u0430\u0437\u0434\u0435\u043b \"ntfs\" \u0441 UUID \"6798491F3EB8CFC8\". \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f UUID \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0431\u0435\u0437 Label \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 \u0442\u0438\u043f\u0430 gParted \u0438\u043b\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0434\u0438\u0441\u043a\u043e\u0432, \u0437\u0434\u0435\u0441\u044c \u0412\u0430\u043c \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f /dev/sdaX. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0412\u0430\u043c \u043b\u0435\u043d\u044c \u0438\u0441\u043a\u0430\u0442\u044c UUID, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c: /dev/sda3. \u041c\u0438\u043d\u0443\u0441 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430 - \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u043a\u043e\u0432.","title":"\u0428\u0430\u0433 1. \u0423\u0437\u043d\u0430\u0435\u043c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#2","text":"\u0412\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 fstab: sudo gedit /etc/fstab \u0415\u0441\u043b\u0438 \u0443 \u0412\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d gedit, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f nano \u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c. \u0412 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u0442\u0440\u043e\u043a\u0443: UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u041c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432 /media - \u0442\u0430\u043a \u043e\u043d\u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, Nemo) \u043a\u0430\u043a \u0440\u0430\u0437\u0434\u0435\u043b\u044b. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u0443 \u043f\u0430\u043f\u043a\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 /media/*username*. \u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0439 \u0432\u044b\u0448\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0434\u043b\u044f NTFS. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u043f\u0430\u043a\u0435\u0442 ntfs-3g \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0432 \u0412\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. \u041e\u043d \u0434\u0430\u0451\u0442 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u043f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e ntfs, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e. \u0414\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u044b \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: NTFS ntfs-3g ntfs-3g defaults,uid=1000 0 0 FAT16, FAT32 vfat user,auto,fmask=0111,dmask=0000 Apple HFS hfsplus user,auto,file_umask=0177,dir_umask=0077,uid=1000 ext2 ext2 defaults ext3 ext3 ext4 ext4 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 UUID \u0438 \u043f\u0443\u0442\u044c \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.","title":"\u0428\u0430\u0433 2. \u041e\u043f\u043e\u0432\u0435\u0449\u0430\u0435\u043c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#3","text":"\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c\u0441\u044f \u0438\u043b\u0438 \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0438\u0441\u043a\u0438: sudo mount -a","title":"\u0428\u0430\u0433 3. \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0434\u0435\u043b\u043e"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#4","text":"\u0412\u043e\u0442 \u0438 \u0432\u0441\u0451. \u041e\u0442\u043d\u044b\u043d\u0435 \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0441 \u043d\u0438\u043c\u0438.","title":"\u0428\u0430\u0433 4. \u0413\u0443\u043b\u044f\u0435\u043c \u0441\u043c\u0435\u043b\u043e"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#2-gnome-disk-utility","text":"\u0412 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0431\u044b\u043b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \"\u0414\u0438\u0441\u043a\u0438\" (gnome-disks). \u0412\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c \u043d\u0430 Elementary OS Freya (\u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432 \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u043d\u0430 Ubuntu 14.04): \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0434\u0438\u0441\u043a, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b, \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0441 \u0448\u0435\u0441\u0442\u0435\u0440\u0451\u043d\u043a\u0430\u043c\u0438, \u0432 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u043c\u0441\u044f \u043c\u0435\u043d\u044e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" (\"Edit Mount Options\"). \u0412 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u0432\u044b\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0435\u0440\u0445\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0430\u0442\u0435\u043b\u044c \"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\" (\"Automatic Mount Options\"), \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435\" (\"Mount at startup\") \u0438 \"\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435\" (\"Show in user interface\"). \u0412 \"\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a\" (\"Identify as\") \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 UUID. \u041f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b (\"Filesystem Type\"), \u0422\u043e\u0447\u043a\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\"Mount Point\") \u0438 \u0447\u0442\u043e-\u043d\u0438\u0431\u0443\u0434\u044c \u0435\u0449\u0451. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0432 /etc/fstab: UUID=3C1D4F9C296DA92C /mnt/3C1D4F9C296DA92C auto nosuid,nodev,nofail,x-gvfs-show 0 0 \u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \"\u0414\u0438\u0441\u043a\u0438\" \u043d\u0435 \u0431\u044b\u043b\u0430 \u043d\u0430\u0439\u0434\u0435\u043d\u0430, \u0442\u043e \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: gnome-disks \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0435\u0451 \u043c\u043e\u0436\u043d\u043e \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 \u0438\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: sudo apt-get install gnome-disk-utility","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 2. Gnome Disk Utility"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_2","text":"\u0415\u0441\u043b\u0438 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441\u043e \u0441\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0441\u043a\u043e\u0432 \u0432\u044b\u0434\u0430\u044e\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u0438 \u0432\u0440\u043e\u0434\u0435 \"\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\", \"\u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443\" \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435, \u0442\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 uid=1000. UUID=\"6798491F3EB8CFC8\" /media/isergium/ntfs ntfs-3g defaults,uid=1000 0 0 \u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430, \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u044d\u0442\u043e (\u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b) \u043b\u0438\u0431\u043e root, \u043b\u0438\u0431\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430. \u0415\u0441\u043b\u0438 \u0412\u0430\u0448 UID \u0438\u043d\u043e\u0439 (\u0447\u0442\u043e \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e), \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0438\u0441\u043a\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0432 /etc/passwd \u0438 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0433\u043e. \u0412\u043c\u0435\u0441\u0442\u043e uid \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c gid - \u044d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 1000, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0432 /etc/group.","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u0440\u0437\u0438\u043d\u0443?"},{"location":"linux/how-to/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5%20%D0%BC%D0%BE%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%B8%D1%81%D0%BA%D0%B0/#_3","text":"\u0415\u0441\u043b\u0438 Windows \u043c\u0435\u0448\u0430\u0435\u0442 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 Source","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e"},{"location":"linux/servers/Kafka%20Setting%20Up/","text":"Kafka Setting Up Setting Up Kafka Linux - Make sure you are navigated inside the bin directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. ./zookeeper-server-start.sh ../config/zookeeper.properties - Add the below properties in the server.properties listeners=PLAINTEXT://localhost:9092 auto.create.topics.enable=false - Start up the Kafka Broker ./kafka-server-start.sh ../config/server.properties ## How to create a topic ? ./kafka-topics.sh --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic ### With Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Windows - Make sure you are inside the **bin/windows** directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. zookeeper-server-start.bat ..\\..\\config\\zookeeper.properties - Start up the Kafka Broker. kafka-server-start.bat ..\\..\\config\\server.properties ## How to create a topic ? kafka-topics.bat --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic ### With Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Setting Up Multiple Kafka Brokers The first step is to add a new server.properties . We need to modify three properties to start up a multi broker set up. broker.id=<unique-broker-d> listeners=PLAINTEXT://localhost:<unique-port> log.dirs=/tmp/<unique-kafka-folder> auto.create.topics.enable=false Example config will be like below. broker.id=1 listeners=PLAINTEXT://localhost:9093 log.dirs=/tmp/kafka-logs-1 auto.create.topics.enable=false Starting up the new Broker Provide the new server.properties thats added. ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties Advanced Kafka CLI operations: Linux ## List the topics in a cluster ./kafka-topics.sh --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. ./kafka-topics.sh --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. ./kafka-topics.sh --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica ./kafka-topics.sh --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic ./kafka-topics.sh --zookeeper localhost:2181 --delete --topic test-topic ## How to view consumer groups ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log ./kafka-run-class.sh kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log ## Setting the Minimum Insync Replica ./kafka-configs.sh --alter --zookeeper localhost:2181 --entity-type topics --entity-name test-topic --add-config min.insync.replicas=2 Windows - Make sure you are inside the **bin/windows** directory. ## List the topics in a cluster kafka-topics.bat --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. kafka-topics.bat --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. kafka-topics.bat --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica kafka-topics.bat --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic kafka-topics.bat --zookeeper localhost:2181 --delete --topic <topic-name> ## How to view consumer groups kafka-consumer-groups.bat --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset kafka-consumer-groups.bat --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log kafka-run-class.bat kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log","title":"Kafka Setting Up"},{"location":"linux/servers/Kafka%20Setting%20Up/#setting-up-kafka","text":"Linux - Make sure you are navigated inside the bin directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. ./zookeeper-server-start.sh ../config/zookeeper.properties - Add the below properties in the server.properties listeners=PLAINTEXT://localhost:9092 auto.create.topics.enable=false - Start up the Kafka Broker ./kafka-server-start.sh ../config/server.properties ## How to create a topic ? ./kafka-topics.sh --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic ### With Key ./kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic --group <group-name> Windows - Make sure you are inside the **bin/windows** directory. ## Start Zookeeper and Kafka Broker - Start up the Zookeeper. zookeeper-server-start.bat ..\\..\\config\\zookeeper.properties - Start up the Kafka Broker. kafka-server-start.bat ..\\..\\config\\server.properties ## How to create a topic ? kafka-topics.bat --create --topic test-topic -zookeeper localhost:2181 --replication-factor 1 --partitions 4 ## How to instantiate a Console Producer? ### Without Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic ### With Key kafka-console-producer.bat --broker-list localhost:9092 --topic test-topic --property \"key.separator=-\" --property \"parse.key=true\" ## How to instantiate a Console Consumer? ### Without Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning ### With Key kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --from-beginning -property \"key.separator= - \" --property \"print.key=true\" ### With Consumer Group kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test-topic --group <group-name>","title":"Setting Up Kafka"},{"location":"linux/servers/Kafka%20Setting%20Up/#setting-up-multiple-kafka-brokers","text":"The first step is to add a new server.properties . We need to modify three properties to start up a multi broker set up. broker.id=<unique-broker-d> listeners=PLAINTEXT://localhost:<unique-port> log.dirs=/tmp/<unique-kafka-folder> auto.create.topics.enable=false Example config will be like below. broker.id=1 listeners=PLAINTEXT://localhost:9093 log.dirs=/tmp/kafka-logs-1 auto.create.topics.enable=false","title":"Setting Up Multiple Kafka Brokers"},{"location":"linux/servers/Kafka%20Setting%20Up/#starting-up-the-new-broker","text":"Provide the new server.properties thats added. ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties","title":"Starting up the new Broker"},{"location":"linux/servers/Kafka%20Setting%20Up/#advanced-kafka-cli-operations","text":"Linux ## List the topics in a cluster ./kafka-topics.sh --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. ./kafka-topics.sh --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. ./kafka-topics.sh --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica ./kafka-topics.sh --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic ./kafka-topics.sh --zookeeper localhost:2181 --delete --topic test-topic ## How to view consumer groups ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset ./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log ./kafka-run-class.sh kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log ## Setting the Minimum Insync Replica ./kafka-configs.sh --alter --zookeeper localhost:2181 --entity-type topics --entity-name test-topic --add-config min.insync.replicas=2 Windows - Make sure you are inside the **bin/windows** directory. ## List the topics in a cluster kafka-topics.bat --zookeeper localhost:2181 --list ## Describe topic - The below command can be used to describe all the topics. kafka-topics.bat --zookeeper localhost:2181 --describe - The below command can be used to describe a specific topic. kafka-topics.bat --zookeeper localhost:2181 --describe --topic <topic-name> ## Alter the min insync replica kafka-topics.bat --alter --zookeeper localhost:2181 --topic library-events --config min.insync.replicas=2 ## Delete a topic kafka-topics.bat --zookeeper localhost:2181 --delete --topic <topic-name> ## How to view consumer groups kafka-consumer-groups.bat --bootstrap-server localhost:9092 --list ### Consumer Groups and their Offset kafka-consumer-groups.bat --bootstrap-server localhost:9092 --describe --group console-consumer-27773 ## Viewing the Commit Log kafka-run-class.bat kafka.tools.DumpLogSegments --deep-iteration --files /tmp/kafka-logs/test-topic-0/00000000000000000000.log","title":"Advanced Kafka CLI operations:"},{"location":"linux/servers/Kafka%20local%20cluster%20run/","text":"Kafka local cluster run cd /home/gans16/.applications/kafka_2.13-2.7.0/bin ./zookeeper-server-start.sh ../config/zookeeper.properties ./kafka-server-start.sh ../config/server.properties ./kafka-server-start.sh ../config/server-1.properties ./kafka-server-start.sh ../config/server-2.properties server.properties server-1.properties server-2.properties","title":"Kafka local cluster run"},{"location":"linux/servers/Mosquitto/","text":"Mosquitto Install server: sudo apt install mosquitto Install pub/sub clients: sudo apt install mosquitto-clients Subscribe: mosquitto_sub -h localhost -p 1883 -t my-mqtt-topic Publish: mosquitto_pub -h localhost -p 1883 -t my-mqtt-topic -m \"sample-msg-1\"","title":"Mosquitto"},{"location":"linux/servers/SSH%20Essentials/","text":"SSH Essentials Introduction SSH is a secure protocol used as the primary means of connecting to Linux servers remotely. It provides a text-based interface by spawning a remote shell. After connecting, all commands you type in your local terminal are sent to the remote server and executed there. In this cheat sheet-style guide, we will cover some common ways of connecting with SSH to achieve your objectives. This can be used as a quick reference when you need to know how to connect to or configure your server in different ways. How To Use This Guide Read the SSH Overview section first if you are unfamiliar with SSH in general or are just getting started. Use whichever subsequent sections are applicable to what you are trying to achieve. Most sections are not predicated on any other, so you can use the following examples independently. Use the Contents menu on the left side of this page (at wide page widths) or your browser\u2019s find function to locate the sections you need. Copy and paste the command-line examples given, substituting the highlighted values with your own values. SSH Overview The most common way of connecting to a remote Linux server is through SSH. SSH stands for Secure Shell and provides a safe and secure way of executing commands, making changes, and configuring services remotely. When you connect through SSH, you log in using an account that exists on the remote server. How SSH Works When you connect through SSH, you will be dropped into a shell session, which is a text-based interface where you can interact with your server. For the duration of your SSH session, any commands that you type into your local terminal are sent through an encrypted SSH tunnel and executed on your server. The SSH connection is implemented using a client-server model. This means that for an SSH connection to be established, the remote machine must be running a piece of software called an SSH daemon. This software listens for connections on a specific network port, authenticates connection requests, and spawns the appropriate environment if the user provides the correct credentials. The user\u2019s computer must have an SSH client. This is a piece of software that knows how to communicate using the SSH protocol and can be given information about the remote host to connect to, the username to use, and the credentials that should be passed to authenticate. The client can also specify certain details about the connection type they would like to establish. How SSH Authenticates Users Clients generally authenticate either using passwords (less secure and not recommended) or SSH keys, which are very secure. Password logins are encrypted and are easy to understand for new users. However, automated bots and malicious users will often repeatedly try to authenticate to accounts that allow password-based logins, which can lead to security compromises. For this reason, we recommend always setting up SSH key-based authentication for most configurations. SSH keys are a matching set of cryptographic keys which can be used for authentication. Each set contains a public and a private key. The public key can be shared freely without concern, while the private key must be vigilantly guarded and never exposed to anyone. To authenticate using SSH keys, a user must have an SSH key pair on their local computer. On the remote server, the public key must be copied to a file within the user\u2019s home directory at ~/.ssh/authorized_keys . This file contains a list of public keys, one-per-line, that are authorized to log into this account. When a client connects to the host, wishing to use SSH key authentication, it will inform the server of this intent and will tell the server which public key to use. The server then checks its authorized_keys file for the public key, generates a random string, and encrypts it using the public key. This encrypted message can only be decrypted with the associated private key. The server will send this encrypted message to the client to test whether they actually have the associated private key. Upon receipt of this message, the client will decrypt it using the private key and combine the random string that is revealed with a previously negotiated session ID. It then generates an MD5 hash of this value and transmits it back to the server. The server already had the original message and the session ID, so it can compare an MD5 hash generated by those values and determine that the client must have the private key. Now that you know how SSH works, we can begin to discuss some examples to demonstrate different ways of working with SSH Generating and Working with SSH Keys This section will cover how to generate SSH keys on a client machine and distribute the public key to servers where they should be used. This is a good section to start with if you have not previously generated keys due to the increased security that it allows for future connections. Generating an SSH Key Pair Generating a new SSH public and private key pair on your local computer is the first step towards authenticating with a remote server without a password. Unless there is a good reason not to, you should always authenticate using SSH keys. A number of cryptographic algorithms can be used to generate SSH keys, including RSA, DSA, and ECDSA. RSA keys are generally preferred and are the default key type. To generate an RSA key pair on your local computer, type: - ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/demo/.ssh/id_rsa): This prompt allows you to choose the location to store your RSA private key. Press ENTER to leave this as the default, which will store them in the .ssh hidden directory in your user\u2019s home directory. Leaving the default location selected will allow your SSH client to find the keys automatically. Enter passphrase (empty for no passphrase): Enter same passphrase again: The next prompt allows you to enter a passphrase of an arbitrary length to secure your private key. By default, you will have to enter any passphrase you set here every time you use the private key, as an additional security measure. Feel free to press ENTER to leave this blank if you do not want a passphrase. Keep in mind though that this will allow anyone who gains control of your private key to login to your servers. If you choose to enter a passphrase, nothing will be displayed as you type. This is a security precaution. Output Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: 8c:e9:7c:fa:bf:c4:e5:9c:c9:b8:60:1f:fe:1c:d3:8a root@here The key's randomart image is: +--[ RSA 2048]----+ | | | | | | | + | | o S . | | o . * + | | o + = O . | | + = = + | | ....Eo+ | +-----------------+ This procedure has generated an RSA SSH key pair, located in the .ssh hidden directory within your user\u2019s home directory. These files are: ~/.ssh/id_rsa : The private key. DO NOT SHARE THIS FILE! ~/.ssh/id_rsa.pub : The associated public key. This can be shared freely without consequence. Generate an SSH Key Pair with a Larger Number of Bits SSH keys are 2048 bits by default. This is generally considered to be good enough for security, but you can specify a greater number of bits for a more hardened key. To do this, include the -b argument with the number of bits you would like. Most servers support keys with a length of at least 4096 bits. Longer keys may not be accepted for DDOS protection purposes: - ssh-keygen -b 4096 If you had previously created a different key, you will be asked if you wish to overwrite your previous key: Overwrite (y/n)? If you choose \u201cyes\u201d, your previous key will be overwritten and you will no longer be able to log in to servers using that key. Because of this, be sure to overwrite keys with caution. Removing or Changing the Passphrase on a Private Key If you have generated a passphrase for your private key and wish to change or remove it, you can do so easily. Note : To change or remove the passphrase, you must know the original passphrase. If you have lost the passphrase to the key, there is no recourse and you will have to generate a new key pair. To change or remove the passphrase, simply type: - ssh-keygen -p Enter file in which the key is (/root/.ssh/id_rsa): You can type the location of the key you wish to modify or press ENTER to accept the default value: Enter old passphrase: Enter the old passphrase that you wish to change. You will then be prompted for a new passphrase: Enter new passphrase (empty for no passphrase): Enter same passphrase again: Here, enter your new passphrase or press ENTER to remove the passphrase. Displaying the SSH Key Fingerprint Each SSH key pair share a single cryptographic \u201cfingerprint\u201d which can be used to uniquely identify the keys. This can be useful in a variety of situations. To find out the fingerprint of an SSH key, type: - ssh-keygen -l Enter file in which the key is (/root/.ssh/id_rsa): You can press ENTER if that is the correct location of the key, else enter the revised location. You will be given a string which contains the bit-length of the key, the fingerprint, and account and host it was created for, and the algorithm used: Output 4096 8e:c4:82:47:87:c2:26:4b:68:ff:96:1a:39:62:9e:4e demo@test (RSA) Copying your Public SSH Key to a Server with SSH-Copy-ID To copy your public key to a server, allowing you to authenticate without a password, a number of approaches can be taken. If you currently have password-based SSH access configured to your server, and you have the ssh-copy-id utility installed, this is a simple process. The ssh-copy-id tool is included in many Linux distributions\u2019 OpenSSH packages, so it very likely may be installed by default. If you have this option, you can easily transfer your public key by typing: - ssh-copy-id username@remote_host This will prompt you for the user account\u2019s password on the remote system: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys demo@111.111.11.111's password: After typing in the password, the contents of your ~/.ssh/id_rsa.pub key will be appended to the end of the user account\u2019s ~/.ssh/authorized_keys file: Output Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'demo@111.111.11.111'\" and check to make sure that only the key(s) you wanted were added. You can now log in to that account without a password: - ssh username@remote_host Copying your Public SSH Key to a Server Without SSH-Copy-ID If you do not have the ssh-copy-id utility available, but still have password-based SSH access to the remote server, you can copy the contents of your public key in a different way. You can output the contents of the key and pipe it into the ssh command. On the remote side, you can ensure that the ~/.ssh directory exists, and then append the piped contents into the ~/.ssh/authorized_keys file: - cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\" You will be asked to supply the password for the remote account: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes demo@111.111.11.111's password: After entering the password, your key will be copied, allowing you to log in without a password: - ssh username@remote_IP_host Copying your Public SSH Key to a Server Manually If you do not have password-based SSH access available, you will have to add your public key to the remote server manually. On your local machine, you can find the contents of your public key file by typing: - cat ~/.ssh/id_rsa.pub Output ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test You can copy this value, and manually paste it into the appropriate location on the remote server. You will have to log in to the remote server through other means (like the DigitalOcean web console). On the remote server, create the ~/.ssh directory if it does not already exist: - mkdir -p ~/.ssh Afterwards, you can create or append the ~/.ssh/authorized_keys file by typing: - echo public_key_string >> ~/.ssh/authorized_keys You should now be able to log in to the remote server without a password. Basic Connection Instructions The following section will cover some of the basics about how to connect to a server with SSH. Connecting to a Remote Server To connect to a remote server and open a shell session there, you can use the ssh command. The simplest form assumes that your username on your local machine is the same as that on the remote server. If this is true, you can connect using: - ssh remote_host If your username is different on the remoter server, you need to pass the remote user\u2019s name like this: - ssh username@remote_host Your first time connecting to a new host, you will see a message that looks like this: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes Type yes to accept the authenticity of the remote host. If you are using password authentication, you will be prompted for the password for the remote account here. If you are using SSH keys, you will be prompted for your private key\u2019s passphrase if one is set, otherwise you will be logged in automatically. Running a Single Command on a Remote Server To run a single command on a remote server instead of spawning a shell session, you can add the command after the connection information, like this: - ssh username@remote_host command_to_run This will connect to the remote host, authenticate with your credentials, and execute the command you specified. The connection will immediately close afterwards. Logging in to a Server with a Different Port By default the SSH daemon on a server runs on port 22 . Your SSH client will assume that this is the case when trying to connect. If your SSH server is listening on a non-standard port (this is demonstrated in a later section), you will have to specify the new port number when connecting with your client. You can do this by specifying the port number with the -p option: - ssh -p port_num username@remote_host To avoid having to do this every time you log in to your remote server, you can create or edit a configuration file in the ~/.ssh directory within the home directory of your local computer. Edit or create the file now by typing: - nano ~/.ssh/config In here, you can set host-specific configuration options. To specify your new port, use a format like this: ~/.ssh/config Host remote_alias HostName remote_host Port port_num This will allow you to log in without specifying the specific port number on the command line. Adding your SSH Keys to an SSH Agent to Avoid Typing the Passphrase If you have a passphrase on your private SSH key, you will be prompted to enter the passphrase every time you use it to connect to a remote host. To avoid having to repeatedly do this, you can run an SSH agent. This small utility stores your private key after you have entered the passphrase for the first time. It will be available for the duration of your terminal session, allowing you to connect in the future without re-entering the passphrase. This is also important if you need to forward your SSH credentials (shown later). To start the SSH Agent, type the following into your local terminal session: - eval $( ssh-agent ) Output Agent pid 10891 This will start the agent program and place it into the background. Now, you need to add your private key to the agent, so that it can manage your key: - ssh-add Enter passphrase for /home/demo/.ssh/id_rsa: Identity added: /home/demo/.ssh/id_rsa (/home/demo/.ssh/id_rsa) You will have to enter your passphrase (if one is set). Afterwards, your identity file is added to the agent, allowing you to use your key to sign in without having to re-enter the passphrase again. Forwarding your SSH Credentials to Use on a Server If you wish to be able to connect without a password to one server from within another server, you will need to forward your SSH key information. This will allow you to authenticate to another server through the server you are connected to, using the credentials on your local computer. To start, you must have your SSH agent started and your SSH key added to the agent (see earlier). After this is done, you need to connect to your first server using the -A option. This forwards your credentials to the server for this session: - ssh -A username@remote_host From here, you can SSH in to any other host that your SSH key is authorized to access. You will connect as if your private SSH key were located on this server. Server-Side Configuration Options This section contains some common server-side configuration options that can shape the way that your server responds and what types of connections are allowed. Disabling Password Authentication If you have SSH keys configured, tested, and working properly, it is probably a good idea to disable password authentication. This will prevent any user from signing in with SSH using a password. To do this, connect to your remote server and open the /etc/ssh/sshd_config file with root or sudo privileges: - sudo nano /etc/ssh/sshd_config Inside of the file, search for the PasswordAuthentication directive. If it is commented out, uncomment it. Set it to no to disable password logins: /etc/ssh/sshd_config PasswordAuthentication no After you have made the change, save and close the file. To implement the changes, you should restart the SSH service. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart Now, all accounts on the system will be unable to log in with SSH using passwords. Changing the Port that the SSH Daemon Runs On Some administrators suggest that you change the default port that SSH runs on. This can help decrease the number of authentication attempts your server is subjected to from automated bots. To change the port that the SSH daemon listens on, you will have to log in to your remote server. Open the sshd_config file on the remote system with root privileges, either by logging in with that user or by using sudo : - sudo nano /etc/ssh/sshd_config Once you are inside, you can change the port that SSH runs on by finding the Port 22 specification and modifying it to reflect the port you wish to use. For instance, to change the port to 4444 , put this in your file: /etc/ssh/sshd_config #Port 22 Port 4444 Save and close the file when you are finished. To implement the changes, you must restart the SSH daemon. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart After the daemon restarts, you will need to authenticate by specifying the port number (demonstrated in an earlier section). Limiting the Users Who can Connect Through SSH To explicitly limit the user accounts who are able to log in through SSH, you can take a few different approaches, each of which involve editing the SSH daemon config file. On your remote server, open this file now with root or sudo privileges: - sudo nano /etc/ssh/sshd_config The first method of specifying the accounts that are allowed to login is using the AllowUsers directive. Search for the AllowUsers directive in the file. If one does not exist, create it anywhere. After the directive, list the user accounts that should be allowed to login through SSH: /etc/ssh/sshd_config AllowUsers user1 user2 Save and close the file. Restart the daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart If you are more comfortable with group management, you can use the AllowGroups directive instead. If this is the case, just add a single group that should be allowed SSH access (we will create this group and add members momentarily): /etc/ssh/sshd_config AllowGroups sshmembers Save and close the file. Now, you can create a system group (without a home directory) matching the group you specified by typing: - sudo groupadd -r sshmembers Make sure that you add whatever user accounts you need to this group. This can be done by typing: - sudo usermod -a -G sshmembers user1 - sudo usermod -a -G sshmembers user2 Now, restart the SSH daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart Disabling Root Login It is often advisable to completely disable root login through SSH after you have set up an SSH user account that has sudo privileges. To do this, open the SSH daemon configuration file with root or sudo on your remote server. - sudo nano /etc/ssh/sshd_config Inside, search for a directive called PermitRootLogin . If it is commented, uncomment it. Change the value to \u201cno\u201d: /etc/ssh/sshd_config PermitRootLogin no Save and close the file. To implement your changes, restart the SSH daemon. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart Allowing Root Access for Specific Commands There are some cases where you might want to disable root access generally, but enable it in order to allow certain applications to run correctly. An example of this might be a backup routine. This can be accomplished through the root user\u2019s authorized_keys file, which contains SSH keys that are authorized to use the account. Add the key from your local computer that you wish to use for this process (we recommend creating a new key for each automatic process) to the root user\u2019s authorized_keys file on the server. We will demonstrate with the ssh-copy-id command here, but you can use any of the methods of copying keys we discuss in other sections: - ssh-copy-id root@remote_host Now, log into the remote server. We will need to adjust the entry in the authorized_keys file, so open it with root or sudo access: - sudo nano /root/.ssh/authorized_keys At the beginning of the line with the key you uploaded, add a command= listing that defines the command that this key is valid for. This should include the full path to the executable, plus any arguments: /root/.ssh/authorized_keys command = \"/path/to/command arg1 arg2\" ssh-rsa ... Save and close the file when you are finished. Now, open the sshd_config file with root or sudo privileges: - sudo nano /etc/ssh/sshd_config Find the directive PermitRootLogin , and change the value to forced-commands-only . This will only allow SSH key logins to use root when a command has been specified for the key: /etc/ssh/sshd_config PermitRootLogin forced-commands-only Save and close the file. Restart the SSH daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart Forwarding X Application Displays to the Client The SSH daemon can be configured to automatically forward the display of X applications on the server to the client machine. For this to function correctly, the client must have an X windows system configured and enabled. To enable this functionality, log in to your remote server and edit the sshd_config file as root or with sudo privileges: - sudo nano /etc/ssh/sshd_config Search for the X11Forwarding directive. If it is commented out, uncomment it. Create it if necessary and set the value to \u201cyes\u201d: /etc/ssh/sshd_config X11Forwarding yes Save and close the file. Restart your SSH daemon to implement these changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart To connect to the server and forward an application\u2019s display, you have to pass the -X option from the client upon connection: - ssh -X username@remote_host Graphical applications started on the server through this session should be displayed on the local computer. The performance might be a bit slow, but it is very helpful in a pinch. Client-Side Configuration Options In the next section, we\u2019ll focus on some adjustments that you can make on the client side of the connection. Defining Server-Specific Connection Information On your local computer, you can define individual configurations for some or all of the servers you connect to. These can be stored in the ~/.ssh/config file, which is read by your SSH client each time it is called. Create or open this file in your text editor on your local computer: - nano ~/.ssh/config Inside, you can define individual configuration options by introducing each with a Host keyword, followed by an alias. Beneath this and indented, you can define any of the directives found in the ssh_config man page: - man ssh_config An example configuration would be: ~/.ssh/config Host testhost HostName your_domain Port 4444 User demo You could then connect to your_domain on port 4444 using the username demo by simply typing: - ssh testhost You can also use wildcards to match more than one host. Keep in mind that later matches can override earlier ones. Because of this, you should put your most general matches at the top. For instance, you could default all connections to not allow X forwarding, with an override for your_domain by having this in your file: ~/.ssh/config Host * ForwardX11 no Host testhost HostName your_domain ForwardX11 yes Port 4444 User demo Save and close the file when you are finished. Keeping Connections Alive to Avoid Timeout If you find yourself being disconnected from SSH sessions before you are ready, it is possible that your connection is timing out. You can configure your client to send a packet to the server every so often in order to avoid this situation: On your local computer, you can configure this for every connection by editing your ~/.ssh/config file. Open it now: - nano ~/.ssh/config If one does not already exist, at the top of the file, define a section that will match all hosts. Set the ServerAliveInterval to \u201c120\u201d to send a packet to the server every two minutes. This should be enough to notify the server not to close the connection: ~/.ssh/config Host * ServerAliveInterval 120 Save and close the file when you are finished. Disabling Host Checking By default, whenever you connect to a new server, you will be shown the remote SSH daemon\u2019s host key fingerprint. The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes This is configured so that you can verify the authenticity of the host you are attempting to connect to and spot instances where a malicious user may be trying to masquerade as the remote host. In certain circumstances, you may wish to disable this feature. Note : This can be a big security risk, so make sure you know what you are doing if you set your system up like this. To make the change, the open the ~/.ssh/config file on your local computer: - nano ~/.ssh/config If one does not already exist, at the top of the file, define a section that will match all hosts. Set the StrictHostKeyChecking directive to no to add new hosts automatically to the known_hosts file. Set the UserKnownHostsFile to /dev/null to not warn on new or changed hosts: ~/.ssh/config Host * StrictHostKeyChecking no UserKnownHostsFile /dev/null You can enable the checking on a case-by-case basis by reversing those options for other hosts. The default for StrictHostKeyChecking is ask : ~/.ssh/config Host * StrictHostKeyChecking no UserKnownHostsFile /dev/null Host testhost HostName your_domain StrictHostKeyChecking ask UserKnownHostsFile /home/demo/.ssh/known_hosts Multiplexing SSH Over a Single TCP Connection There are situations where establishing a new TCP connection can take longer than you would like. If you are making multiple connections to the same machine, you can take advantage of multiplexing. SSH multiplexing re-uses the same TCP connection for multiple SSH sessions. This removes some of the work necessary to establish a new session, possibly speeding things up. Limiting the number of connections may also be helpful for other reasons. To set up multiplexing, you can manually set up the connections, or you can configure your client to automatically use multiplexing when available. We will demonstrate the second option here. To configure multiplexing, edit your SSH client\u2019s configuration file on your local machine: - nano ~/.ssh/config If you do not already have a wildcard host definition at the top of the file, add one now (as Host * ). We will be setting the ControlMaster , ControlPath , and ControlPersist values to establish our multiplexing configuration. The ControlMaster should be set to \u201cauto\u201d in able to automatically allow multiplexing if possible. The ControlPath will establish the path to control socket. The first session will create this socket and subsequent sessions will be able to find it because it is labeled by username, host, and port. Setting the ControlPersist option to 1 will allow the initial master connection to be backgrounded. The 1 specifies that the TCP connection should automatically terminate one second after the last SSH session is closed: /.ssh/config Host * ControlMaster auto ControlPath ~/.ssh/multiplex/%r@%h:%p ControlPersist 1 Save and close the file when you are finished. Now, we need to actually create the directory we specified in the control path: - mkdir ~/.ssh/multiplex Now, any sessions that are established with the same machine will attempt to use the existing socket and TCP connection. When the last session exists, the connection will be torn down after one second. If for some reason you need to bypass the multiplexing configuration temporarily, you can do so by passing the -S flag with none : - ssh -S none username@remote_host Setting Up SSH Tunnels Tunneling other traffic through a secure SSH tunnel is an excellent way to work around restrictive firewall settings. It is also a great way to encrypt otherwise unencrypted network traffic. Configuring Local Tunneling to a Server SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. A local connection is a way of accessing a network location from your local computer through your remote host. First, an SSH connection is established to your remote host. On the remote server, a connection is made to an external (or internal) network address provided by the user and traffic to this location is tunneled to your local computer on a specified port. This is often used to tunnel to a less restricted networking environment by bypassing a firewall. Another common use is to access a \u201clocalhost-only\u201d web interface from a remote location. To establish a local tunnel to your remote server, you need to use the -L parameter when connecting and you must supply three pieces of additional information: The local port where you wish to access the tunneled connection. The host that you want your remote host to connect to. The port that you want your remote host to connect on. These are given, in the order above (separated by colons), as arguments to the -L flag. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to connect to your_domain on port 80 on your remote host, making the connection available on your local machine on port 8888, you could type: - ssh -f -N -L 8888 :your_domain:80 username@remote_host Now, if you point your local web browser to 127.0.0.1:8888 , you should see whatever content is at your_domain on port 80 . A more general guide to the syntax is: - ssh -L your_port:site_or_IP_to_access:site_port username@host Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -L 8888:your_domain:80 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C . Configuring Remote Tunneling to a Server SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. In a remote tunnel, a connection is made to a remote host. During the creation of the tunnel, a remote port is specified. This port, on the remote host, will then be tunneled to a host and port combination that is connected to from the local computer. This will allow the remote computer to access a host through your local computer. This can be useful if you need to allow access to an internal network that is locked down to external connections. If the firewall allows connections out of the network, this will allow you to connect out to a remote machine and tunnel traffic from that machine to a location on the internal network. To establish a remote tunnel to your remote server, you need to use the -R parameter when connecting and you must supply three pieces of additional information: The port where the remote host can access the tunneled connection. The host that you want your local computer to connect to. The port that you want your local computer to connect to. These are given, in the order above (separated by colons), as arguments to the -R flag. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to connect to your_domain on port 80 on our local computer, making the connection available on our remote host on port 8888 , you could type: - ssh -f -N -R 8888 :your_domain:80 username@remote_host Now, on the remote host, opening a web browser to 127.0.0.1:8888 would allow you to see whatever content is at your_domain on port 80 . A more general guide to the syntax is: - ssh -R remote_port:site_or_IP_to_access:site_port username@host Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -R 8888:your_domain:80 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column, of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C . Configuring Dynamic Tunneling to a Remote Server SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. A dynamic tunnel is similar to a local tunnel in that it allows the local computer to connect to other resources through a remote host. A dynamic tunnel does this by simply specifying a single local port. Applications that wish to take advantage of this port for tunneling must be able to communicate using the SOCKS protocol so that the packets can be correctly redirected at the other side of the tunnel. Traffic that is passed to this local port will be sent to the remote host. From there, the SOCKS protocol will be interpreted to establish a connection to the desired end location. This set up allows a SOCKS-capable application to connect to any number of locations through the remote server, without multiple static tunnels. To establish the connection, we will pass the -D flag along with the local port where we wish to access the tunnel. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to establish a tunnel on port 7777 , you can type: - ssh -f -N -D 7777 username@remote_host From here, you can start pointing your SOCKS-aware application (like a web browser), to the port you selected. The application will send its information into a socket associated with the port. The method of directing traffic to the SOCKS port will differ depending on application. For instance, in Firefox, the general location is Preferences > Advanced > Settings > Manual proxy configurations. In Chrome, you can start the application with the --proxy-server= flag set. You will want to use the localhost interface and the port you forwarded. Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -D 7777 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column, of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C . Using SSH Escape Codes to Control Connections Even after establishing an SSH session, it is possible to exercise control over the connection from within the terminal. We can do this with something called SSH escape codes, which allow us to interact with our local SSH software from within a session. Forcing a Disconnect from the Client-Side (How to Exit Out of a Stuck or Frozen Session) One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within. These commands can be executed starting with the ~ control character within an SSH session. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One of the most useful controls is the ability to initiate a disconnect from the client. SSH connections are typically closed by the server, but this can be a problem if the server is suffering from issues or if the connection has been broken. By using a client-side disconnect, the connection can be cleanly closed from the client. To close a connection from the client, use the control character ( ~ ), with a dot. If your connection is having problems, you will likely be in what appears to be a stuck terminal session. Type the commands despite the lack of feedback to perform a client-side disconnect: - [ ENTER ] - ~. The connection should immediately close, returning you to your local shell session. Placing an SSH Session into the Background One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within the connection. These commands can be executed starting with the ~ control character from within an SSH connection. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One capability that this provides is to put an SSH session into the background. To do this, we need to supply the control character ( ~ ) and then execute the conventional keyboard shortcut to background a task (CTRL-z): - [ ENTER ] - ~ [ CTRL-z ] This will place the connection into the background, returning you to your local shell session. To return to your SSH session, you can use the conventional job control mechanisms. You can immediately re-activate your most recent backgrounded task by typing: - fg If you have multiple backgrounded tasks, you can see the available jobs by typing: - jobs Output [1]+ Stopped ssh username@some_host [2] Stopped ssh username@another_host You can then bring any of the tasks to the foreground by using the index in the first column with a percentage sign: - fg %2 Changing Port Forwarding Options on an Existing SSH Connection One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within the connection. These commands can be executed starting with the ~ control character from within an SSH connection. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One thing that this allows is for a user to alter the port forwarding configuration after the connection has already been established. This allows you to create or tear down port forwarding rules on-the-fly. These capabilities are part of the SSH command line interface, which can be accessed during a session by using the control character ( ~ ) and \u201cC\u201d: - [ ENTER ] - ~C ssh> You will be given an SSH command prompt, which has a very limited set of valid commands. To see the available options, you can type -h from this prompt. If nothing is returned, you may have to increase the verbosity of your SSH output by using ~v a few times: - [ ENTER ] - ~v - ~v - ~v - ~C - -h Commands: -L[bind_address:]port:host:hostport Request local forward -R[bind_address:]port:host:hostport Request remote forward -D[bind_address:]port Request dynamic forward -KL[bind_address:]port Cancel local forward -KR[bind_address:]port Cancel remote forward -KD[bind_address:]port Cancel dynamic forward As you can see, you can easily implement any of the forwarding options using the appropriate options (see the forwarding section for more information). You can also destroy a tunnel with the associated \u201ckill\u201d command specified with a \u201cK\u201d before the forwarding type letter. For instance, to kill a local forward ( -L ), you could use the -KL command. You will only need to provide the port for this. So, to set up a local port forward, you may type: - [ ENTER ] - ~C - -L 8888 :127.0.0.1:80 Port 8888 on your local computer will now be able to communicate with the web server on the host you are connecting to. When you are finished, you can tear down that forward by typing: - [ ENTER ] - ~C - -KL 8888 Conclusion The above instructions should cover the majority of the information most users will need about SSH on a day-to-day basis. If you have other tips or wish to share your favorite configurations and methods, feel free to use the comments below. Justin Ellingwood Senior Technical Writer @DigitalOcean Source","title":"SSH Essentials"},{"location":"linux/servers/SSH%20Essentials/#introduction","text":"SSH is a secure protocol used as the primary means of connecting to Linux servers remotely. It provides a text-based interface by spawning a remote shell. After connecting, all commands you type in your local terminal are sent to the remote server and executed there. In this cheat sheet-style guide, we will cover some common ways of connecting with SSH to achieve your objectives. This can be used as a quick reference when you need to know how to connect to or configure your server in different ways.","title":"Introduction"},{"location":"linux/servers/SSH%20Essentials/#how-to-use-this-guide","text":"Read the SSH Overview section first if you are unfamiliar with SSH in general or are just getting started. Use whichever subsequent sections are applicable to what you are trying to achieve. Most sections are not predicated on any other, so you can use the following examples independently. Use the Contents menu on the left side of this page (at wide page widths) or your browser\u2019s find function to locate the sections you need. Copy and paste the command-line examples given, substituting the highlighted values with your own values.","title":"How To Use This Guide"},{"location":"linux/servers/SSH%20Essentials/#ssh-overview","text":"The most common way of connecting to a remote Linux server is through SSH. SSH stands for Secure Shell and provides a safe and secure way of executing commands, making changes, and configuring services remotely. When you connect through SSH, you log in using an account that exists on the remote server.","title":"SSH Overview"},{"location":"linux/servers/SSH%20Essentials/#how-ssh-works","text":"When you connect through SSH, you will be dropped into a shell session, which is a text-based interface where you can interact with your server. For the duration of your SSH session, any commands that you type into your local terminal are sent through an encrypted SSH tunnel and executed on your server. The SSH connection is implemented using a client-server model. This means that for an SSH connection to be established, the remote machine must be running a piece of software called an SSH daemon. This software listens for connections on a specific network port, authenticates connection requests, and spawns the appropriate environment if the user provides the correct credentials. The user\u2019s computer must have an SSH client. This is a piece of software that knows how to communicate using the SSH protocol and can be given information about the remote host to connect to, the username to use, and the credentials that should be passed to authenticate. The client can also specify certain details about the connection type they would like to establish.","title":"How SSH Works"},{"location":"linux/servers/SSH%20Essentials/#how-ssh-authenticates-users","text":"Clients generally authenticate either using passwords (less secure and not recommended) or SSH keys, which are very secure. Password logins are encrypted and are easy to understand for new users. However, automated bots and malicious users will often repeatedly try to authenticate to accounts that allow password-based logins, which can lead to security compromises. For this reason, we recommend always setting up SSH key-based authentication for most configurations. SSH keys are a matching set of cryptographic keys which can be used for authentication. Each set contains a public and a private key. The public key can be shared freely without concern, while the private key must be vigilantly guarded and never exposed to anyone. To authenticate using SSH keys, a user must have an SSH key pair on their local computer. On the remote server, the public key must be copied to a file within the user\u2019s home directory at ~/.ssh/authorized_keys . This file contains a list of public keys, one-per-line, that are authorized to log into this account. When a client connects to the host, wishing to use SSH key authentication, it will inform the server of this intent and will tell the server which public key to use. The server then checks its authorized_keys file for the public key, generates a random string, and encrypts it using the public key. This encrypted message can only be decrypted with the associated private key. The server will send this encrypted message to the client to test whether they actually have the associated private key. Upon receipt of this message, the client will decrypt it using the private key and combine the random string that is revealed with a previously negotiated session ID. It then generates an MD5 hash of this value and transmits it back to the server. The server already had the original message and the session ID, so it can compare an MD5 hash generated by those values and determine that the client must have the private key. Now that you know how SSH works, we can begin to discuss some examples to demonstrate different ways of working with SSH","title":"How SSH Authenticates Users"},{"location":"linux/servers/SSH%20Essentials/#generating-and-working-with-ssh-keys","text":"This section will cover how to generate SSH keys on a client machine and distribute the public key to servers where they should be used. This is a good section to start with if you have not previously generated keys due to the increased security that it allows for future connections.","title":"Generating and Working with SSH Keys"},{"location":"linux/servers/SSH%20Essentials/#generating-an-ssh-key-pair","text":"Generating a new SSH public and private key pair on your local computer is the first step towards authenticating with a remote server without a password. Unless there is a good reason not to, you should always authenticate using SSH keys. A number of cryptographic algorithms can be used to generate SSH keys, including RSA, DSA, and ECDSA. RSA keys are generally preferred and are the default key type. To generate an RSA key pair on your local computer, type: - ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/home/demo/.ssh/id_rsa): This prompt allows you to choose the location to store your RSA private key. Press ENTER to leave this as the default, which will store them in the .ssh hidden directory in your user\u2019s home directory. Leaving the default location selected will allow your SSH client to find the keys automatically. Enter passphrase (empty for no passphrase): Enter same passphrase again: The next prompt allows you to enter a passphrase of an arbitrary length to secure your private key. By default, you will have to enter any passphrase you set here every time you use the private key, as an additional security measure. Feel free to press ENTER to leave this blank if you do not want a passphrase. Keep in mind though that this will allow anyone who gains control of your private key to login to your servers. If you choose to enter a passphrase, nothing will be displayed as you type. This is a security precaution. Output Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: 8c:e9:7c:fa:bf:c4:e5:9c:c9:b8:60:1f:fe:1c:d3:8a root@here The key's randomart image is: +--[ RSA 2048]----+ | | | | | | | + | | o S . | | o . * + | | o + = O . | | + = = + | | ....Eo+ | +-----------------+ This procedure has generated an RSA SSH key pair, located in the .ssh hidden directory within your user\u2019s home directory. These files are: ~/.ssh/id_rsa : The private key. DO NOT SHARE THIS FILE! ~/.ssh/id_rsa.pub : The associated public key. This can be shared freely without consequence.","title":"Generating an SSH Key Pair"},{"location":"linux/servers/SSH%20Essentials/#generate-an-ssh-key-pair-with-a-larger-number-of-bits","text":"SSH keys are 2048 bits by default. This is generally considered to be good enough for security, but you can specify a greater number of bits for a more hardened key. To do this, include the -b argument with the number of bits you would like. Most servers support keys with a length of at least 4096 bits. Longer keys may not be accepted for DDOS protection purposes: - ssh-keygen -b 4096 If you had previously created a different key, you will be asked if you wish to overwrite your previous key: Overwrite (y/n)? If you choose \u201cyes\u201d, your previous key will be overwritten and you will no longer be able to log in to servers using that key. Because of this, be sure to overwrite keys with caution.","title":"Generate an SSH Key Pair with a Larger Number of Bits"},{"location":"linux/servers/SSH%20Essentials/#removing-or-changing-the-passphrase-on-a-private-key","text":"If you have generated a passphrase for your private key and wish to change or remove it, you can do so easily. Note : To change or remove the passphrase, you must know the original passphrase. If you have lost the passphrase to the key, there is no recourse and you will have to generate a new key pair. To change or remove the passphrase, simply type: - ssh-keygen -p Enter file in which the key is (/root/.ssh/id_rsa): You can type the location of the key you wish to modify or press ENTER to accept the default value: Enter old passphrase: Enter the old passphrase that you wish to change. You will then be prompted for a new passphrase: Enter new passphrase (empty for no passphrase): Enter same passphrase again: Here, enter your new passphrase or press ENTER to remove the passphrase.","title":"Removing or Changing the Passphrase on a Private Key"},{"location":"linux/servers/SSH%20Essentials/#displaying-the-ssh-key-fingerprint","text":"Each SSH key pair share a single cryptographic \u201cfingerprint\u201d which can be used to uniquely identify the keys. This can be useful in a variety of situations. To find out the fingerprint of an SSH key, type: - ssh-keygen -l Enter file in which the key is (/root/.ssh/id_rsa): You can press ENTER if that is the correct location of the key, else enter the revised location. You will be given a string which contains the bit-length of the key, the fingerprint, and account and host it was created for, and the algorithm used: Output 4096 8e:c4:82:47:87:c2:26:4b:68:ff:96:1a:39:62:9e:4e demo@test (RSA)","title":"Displaying the SSH Key Fingerprint"},{"location":"linux/servers/SSH%20Essentials/#copying-your-public-ssh-key-to-a-server-with-ssh-copy-id","text":"To copy your public key to a server, allowing you to authenticate without a password, a number of approaches can be taken. If you currently have password-based SSH access configured to your server, and you have the ssh-copy-id utility installed, this is a simple process. The ssh-copy-id tool is included in many Linux distributions\u2019 OpenSSH packages, so it very likely may be installed by default. If you have this option, you can easily transfer your public key by typing: - ssh-copy-id username@remote_host This will prompt you for the user account\u2019s password on the remote system: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys demo@111.111.11.111's password: After typing in the password, the contents of your ~/.ssh/id_rsa.pub key will be appended to the end of the user account\u2019s ~/.ssh/authorized_keys file: Output Number of key(s) added: 1 Now try logging into the machine, with: \"ssh 'demo@111.111.11.111'\" and check to make sure that only the key(s) you wanted were added. You can now log in to that account without a password: - ssh username@remote_host","title":"Copying your Public SSH Key to a Server with SSH-Copy-ID"},{"location":"linux/servers/SSH%20Essentials/#copying-your-public-ssh-key-to-a-server-without-ssh-copy-id","text":"If you do not have the ssh-copy-id utility available, but still have password-based SSH access to the remote server, you can copy the contents of your public key in a different way. You can output the contents of the key and pipe it into the ssh command. On the remote side, you can ensure that the ~/.ssh directory exists, and then append the piped contents into the ~/.ssh/authorized_keys file: - cat ~/.ssh/id_rsa.pub | ssh username@remote_host \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\" You will be asked to supply the password for the remote account: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes demo@111.111.11.111's password: After entering the password, your key will be copied, allowing you to log in without a password: - ssh username@remote_IP_host","title":"Copying your Public SSH Key to a Server Without SSH-Copy-ID"},{"location":"linux/servers/SSH%20Essentials/#copying-your-public-ssh-key-to-a-server-manually","text":"If you do not have password-based SSH access available, you will have to add your public key to the remote server manually. On your local machine, you can find the contents of your public key file by typing: - cat ~/.ssh/id_rsa.pub Output ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqql6MzstZYh1TmWWv11q5O3pISj2ZFl9HgH1JLknLLx44+tXfJ7mIrKNxOOwxIxvcBF8PXSYvobFYEZjGIVCEAjrUzLiIxbyCoxVyle7Q+bqgZ8SeeM8wzytsY+dVGcBxF6N4JS+zVk5eMcV385gG3Y6ON3EG112n6d+SMXY0OEBIcO6x+PnUSGHrSgpBgX7Ks1r7xqFa7heJLLt2wWwkARptX7udSq05paBhcpB0pHtA1Rfz3K2B+ZVIpSDfki9UVKzT8JUmwW6NNzSgxUfQHGwnW7kj4jp4AT0VZk3ADw497M2G/12N0PPB5CnhHf7ovgy6nL1ikrygTKRFmNZISvAcywB9GVqNAVE+ZHDSCuURNsAInVzgYo9xgJDW8wUw2o8U77+xiFxgI5QSZX3Iq7YLMgeksaO4rBJEa54k8m5wEiEE1nUhLuJ0X/vh2xPff6SQ1BL/zkOhvJCACK6Vb15mDOeCSq54Cr7kvS46itMosi/uS66+PujOO+xt/2FWYepz6ZlN70bRly57Q06J+ZJoc9FfBCbCyYH7U/ASsmY095ywPsBo1XQ9PqhnN1/YOorJ068foQDNVpm146mUpILVxmq41Cj55YKHEazXGsdBIbXWhcrRf4G2fJLRcGUr9q8/lERo9oxRm5JFX6TCmj6kmiFqv+Ow9gI0x8GvaQ== demo@test You can copy this value, and manually paste it into the appropriate location on the remote server. You will have to log in to the remote server through other means (like the DigitalOcean web console). On the remote server, create the ~/.ssh directory if it does not already exist: - mkdir -p ~/.ssh Afterwards, you can create or append the ~/.ssh/authorized_keys file by typing: - echo public_key_string >> ~/.ssh/authorized_keys You should now be able to log in to the remote server without a password.","title":"Copying your Public SSH Key to a Server Manually"},{"location":"linux/servers/SSH%20Essentials/#basic-connection-instructions","text":"The following section will cover some of the basics about how to connect to a server with SSH.","title":"Basic Connection Instructions"},{"location":"linux/servers/SSH%20Essentials/#connecting-to-a-remote-server","text":"To connect to a remote server and open a shell session there, you can use the ssh command. The simplest form assumes that your username on your local machine is the same as that on the remote server. If this is true, you can connect using: - ssh remote_host If your username is different on the remoter server, you need to pass the remote user\u2019s name like this: - ssh username@remote_host Your first time connecting to a new host, you will see a message that looks like this: The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes Type yes to accept the authenticity of the remote host. If you are using password authentication, you will be prompted for the password for the remote account here. If you are using SSH keys, you will be prompted for your private key\u2019s passphrase if one is set, otherwise you will be logged in automatically.","title":"Connecting to a Remote Server"},{"location":"linux/servers/SSH%20Essentials/#running-a-single-command-on-a-remote-server","text":"To run a single command on a remote server instead of spawning a shell session, you can add the command after the connection information, like this: - ssh username@remote_host command_to_run This will connect to the remote host, authenticate with your credentials, and execute the command you specified. The connection will immediately close afterwards.","title":"Running a Single Command on a Remote Server"},{"location":"linux/servers/SSH%20Essentials/#logging-in-to-a-server-with-a-different-port","text":"By default the SSH daemon on a server runs on port 22 . Your SSH client will assume that this is the case when trying to connect. If your SSH server is listening on a non-standard port (this is demonstrated in a later section), you will have to specify the new port number when connecting with your client. You can do this by specifying the port number with the -p option: - ssh -p port_num username@remote_host To avoid having to do this every time you log in to your remote server, you can create or edit a configuration file in the ~/.ssh directory within the home directory of your local computer. Edit or create the file now by typing: - nano ~/.ssh/config In here, you can set host-specific configuration options. To specify your new port, use a format like this: ~/.ssh/config Host remote_alias HostName remote_host Port port_num This will allow you to log in without specifying the specific port number on the command line.","title":"Logging in to a Server with a Different Port"},{"location":"linux/servers/SSH%20Essentials/#adding-your-ssh-keys-to-an-ssh-agent-to-avoid-typing-the-passphrase","text":"If you have a passphrase on your private SSH key, you will be prompted to enter the passphrase every time you use it to connect to a remote host. To avoid having to repeatedly do this, you can run an SSH agent. This small utility stores your private key after you have entered the passphrase for the first time. It will be available for the duration of your terminal session, allowing you to connect in the future without re-entering the passphrase. This is also important if you need to forward your SSH credentials (shown later). To start the SSH Agent, type the following into your local terminal session: - eval $( ssh-agent ) Output Agent pid 10891 This will start the agent program and place it into the background. Now, you need to add your private key to the agent, so that it can manage your key: - ssh-add Enter passphrase for /home/demo/.ssh/id_rsa: Identity added: /home/demo/.ssh/id_rsa (/home/demo/.ssh/id_rsa) You will have to enter your passphrase (if one is set). Afterwards, your identity file is added to the agent, allowing you to use your key to sign in without having to re-enter the passphrase again.","title":"Adding your SSH Keys to an SSH Agent to Avoid Typing the Passphrase"},{"location":"linux/servers/SSH%20Essentials/#forwarding-your-ssh-credentials-to-use-on-a-server","text":"If you wish to be able to connect without a password to one server from within another server, you will need to forward your SSH key information. This will allow you to authenticate to another server through the server you are connected to, using the credentials on your local computer. To start, you must have your SSH agent started and your SSH key added to the agent (see earlier). After this is done, you need to connect to your first server using the -A option. This forwards your credentials to the server for this session: - ssh -A username@remote_host From here, you can SSH in to any other host that your SSH key is authorized to access. You will connect as if your private SSH key were located on this server.","title":"Forwarding your SSH Credentials to Use on a Server"},{"location":"linux/servers/SSH%20Essentials/#server-side-configuration-options","text":"This section contains some common server-side configuration options that can shape the way that your server responds and what types of connections are allowed.","title":"Server-Side Configuration Options"},{"location":"linux/servers/SSH%20Essentials/#disabling-password-authentication","text":"If you have SSH keys configured, tested, and working properly, it is probably a good idea to disable password authentication. This will prevent any user from signing in with SSH using a password. To do this, connect to your remote server and open the /etc/ssh/sshd_config file with root or sudo privileges: - sudo nano /etc/ssh/sshd_config Inside of the file, search for the PasswordAuthentication directive. If it is commented out, uncomment it. Set it to no to disable password logins: /etc/ssh/sshd_config PasswordAuthentication no After you have made the change, save and close the file. To implement the changes, you should restart the SSH service. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart Now, all accounts on the system will be unable to log in with SSH using passwords.","title":"Disabling Password Authentication"},{"location":"linux/servers/SSH%20Essentials/#changing-the-port-that-the-ssh-daemon-runs-on","text":"Some administrators suggest that you change the default port that SSH runs on. This can help decrease the number of authentication attempts your server is subjected to from automated bots. To change the port that the SSH daemon listens on, you will have to log in to your remote server. Open the sshd_config file on the remote system with root privileges, either by logging in with that user or by using sudo : - sudo nano /etc/ssh/sshd_config Once you are inside, you can change the port that SSH runs on by finding the Port 22 specification and modifying it to reflect the port you wish to use. For instance, to change the port to 4444 , put this in your file: /etc/ssh/sshd_config #Port 22 Port 4444 Save and close the file when you are finished. To implement the changes, you must restart the SSH daemon. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart After the daemon restarts, you will need to authenticate by specifying the port number (demonstrated in an earlier section).","title":"Changing the Port that the SSH Daemon Runs On"},{"location":"linux/servers/SSH%20Essentials/#limiting-the-users-who-can-connect-through-ssh","text":"To explicitly limit the user accounts who are able to log in through SSH, you can take a few different approaches, each of which involve editing the SSH daemon config file. On your remote server, open this file now with root or sudo privileges: - sudo nano /etc/ssh/sshd_config The first method of specifying the accounts that are allowed to login is using the AllowUsers directive. Search for the AllowUsers directive in the file. If one does not exist, create it anywhere. After the directive, list the user accounts that should be allowed to login through SSH: /etc/ssh/sshd_config AllowUsers user1 user2 Save and close the file. Restart the daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart If you are more comfortable with group management, you can use the AllowGroups directive instead. If this is the case, just add a single group that should be allowed SSH access (we will create this group and add members momentarily): /etc/ssh/sshd_config AllowGroups sshmembers Save and close the file. Now, you can create a system group (without a home directory) matching the group you specified by typing: - sudo groupadd -r sshmembers Make sure that you add whatever user accounts you need to this group. This can be done by typing: - sudo usermod -a -G sshmembers user1 - sudo usermod -a -G sshmembers user2 Now, restart the SSH daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart","title":"Limiting the Users Who can Connect Through SSH"},{"location":"linux/servers/SSH%20Essentials/#disabling-root-login","text":"It is often advisable to completely disable root login through SSH after you have set up an SSH user account that has sudo privileges. To do this, open the SSH daemon configuration file with root or sudo on your remote server. - sudo nano /etc/ssh/sshd_config Inside, search for a directive called PermitRootLogin . If it is commented, uncomment it. Change the value to \u201cno\u201d: /etc/ssh/sshd_config PermitRootLogin no Save and close the file. To implement your changes, restart the SSH daemon. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart","title":"Disabling Root Login"},{"location":"linux/servers/SSH%20Essentials/#allowing-root-access-for-specific-commands","text":"There are some cases where you might want to disable root access generally, but enable it in order to allow certain applications to run correctly. An example of this might be a backup routine. This can be accomplished through the root user\u2019s authorized_keys file, which contains SSH keys that are authorized to use the account. Add the key from your local computer that you wish to use for this process (we recommend creating a new key for each automatic process) to the root user\u2019s authorized_keys file on the server. We will demonstrate with the ssh-copy-id command here, but you can use any of the methods of copying keys we discuss in other sections: - ssh-copy-id root@remote_host Now, log into the remote server. We will need to adjust the entry in the authorized_keys file, so open it with root or sudo access: - sudo nano /root/.ssh/authorized_keys At the beginning of the line with the key you uploaded, add a command= listing that defines the command that this key is valid for. This should include the full path to the executable, plus any arguments: /root/.ssh/authorized_keys command = \"/path/to/command arg1 arg2\" ssh-rsa ... Save and close the file when you are finished. Now, open the sshd_config file with root or sudo privileges: - sudo nano /etc/ssh/sshd_config Find the directive PermitRootLogin , and change the value to forced-commands-only . This will only allow SSH key logins to use root when a command has been specified for the key: /etc/ssh/sshd_config PermitRootLogin forced-commands-only Save and close the file. Restart the SSH daemon to implement your changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart","title":"Allowing Root Access for Specific Commands"},{"location":"linux/servers/SSH%20Essentials/#forwarding-x-application-displays-to-the-client","text":"The SSH daemon can be configured to automatically forward the display of X applications on the server to the client machine. For this to function correctly, the client must have an X windows system configured and enabled. To enable this functionality, log in to your remote server and edit the sshd_config file as root or with sudo privileges: - sudo nano /etc/ssh/sshd_config Search for the X11Forwarding directive. If it is commented out, uncomment it. Create it if necessary and set the value to \u201cyes\u201d: /etc/ssh/sshd_config X11Forwarding yes Save and close the file. Restart your SSH daemon to implement these changes. On Ubuntu/Debian: - sudo service ssh restart On CentOS/Fedora: - sudo service sshd restart To connect to the server and forward an application\u2019s display, you have to pass the -X option from the client upon connection: - ssh -X username@remote_host Graphical applications started on the server through this session should be displayed on the local computer. The performance might be a bit slow, but it is very helpful in a pinch.","title":"Forwarding X Application Displays to the Client"},{"location":"linux/servers/SSH%20Essentials/#client-side-configuration-options","text":"In the next section, we\u2019ll focus on some adjustments that you can make on the client side of the connection.","title":"Client-Side Configuration Options"},{"location":"linux/servers/SSH%20Essentials/#defining-server-specific-connection-information","text":"On your local computer, you can define individual configurations for some or all of the servers you connect to. These can be stored in the ~/.ssh/config file, which is read by your SSH client each time it is called. Create or open this file in your text editor on your local computer: - nano ~/.ssh/config Inside, you can define individual configuration options by introducing each with a Host keyword, followed by an alias. Beneath this and indented, you can define any of the directives found in the ssh_config man page: - man ssh_config An example configuration would be: ~/.ssh/config Host testhost HostName your_domain Port 4444 User demo You could then connect to your_domain on port 4444 using the username demo by simply typing: - ssh testhost You can also use wildcards to match more than one host. Keep in mind that later matches can override earlier ones. Because of this, you should put your most general matches at the top. For instance, you could default all connections to not allow X forwarding, with an override for your_domain by having this in your file: ~/.ssh/config Host * ForwardX11 no Host testhost HostName your_domain ForwardX11 yes Port 4444 User demo Save and close the file when you are finished.","title":"Defining Server-Specific Connection Information"},{"location":"linux/servers/SSH%20Essentials/#keeping-connections-alive-to-avoid-timeout","text":"If you find yourself being disconnected from SSH sessions before you are ready, it is possible that your connection is timing out. You can configure your client to send a packet to the server every so often in order to avoid this situation: On your local computer, you can configure this for every connection by editing your ~/.ssh/config file. Open it now: - nano ~/.ssh/config If one does not already exist, at the top of the file, define a section that will match all hosts. Set the ServerAliveInterval to \u201c120\u201d to send a packet to the server every two minutes. This should be enough to notify the server not to close the connection: ~/.ssh/config Host * ServerAliveInterval 120 Save and close the file when you are finished.","title":"Keeping Connections Alive to Avoid Timeout"},{"location":"linux/servers/SSH%20Essentials/#disabling-host-checking","text":"By default, whenever you connect to a new server, you will be shown the remote SSH daemon\u2019s host key fingerprint. The authenticity of host '111.111.11.111 (111.111.11.111)' can't be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes This is configured so that you can verify the authenticity of the host you are attempting to connect to and spot instances where a malicious user may be trying to masquerade as the remote host. In certain circumstances, you may wish to disable this feature. Note : This can be a big security risk, so make sure you know what you are doing if you set your system up like this. To make the change, the open the ~/.ssh/config file on your local computer: - nano ~/.ssh/config If one does not already exist, at the top of the file, define a section that will match all hosts. Set the StrictHostKeyChecking directive to no to add new hosts automatically to the known_hosts file. Set the UserKnownHostsFile to /dev/null to not warn on new or changed hosts: ~/.ssh/config Host * StrictHostKeyChecking no UserKnownHostsFile /dev/null You can enable the checking on a case-by-case basis by reversing those options for other hosts. The default for StrictHostKeyChecking is ask : ~/.ssh/config Host * StrictHostKeyChecking no UserKnownHostsFile /dev/null Host testhost HostName your_domain StrictHostKeyChecking ask UserKnownHostsFile /home/demo/.ssh/known_hosts","title":"Disabling Host Checking"},{"location":"linux/servers/SSH%20Essentials/#multiplexing-ssh-over-a-single-tcp-connection","text":"There are situations where establishing a new TCP connection can take longer than you would like. If you are making multiple connections to the same machine, you can take advantage of multiplexing. SSH multiplexing re-uses the same TCP connection for multiple SSH sessions. This removes some of the work necessary to establish a new session, possibly speeding things up. Limiting the number of connections may also be helpful for other reasons. To set up multiplexing, you can manually set up the connections, or you can configure your client to automatically use multiplexing when available. We will demonstrate the second option here. To configure multiplexing, edit your SSH client\u2019s configuration file on your local machine: - nano ~/.ssh/config If you do not already have a wildcard host definition at the top of the file, add one now (as Host * ). We will be setting the ControlMaster , ControlPath , and ControlPersist values to establish our multiplexing configuration. The ControlMaster should be set to \u201cauto\u201d in able to automatically allow multiplexing if possible. The ControlPath will establish the path to control socket. The first session will create this socket and subsequent sessions will be able to find it because it is labeled by username, host, and port. Setting the ControlPersist option to 1 will allow the initial master connection to be backgrounded. The 1 specifies that the TCP connection should automatically terminate one second after the last SSH session is closed: /.ssh/config Host * ControlMaster auto ControlPath ~/.ssh/multiplex/%r@%h:%p ControlPersist 1 Save and close the file when you are finished. Now, we need to actually create the directory we specified in the control path: - mkdir ~/.ssh/multiplex Now, any sessions that are established with the same machine will attempt to use the existing socket and TCP connection. When the last session exists, the connection will be torn down after one second. If for some reason you need to bypass the multiplexing configuration temporarily, you can do so by passing the -S flag with none : - ssh -S none username@remote_host","title":"Multiplexing SSH Over a Single TCP Connection"},{"location":"linux/servers/SSH%20Essentials/#setting-up-ssh-tunnels","text":"Tunneling other traffic through a secure SSH tunnel is an excellent way to work around restrictive firewall settings. It is also a great way to encrypt otherwise unencrypted network traffic.","title":"Setting Up SSH Tunnels"},{"location":"linux/servers/SSH%20Essentials/#configuring-local-tunneling-to-a-server","text":"SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. A local connection is a way of accessing a network location from your local computer through your remote host. First, an SSH connection is established to your remote host. On the remote server, a connection is made to an external (or internal) network address provided by the user and traffic to this location is tunneled to your local computer on a specified port. This is often used to tunnel to a less restricted networking environment by bypassing a firewall. Another common use is to access a \u201clocalhost-only\u201d web interface from a remote location. To establish a local tunnel to your remote server, you need to use the -L parameter when connecting and you must supply three pieces of additional information: The local port where you wish to access the tunneled connection. The host that you want your remote host to connect to. The port that you want your remote host to connect on. These are given, in the order above (separated by colons), as arguments to the -L flag. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to connect to your_domain on port 80 on your remote host, making the connection available on your local machine on port 8888, you could type: - ssh -f -N -L 8888 :your_domain:80 username@remote_host Now, if you point your local web browser to 127.0.0.1:8888 , you should see whatever content is at your_domain on port 80 . A more general guide to the syntax is: - ssh -L your_port:site_or_IP_to_access:site_port username@host Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -L 8888:your_domain:80 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C .","title":"Configuring Local Tunneling to a Server"},{"location":"linux/servers/SSH%20Essentials/#configuring-remote-tunneling-to-a-server","text":"SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. In a remote tunnel, a connection is made to a remote host. During the creation of the tunnel, a remote port is specified. This port, on the remote host, will then be tunneled to a host and port combination that is connected to from the local computer. This will allow the remote computer to access a host through your local computer. This can be useful if you need to allow access to an internal network that is locked down to external connections. If the firewall allows connections out of the network, this will allow you to connect out to a remote machine and tunnel traffic from that machine to a location on the internal network. To establish a remote tunnel to your remote server, you need to use the -R parameter when connecting and you must supply three pieces of additional information: The port where the remote host can access the tunneled connection. The host that you want your local computer to connect to. The port that you want your local computer to connect to. These are given, in the order above (separated by colons), as arguments to the -R flag. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to connect to your_domain on port 80 on our local computer, making the connection available on our remote host on port 8888 , you could type: - ssh -f -N -R 8888 :your_domain:80 username@remote_host Now, on the remote host, opening a web browser to 127.0.0.1:8888 would allow you to see whatever content is at your_domain on port 80 . A more general guide to the syntax is: - ssh -R remote_port:site_or_IP_to_access:site_port username@host Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -R 8888:your_domain:80 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column, of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C .","title":"Configuring Remote Tunneling to a Server"},{"location":"linux/servers/SSH%20Essentials/#configuring-dynamic-tunneling-to-a-remote-server","text":"SSH connections can be used to tunnel traffic from ports on the local host to ports on a remote host. A dynamic tunnel is similar to a local tunnel in that it allows the local computer to connect to other resources through a remote host. A dynamic tunnel does this by simply specifying a single local port. Applications that wish to take advantage of this port for tunneling must be able to communicate using the SOCKS protocol so that the packets can be correctly redirected at the other side of the tunnel. Traffic that is passed to this local port will be sent to the remote host. From there, the SOCKS protocol will be interpreted to establish a connection to the desired end location. This set up allows a SOCKS-capable application to connect to any number of locations through the remote server, without multiple static tunnels. To establish the connection, we will pass the -D flag along with the local port where we wish to access the tunnel. We will also use the -f flag, which causes SSH to go into the background before executing and the -N flag, which does not open a shell or execute a program on the remote side. For instance, to establish a tunnel on port 7777 , you can type: - ssh -f -N -D 7777 username@remote_host From here, you can start pointing your SOCKS-aware application (like a web browser), to the port you selected. The application will send its information into a socket associated with the port. The method of directing traffic to the SOCKS port will differ depending on application. For instance, in Firefox, the general location is Preferences > Advanced > Settings > Manual proxy configurations. In Chrome, you can start the application with the --proxy-server= flag set. You will want to use the localhost interface and the port you forwarded. Since the connection is in the background, you will have to find its PID to kill it. You can do so by searching for the port you forwarded: - ps aux | grep 8888 Output 1001 5965 0.0 0.0 48168 1136 ? Ss 12:28 0:00 ssh -f -N -D 7777 username@remote_host 1001 6113 0.0 0.0 13648 952 pts/2 S+ 12:37 0:00 grep --colour=auto 8888 You can then kill the process by targeting the PID, which is the number in the second column, of the line that matches your SSH command: - kill 5965 Another option is to start the connection without the -f flag. This will keep the connection in the foreground, preventing you from using the terminal window for the duration of the forwarding. The benefit of this is that you can easily kill the tunnel by typing CTRL-C .","title":"Configuring Dynamic Tunneling to a Remote Server"},{"location":"linux/servers/SSH%20Essentials/#using-ssh-escape-codes-to-control-connections","text":"Even after establishing an SSH session, it is possible to exercise control over the connection from within the terminal. We can do this with something called SSH escape codes, which allow us to interact with our local SSH software from within a session.","title":"Using SSH Escape Codes to Control Connections"},{"location":"linux/servers/SSH%20Essentials/#forcing-a-disconnect-from-the-client-side-how-to-exit-out-of-a-stuck-or-frozen-session","text":"One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within. These commands can be executed starting with the ~ control character within an SSH session. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One of the most useful controls is the ability to initiate a disconnect from the client. SSH connections are typically closed by the server, but this can be a problem if the server is suffering from issues or if the connection has been broken. By using a client-side disconnect, the connection can be cleanly closed from the client. To close a connection from the client, use the control character ( ~ ), with a dot. If your connection is having problems, you will likely be in what appears to be a stuck terminal session. Type the commands despite the lack of feedback to perform a client-side disconnect: - [ ENTER ] - ~. The connection should immediately close, returning you to your local shell session.","title":"Forcing a Disconnect from the Client-Side (How to Exit Out of a Stuck or Frozen Session)"},{"location":"linux/servers/SSH%20Essentials/#placing-an-ssh-session-into-the-background","text":"One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within the connection. These commands can be executed starting with the ~ control character from within an SSH connection. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One capability that this provides is to put an SSH session into the background. To do this, we need to supply the control character ( ~ ) and then execute the conventional keyboard shortcut to background a task (CTRL-z): - [ ENTER ] - ~ [ CTRL-z ] This will place the connection into the background, returning you to your local shell session. To return to your SSH session, you can use the conventional job control mechanisms. You can immediately re-activate your most recent backgrounded task by typing: - fg If you have multiple backgrounded tasks, you can see the available jobs by typing: - jobs Output [1]+ Stopped ssh username@some_host [2] Stopped ssh username@another_host You can then bring any of the tasks to the foreground by using the index in the first column with a percentage sign: - fg %2","title":"Placing an SSH Session into the Background"},{"location":"linux/servers/SSH%20Essentials/#changing-port-forwarding-options-on-an-existing-ssh-connection","text":"One of the most useful feature of OpenSSH that goes largely unnoticed is the ability to control certain aspects of the session from within the connection. These commands can be executed starting with the ~ control character from within an SSH connection. Control commands will only be interpreted if they are the first thing that is typed after a newline, so always press ENTER one or two times prior to using one. One thing that this allows is for a user to alter the port forwarding configuration after the connection has already been established. This allows you to create or tear down port forwarding rules on-the-fly. These capabilities are part of the SSH command line interface, which can be accessed during a session by using the control character ( ~ ) and \u201cC\u201d: - [ ENTER ] - ~C ssh> You will be given an SSH command prompt, which has a very limited set of valid commands. To see the available options, you can type -h from this prompt. If nothing is returned, you may have to increase the verbosity of your SSH output by using ~v a few times: - [ ENTER ] - ~v - ~v - ~v - ~C - -h Commands: -L[bind_address:]port:host:hostport Request local forward -R[bind_address:]port:host:hostport Request remote forward -D[bind_address:]port Request dynamic forward -KL[bind_address:]port Cancel local forward -KR[bind_address:]port Cancel remote forward -KD[bind_address:]port Cancel dynamic forward As you can see, you can easily implement any of the forwarding options using the appropriate options (see the forwarding section for more information). You can also destroy a tunnel with the associated \u201ckill\u201d command specified with a \u201cK\u201d before the forwarding type letter. For instance, to kill a local forward ( -L ), you could use the -KL command. You will only need to provide the port for this. So, to set up a local port forward, you may type: - [ ENTER ] - ~C - -L 8888 :127.0.0.1:80 Port 8888 on your local computer will now be able to communicate with the web server on the host you are connecting to. When you are finished, you can tear down that forward by typing: - [ ENTER ] - ~C - -KL 8888","title":"Changing Port Forwarding Options on an Existing SSH Connection"},{"location":"linux/servers/SSH%20Essentials/#conclusion","text":"The above instructions should cover the majority of the information most users will need about SSH on a day-to-day basis. If you have other tips or wish to share your favorite configurations and methods, feel free to use the comments below. Justin Ellingwood Senior Technical Writer @DigitalOcean Source","title":"Conclusion"},{"location":"linux/servers/VerneMQ%20Tracing/","text":"VerneMQ Tracing 1. Run VerneMQ. docker-compose.yaml : version : '3.3' services : vernemq : image : vernemq/vernemq ports : - '1883:1883' environment : DOCKER_VERNEMQ_ALLOW_ANONYMOUS : 'on' DOCKER_VERNEMQ_ACCEPT_EULA : 'yes' OR docker run -p 1883 :1883 -e \"DOCKER_VERNEMQ_ACCEPT_EULA=yes\" --name vernemq1 -d vernemq/vernemq 2. Connect to container console docker exec -it <container name or id> Run docker ps to check container name or id. 3. Check active sessions vmq-admin session show Output: +--------------------+-----------+------------+------------+-----------+-------------+ | client_id | is_online | mountpoint | peer_host | peer_port | user | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_pub | true | | 172 .26.0.1 | 45864 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_sub | true | | 172 .26.0.1 | 45448 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_health | true | | 172 .26.0.1 | 45436 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+ 4. Trace vmq-admin trace client client-id = test-client_pub Sources: Inspecting sessions Tracing","title":"VerneMQ Tracing"},{"location":"linux/servers/VerneMQ%20Tracing/#1-run-vernemq","text":"docker-compose.yaml : version : '3.3' services : vernemq : image : vernemq/vernemq ports : - '1883:1883' environment : DOCKER_VERNEMQ_ALLOW_ANONYMOUS : 'on' DOCKER_VERNEMQ_ACCEPT_EULA : 'yes' OR docker run -p 1883 :1883 -e \"DOCKER_VERNEMQ_ACCEPT_EULA=yes\" --name vernemq1 -d vernemq/vernemq","title":"1. Run VerneMQ."},{"location":"linux/servers/VerneMQ%20Tracing/#2-connect-to-container-console","text":"docker exec -it <container name or id> Run docker ps to check container name or id.","title":"2. Connect to container console"},{"location":"linux/servers/VerneMQ%20Tracing/#3-check-active-sessions","text":"vmq-admin session show Output: +--------------------+-----------+------------+------------+-----------+-------------+ | client_id | is_online | mountpoint | peer_host | peer_port | user | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_pub | true | | 172 .26.0.1 | 45864 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_sub | true | | 172 .26.0.1 | 45448 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+ | test-client_health | true | | 172 .26.0.1 | 45436 | test-client | +--------------------+-----------+------------+------------+-----------+-------------+","title":"3. Check active sessions"},{"location":"linux/servers/VerneMQ%20Tracing/#4-trace","text":"vmq-admin trace client client-id = test-client_pub Sources: Inspecting sessions Tracing","title":"4. Trace"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/","text":"Wi-Fi on Ubuntu Server In this tutorial, we are going to learn how to connect to Wi-Fi network from the command line on Ubuntu 18.04/20.04 server and desktop using wpa_supplicant . In a modern home wireless network, communications are protected with WPA-PSK (pre-shared key) as opposed to WPA-Enterprise, which is designed for enterprise networks. WPA-PSK is also known as WPA-Personal. wpa_supplicant is an implementation of the WPA supplicant component. A supplicant in wireless LAN is client software installed on end-user\u2019s computer that needs to be authenticated in order to join a network. Step 1: Find The Name of Your Wireless Interface And Wireless Network Run iwconfig command to find the name of your wireless interface. iwconfig wlan0 used to be a common name for wireless network interface on Linux systems without Systemd. Because Ubuntu uses Systemd, you are going to find that your wireless network interface is named something like wlp4s0 . You can also see that it\u2019s not associated with any access point right now. If your wireless interface isn\u2019t shown, perhaps you need to bring it up with the following command. sudo ifconfig wlp4s0 up Then find your wireless network name by scanning nearby networks with the command below. Replace wlp4s0 with your own wireless interface name. ESSID is the network name identifier. sudo iwlist wlp4s0 scan | grep ESSID Step 2: Connect to Wi-Fi Network With WPA_Supplicant Now install wpa_supplicant on Ubuntu 18.04/20.04 from the default software repository. sudo apt install wpasupplicant We need to create a file named wpa_supplicant.conf using the wpa_passphrase utility. wpa_supplicant.conf is the configuration file describing all networks that the user wants the computer to connect to. Run the following command to create this file. Replace ESSID and Wi-Fi passphrase with your own. wpa_passphrase your-ESSID your-wifi-passphrase | sudo tee /etc/wpa_supplicant.conf Note that in the above screenshot, I wrapped my ESSID with double-quotes, because my ESSID contains whitespace. The output of wpa_passphrase command will be piped to tee , and then written to the /etc/wpa_supplicant.conf file. Now use the following command to connect your wireless card to wireless access point. sudo wpa \\_ supplicant -c /etc/wpa \\_ supplicant.conf -i wlp4s0 The following output indicates your wireless card is successfully connected to an access point. Successfully initialized wpa_supplicant wlp4s0: SME: Trying to authenticate with c5:4a:21:53:ac:eb (SSID='LinuxBabe.Com Network' freq=2437 MHz) wlp4s0: Trying to associate with c5:4a:21:53:ac:eb (SSID='LinuxBabe.Com Network' freq=2437 MHz) **wlp4s0: Associated with c5:4a:21:53:ac:eb** wlp4s0: CTRL-EVENT-SUBNET-STATUS-UPDATE status=0 wlp4s0: WPA: Key negotiation completed with c5:4a:21:53:ac:eb \\[PTK=CCMP GTK=CCMP\\] wlp4s0: CTRL-EVENT-CONNECTED - **Connection to c5:4a:21:53:ac:eb completed** \\[id=0 id_str=\\] Note that if you are using Ubuntu desktop edition, then you need to stop Network Manager with the following command, otherwise it will cause a connection problem when using wpa_supplicant . sudo systemctl stop NetworkManager And disable NetworkManager auto-start at boot time by executing the following command. sudo systemctl disable NetworkManager-wait-online NetworkManager-dispatcher NetworkManager By default, wpa_supplicant runs in the foreground. If the connection is completed, then open up another terminal window and run iwconfig You can see that the wireless interface is now associated with an access point. You can press CTRL+C to stop the current wpa_supplicant process and run it in the background by adding the -B flag. sudo wpa_supplicant -B -c /etc/wpa_supplicant.conf -i wlp4s0 Although we\u2019re authenticated and connected to a wireless network, we don\u2019t have an IP address yet. To obtain a private IP address from DHCP server, use the following command: sudo dhclient wlp4s0 Now your wireless interface has a private IP address, which can be shown with: ip addr show wlp4s0 Now you can access the Internet. To release the private IP address, run sudo dhclient wlp4s0 -r Connecting to Hidden Wireless Network If your wireless router doesn\u2019t broadcast ESSID, then you need to add the following line in /etc/wpa_supplicant.conf file. scan_ssid = 1 Like below: network={ ssid=\"LinuxBabe.Com Network\" #psk=\"12345qwert\" psk=68add4c5fee7dc3d0dac810f89b805d6d147c01e281f07f475a3e0195 scan_ssid=1 } Step 3: Auto-Connect At Boot Time To automatically connect to wireless network at boot time, we need to edit the wpa_supplicant.service file. It\u2019s a good idea to copy the file from /lib/systemd/system/ directory to /etc/systemd/system/ directory, then edit the file content, because we don\u2019t want a newer version of wpa_supplicant to override our modifications. sudo cp /lib/systemd/system/wpa \\_ supplicant.service /etc/systemd/system/wpa \\_ supplicant.service Edit the file with a command-line text editor, such as Nano. sudo nano /etc/systemd/system/wpa_supplicant.service Find the following line. ExecStart=/sbin/wpa\\_supplicant -u -s -O /run/wpa\\_supplicant Change it to the following. Here we added the configuration file and the wireless interface name to the ExecStart command. ExecStart=/sbin/wpa\\_supplicant -u -s -c /etc/wpa\\_supplicant.conf -i wlp4s0 It\u2019s recommended to always try to restart wpa_supplicant when failure is detected. Add the following right below the ExecStart line. Restart=always If you can find the following line in this file, comment it out (Add the # character at the beginning of the line). Alias=dbus-fi.w1.wpa_supplicant1.service Save and close the file. (To save a file in Nano text editor, press Ctrl+O , then press Enter to confirm. To exit, press Ctrl+X .) Then reload systemd. sudo systemctl daemon-reload Enable wpa_supplicant service to start at boot time. sudo systemctl enable wpa_supplicant.service We also need to start dhclient at boot time to obtain a private IP address from DHCP server. This can be achieved by creating a systemd service unit for dhclient . sudo nano /etc/systemd/system/dhclient.service Put the following text into the file. \\[Unit\\] Description= DHCP Client Before=network.target After=wpa_supplicant.service \\[Service\\] Type=forking ExecStart=/sbin/dhclient wlp4s0 -v ExecStop=/sbin/dhclient wlp4s0 -r Restart=always \\[Install\\] WantedBy=multi-user.target Save and close the file. Then enable this service. sudo systemctl enable dhclient.service How to Obtain a Static IP Address If you want to obtain a static IP address, then you need to disable dhclient.service . sudo systemctl disable dhclient.service We need to use netplan to configure static IP address on Ubuntu 18.04/20.04. Create a configuration file under /etc/netplan/ . sudo nano /etc/netplan/10-wifi.yaml Add the following lines to this file. Replace 192.168.0.102 with your preferred IP address. Please be careful about the indentation. An extra space would make the configuration invalid. network: ethernets: wlp4s0: dhcp4: no addresses: \\[192.168.0.102/24\\] gateway4: 192.168.0.1 version: 2 Save and close the file. Then apply the configurations. sudo netplan apply You can also turn on the --debug option if it doesn\u2019t work as expected. sudo netplan --debug apply If there are other .yaml files under /etc/netplan/ directory, then netplan will automatically merge configurations from different files. netplan uses systemd-networkd as the backend network renderer. It\u2019s recommended to configure the wpa_supplicant.service runs before systemd-networkd.service , so the system will first associate with a Wi-Fi access point, then obtain a private IP address. sudo nano /etc/systemd/system/wpa_supplicant.service Find the following line. Before=network.target Change it to: Before=network.target systemd-networkd.service Save and close the file. Another way to obtain a static IP address is by logging into your router\u2019s management interface and assigning a static IP to the MAC address of your wireless card, if your router supports this feature. Using a Hostname to Access Services on Ubuntu Actually, you don\u2019t have to obtain a static IP address for your Ubuntu box. Ubuntu can use mDNS (Multicast DNS) to announce its hostname to the local network and clients can access services on your Ubuntu box with that hostname. This hostname can always be resolved to the IP address of your Ubuntu box, even if the IP address changes. In order to use mDNS, you need to install avahi-daemon, which is an open-source implementation of mDNS/DNS-SD. sudo apt install avahi-daemon Start the service. sudo systemctl start avahi-daemon Enable auto-start at boot time. sudo systemctl enable avahi-daemon Avahi-daemon listens on UDP 5353, so you need to open this port in the firewall. If you use UFW, then run the following command. sudo ufw allow 5353 /udp Then you should set a unique hostname for your Ubuntu box with the hostnamectl command. Replace ubuntubox with your preferred hostname, which should not be already taken by other devices in the local network. sudo hostnamectl set-hostname ubuntubox Now restart avahi-daemon. sudo systemctl restart avahi-daemon If you check the status with systemctl status avahi-daemon you can see the mDNS hostname, which ends with the .local domain. On the client computer, you also need to install an mDNS/DNS-SD software. Linux users should install avahi-daemon . Windows users need to enable the Bonjour service by either installing the Bonjour print service or installing iTunes . On macOS, Bonjour is pre-installed. Now you can access services by using the ubuntubox.local hostname, eliminating the need to check and type IP address. Unblock Wifi on Raspberry Pi The Ubuntu ARM OS for Raspberry Pi blocks wireless interface by default. You need to unblock it with: sudo rfkill unblock wifi To unblock it at boot time, create a systemd service unit. sudo nano /etc/systemd/system/unblock-wifi.service Add the following lines to it. \\[Unit\\] Description=RFKill Unblock WiFi Devices Requires=wpa_supplicant.service After=wpa_supplicant.service \\[Service\\] Type=oneshot ExecStart=/usr/sbin/rfkill unblock wifi ExecStop= RemainAfterExit=yes \\[Install\\] WantedBy=multi-user.target Save and close the file. Enable auto-start at boot time. sudo systemctl enable unblock-wifi I found that the unblock-wifi.service should run after the wpa_supplicant.service starts, otherwise it can\u2019t unblock wifi. Note that if you have installed a desktop environment, there\u2019s probably a network manager running that can interfere with the connection. You need to disable it. For example, I use the lightweight LXQT desktop environment on Raspberry Pi ( sudo apt install lubuntu-desktop ) and need to disable connman.service and NetworkManager.service. sudo systemctl disable connman.service NetworkManager.service Multiple Wi-Fi Networks The /etc/wpa_supplicant.conf configuration file can include multiple Wi-Fi networks. wpa_supplicant will automatically select the best network based on the order of network blocks in the configuration file, network security level, and signal strength. To add a second Wi-Fi network, run wpa_passphrase your-ESSID your-wifi-passphrase | sudo tee -a /etc/wpa_supplicant.conf Note that you need to use the -a option with the tee command, which will append, instead of deleting the original content, the new Wifi-network to the file. Wi-Fi Security Do not use WPA2 TKIP or WPA2 TKIP+AES as the encryption method in your Wi-Fi router. TKIP is not considered secure anymore. You can use WPA2-AES as the encryption method. Wrapping Up I hope this tutorial helped you connect Ubuntu 18.04/20.04 to Wi-Fi network from the command line with WPA Supplicant. As always, if you found this post useful, then subscribe to our free newsletter to get more tips and tricks \ud83d\ude42 Source","title":"Wi Fi on Ubuntu Server"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#step-1-find-the-name-of-your-wireless-interface-and-wireless-network","text":"Run iwconfig command to find the name of your wireless interface. iwconfig wlan0 used to be a common name for wireless network interface on Linux systems without Systemd. Because Ubuntu uses Systemd, you are going to find that your wireless network interface is named something like wlp4s0 . You can also see that it\u2019s not associated with any access point right now. If your wireless interface isn\u2019t shown, perhaps you need to bring it up with the following command. sudo ifconfig wlp4s0 up Then find your wireless network name by scanning nearby networks with the command below. Replace wlp4s0 with your own wireless interface name. ESSID is the network name identifier. sudo iwlist wlp4s0 scan | grep ESSID","title":"Step 1: Find The Name of Your Wireless Interface And Wireless Network"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#step-2-connect-to-wi-fi-network-with-wpa_supplicant","text":"Now install wpa_supplicant on Ubuntu 18.04/20.04 from the default software repository. sudo apt install wpasupplicant We need to create a file named wpa_supplicant.conf using the wpa_passphrase utility. wpa_supplicant.conf is the configuration file describing all networks that the user wants the computer to connect to. Run the following command to create this file. Replace ESSID and Wi-Fi passphrase with your own. wpa_passphrase your-ESSID your-wifi-passphrase | sudo tee /etc/wpa_supplicant.conf Note that in the above screenshot, I wrapped my ESSID with double-quotes, because my ESSID contains whitespace. The output of wpa_passphrase command will be piped to tee , and then written to the /etc/wpa_supplicant.conf file. Now use the following command to connect your wireless card to wireless access point. sudo wpa \\_ supplicant -c /etc/wpa \\_ supplicant.conf -i wlp4s0 The following output indicates your wireless card is successfully connected to an access point. Successfully initialized wpa_supplicant wlp4s0: SME: Trying to authenticate with c5:4a:21:53:ac:eb (SSID='LinuxBabe.Com Network' freq=2437 MHz) wlp4s0: Trying to associate with c5:4a:21:53:ac:eb (SSID='LinuxBabe.Com Network' freq=2437 MHz) **wlp4s0: Associated with c5:4a:21:53:ac:eb** wlp4s0: CTRL-EVENT-SUBNET-STATUS-UPDATE status=0 wlp4s0: WPA: Key negotiation completed with c5:4a:21:53:ac:eb \\[PTK=CCMP GTK=CCMP\\] wlp4s0: CTRL-EVENT-CONNECTED - **Connection to c5:4a:21:53:ac:eb completed** \\[id=0 id_str=\\] Note that if you are using Ubuntu desktop edition, then you need to stop Network Manager with the following command, otherwise it will cause a connection problem when using wpa_supplicant . sudo systemctl stop NetworkManager And disable NetworkManager auto-start at boot time by executing the following command. sudo systemctl disable NetworkManager-wait-online NetworkManager-dispatcher NetworkManager By default, wpa_supplicant runs in the foreground. If the connection is completed, then open up another terminal window and run iwconfig You can see that the wireless interface is now associated with an access point. You can press CTRL+C to stop the current wpa_supplicant process and run it in the background by adding the -B flag. sudo wpa_supplicant -B -c /etc/wpa_supplicant.conf -i wlp4s0 Although we\u2019re authenticated and connected to a wireless network, we don\u2019t have an IP address yet. To obtain a private IP address from DHCP server, use the following command: sudo dhclient wlp4s0 Now your wireless interface has a private IP address, which can be shown with: ip addr show wlp4s0 Now you can access the Internet. To release the private IP address, run sudo dhclient wlp4s0 -r","title":"Step 2: Connect to Wi-Fi Network With WPA_Supplicant"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#connecting-to-hidden-wireless-network","text":"If your wireless router doesn\u2019t broadcast ESSID, then you need to add the following line in /etc/wpa_supplicant.conf file. scan_ssid = 1 Like below: network={ ssid=\"LinuxBabe.Com Network\" #psk=\"12345qwert\" psk=68add4c5fee7dc3d0dac810f89b805d6d147c01e281f07f475a3e0195 scan_ssid=1 }","title":"Connecting to Hidden Wireless Network"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#step-3-auto-connect-at-boot-time","text":"To automatically connect to wireless network at boot time, we need to edit the wpa_supplicant.service file. It\u2019s a good idea to copy the file from /lib/systemd/system/ directory to /etc/systemd/system/ directory, then edit the file content, because we don\u2019t want a newer version of wpa_supplicant to override our modifications. sudo cp /lib/systemd/system/wpa \\_ supplicant.service /etc/systemd/system/wpa \\_ supplicant.service Edit the file with a command-line text editor, such as Nano. sudo nano /etc/systemd/system/wpa_supplicant.service Find the following line. ExecStart=/sbin/wpa\\_supplicant -u -s -O /run/wpa\\_supplicant Change it to the following. Here we added the configuration file and the wireless interface name to the ExecStart command. ExecStart=/sbin/wpa\\_supplicant -u -s -c /etc/wpa\\_supplicant.conf -i wlp4s0 It\u2019s recommended to always try to restart wpa_supplicant when failure is detected. Add the following right below the ExecStart line. Restart=always If you can find the following line in this file, comment it out (Add the # character at the beginning of the line). Alias=dbus-fi.w1.wpa_supplicant1.service Save and close the file. (To save a file in Nano text editor, press Ctrl+O , then press Enter to confirm. To exit, press Ctrl+X .) Then reload systemd. sudo systemctl daemon-reload Enable wpa_supplicant service to start at boot time. sudo systemctl enable wpa_supplicant.service We also need to start dhclient at boot time to obtain a private IP address from DHCP server. This can be achieved by creating a systemd service unit for dhclient . sudo nano /etc/systemd/system/dhclient.service Put the following text into the file. \\[Unit\\] Description= DHCP Client Before=network.target After=wpa_supplicant.service \\[Service\\] Type=forking ExecStart=/sbin/dhclient wlp4s0 -v ExecStop=/sbin/dhclient wlp4s0 -r Restart=always \\[Install\\] WantedBy=multi-user.target Save and close the file. Then enable this service. sudo systemctl enable dhclient.service","title":"Step 3: Auto-Connect At Boot Time"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#how-to-obtain-a-static-ip-address","text":"If you want to obtain a static IP address, then you need to disable dhclient.service . sudo systemctl disable dhclient.service We need to use netplan to configure static IP address on Ubuntu 18.04/20.04. Create a configuration file under /etc/netplan/ . sudo nano /etc/netplan/10-wifi.yaml Add the following lines to this file. Replace 192.168.0.102 with your preferred IP address. Please be careful about the indentation. An extra space would make the configuration invalid. network: ethernets: wlp4s0: dhcp4: no addresses: \\[192.168.0.102/24\\] gateway4: 192.168.0.1 version: 2 Save and close the file. Then apply the configurations. sudo netplan apply You can also turn on the --debug option if it doesn\u2019t work as expected. sudo netplan --debug apply If there are other .yaml files under /etc/netplan/ directory, then netplan will automatically merge configurations from different files. netplan uses systemd-networkd as the backend network renderer. It\u2019s recommended to configure the wpa_supplicant.service runs before systemd-networkd.service , so the system will first associate with a Wi-Fi access point, then obtain a private IP address. sudo nano /etc/systemd/system/wpa_supplicant.service Find the following line. Before=network.target Change it to: Before=network.target systemd-networkd.service Save and close the file. Another way to obtain a static IP address is by logging into your router\u2019s management interface and assigning a static IP to the MAC address of your wireless card, if your router supports this feature.","title":"How to Obtain a Static IP Address"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#using-a-hostname-to-access-services-on-ubuntu","text":"Actually, you don\u2019t have to obtain a static IP address for your Ubuntu box. Ubuntu can use mDNS (Multicast DNS) to announce its hostname to the local network and clients can access services on your Ubuntu box with that hostname. This hostname can always be resolved to the IP address of your Ubuntu box, even if the IP address changes. In order to use mDNS, you need to install avahi-daemon, which is an open-source implementation of mDNS/DNS-SD. sudo apt install avahi-daemon Start the service. sudo systemctl start avahi-daemon Enable auto-start at boot time. sudo systemctl enable avahi-daemon Avahi-daemon listens on UDP 5353, so you need to open this port in the firewall. If you use UFW, then run the following command. sudo ufw allow 5353 /udp Then you should set a unique hostname for your Ubuntu box with the hostnamectl command. Replace ubuntubox with your preferred hostname, which should not be already taken by other devices in the local network. sudo hostnamectl set-hostname ubuntubox Now restart avahi-daemon. sudo systemctl restart avahi-daemon If you check the status with systemctl status avahi-daemon you can see the mDNS hostname, which ends with the .local domain. On the client computer, you also need to install an mDNS/DNS-SD software. Linux users should install avahi-daemon . Windows users need to enable the Bonjour service by either installing the Bonjour print service or installing iTunes . On macOS, Bonjour is pre-installed. Now you can access services by using the ubuntubox.local hostname, eliminating the need to check and type IP address.","title":"Using a Hostname to Access Services on Ubuntu"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#unblock-wifi-on-raspberry-pi","text":"The Ubuntu ARM OS for Raspberry Pi blocks wireless interface by default. You need to unblock it with: sudo rfkill unblock wifi To unblock it at boot time, create a systemd service unit. sudo nano /etc/systemd/system/unblock-wifi.service Add the following lines to it. \\[Unit\\] Description=RFKill Unblock WiFi Devices Requires=wpa_supplicant.service After=wpa_supplicant.service \\[Service\\] Type=oneshot ExecStart=/usr/sbin/rfkill unblock wifi ExecStop= RemainAfterExit=yes \\[Install\\] WantedBy=multi-user.target Save and close the file. Enable auto-start at boot time. sudo systemctl enable unblock-wifi I found that the unblock-wifi.service should run after the wpa_supplicant.service starts, otherwise it can\u2019t unblock wifi. Note that if you have installed a desktop environment, there\u2019s probably a network manager running that can interfere with the connection. You need to disable it. For example, I use the lightweight LXQT desktop environment on Raspberry Pi ( sudo apt install lubuntu-desktop ) and need to disable connman.service and NetworkManager.service. sudo systemctl disable connman.service NetworkManager.service","title":"Unblock Wifi on Raspberry Pi"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#multiple-wi-fi-networks","text":"The /etc/wpa_supplicant.conf configuration file can include multiple Wi-Fi networks. wpa_supplicant will automatically select the best network based on the order of network blocks in the configuration file, network security level, and signal strength. To add a second Wi-Fi network, run wpa_passphrase your-ESSID your-wifi-passphrase | sudo tee -a /etc/wpa_supplicant.conf Note that you need to use the -a option with the tee command, which will append, instead of deleting the original content, the new Wifi-network to the file.","title":"Multiple Wi-Fi Networks"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#wi-fi-security","text":"Do not use WPA2 TKIP or WPA2 TKIP+AES as the encryption method in your Wi-Fi router. TKIP is not considered secure anymore. You can use WPA2-AES as the encryption method.","title":"Wi-Fi Security"},{"location":"linux/servers/Wi-Fi%20on%20Ubuntu%20Server/#wrapping-up","text":"I hope this tutorial helped you connect Ubuntu 18.04/20.04 to Wi-Fi network from the command line with WPA Supplicant. As always, if you found this post useful, then subscribe to our free newsletter to get more tips and tricks \ud83d\ude42 Source","title":"Wrapping Up"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/","text":"Authentication mongo with docker-compose Authentication mongo with docker-compose By default there is no authentication in MongoDB. It means that it comes with empty authentication. So we should create users and roles manually. There are lots of ways to create MongoDB docker-compose with authentication. The most popular one of them is to write a bash script with user and roles then use it in docker-compose and another way is to create an init-mongodb.js file with users and roles and use it in docker-compose. But in this post, I will show you how you could create MongoDB docker-compose and then add users and roles manually. Lets start... Run MongoDB docker-compose without authentication First of all we should run MongoDB docker-compose without auth. Using docker-compose up -d we could run it. Connect MongoDB without auth inside container For doing that firstly we should run docker exec -it mongodb bash and enter inside the container. Then simply run mongo command to connect to mongodb. Create user and roles for our MongoDB Firstly we will create admin user with username root and password root in admin database. Then we need to create other user. Here I will create a demo user within demo database for our MongoDB: Now we are ready to run MongoDB with auth. Enable MongoDB auth in docker-compose In order to enable auth in MongoDB we will use --auth flag in docker-compose. After that we could use docker-compose up -d command again, to run MongoDB container. Connect MongoDB with defined authentication In this step we can connect our db with defined authentication. Firstly again we need to run docker exec -it mongodb bash command in order to enter inside the container. Now we are in so we can connect our db. Here I write 2 command one of them is to connect admin db and another one is to connect demo db. mongo -u root -p root --authenticationDatabase admin mongo -u demo -p demo12345 --authenticationDatabase demo Source","title":"Authentication mongo with docker compose"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#authentication-mongo-with-docker-compose","text":"By default there is no authentication in MongoDB. It means that it comes with empty authentication. So we should create users and roles manually. There are lots of ways to create MongoDB docker-compose with authentication. The most popular one of them is to write a bash script with user and roles then use it in docker-compose and another way is to create an init-mongodb.js file with users and roles and use it in docker-compose. But in this post, I will show you how you could create MongoDB docker-compose and then add users and roles manually. Lets start...","title":"Authentication mongo with docker-compose"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#run-mongodb-docker-compose-without-authentication","text":"First of all we should run MongoDB docker-compose without auth. Using docker-compose up -d we could run it.","title":"Run MongoDB docker-compose without authentication"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#connect-mongodb-without-auth-inside-container","text":"For doing that firstly we should run docker exec -it mongodb bash and enter inside the container. Then simply run mongo command to connect to mongodb.","title":"Connect MongoDB without auth inside container"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#create-user-and-roles-for-our-mongodb","text":"Firstly we will create admin user with username root and password root in admin database. Then we need to create other user. Here I will create a demo user within demo database for our MongoDB: Now we are ready to run MongoDB with auth.","title":"Create user and roles for our MongoDB"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#enable-mongodb-auth-in-docker-compose","text":"In order to enable auth in MongoDB we will use --auth flag in docker-compose. After that we could use docker-compose up -d command again, to run MongoDB container.","title":"Enable MongoDB auth in docker-compose"},{"location":"mongodb/Authentication%20mongo%20with%20docker-compose/#connect-mongodb-with-defined-authentication","text":"In this step we can connect our db with defined authentication. Firstly again we need to run docker exec -it mongodb bash command in order to enter inside the container. Now we are in so we can connect our db. Here I write 2 command one of them is to connect admin db and another one is to connect demo db. mongo -u root -p root --authenticationDatabase admin mongo -u demo -p demo12345 --authenticationDatabase demo Source","title":"Connect MongoDB with defined authentication"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/","text":"MongoDB Cheat Sheet MongoDB Cheat Sheet Show All Databases show dbs Show Current Database db Create Or Switch Database use acme Drop db.dropDatabase () Create Collection db.createCollection ( 'posts' ) Show Collections show collections Insert Row db.posts.insert ({ title: 'Post One' , body: 'Body of post one' , category: 'News' , tags: [ 'news' , 'events' ] , user: { name: 'John Doe' , status: 'author' } , date: Date () }) Insert Multiple Rows db.posts.insertMany ([ { title: 'Post Two' , body: 'Body of post two' , category: 'Technology' , date: Date () } , { title: 'Post Three' , body: 'Body of post three' , category: 'News' , date: Date () } , { title: 'Post Four' , body: 'Body of post three' , category: 'Entertainment' , date: Date () } ]) Get All Rows db.posts.find () Get All Rows Formatted db.find () .pretty () Find Rows db.posts.find ({ category: 'News' }) Sort Rows # asc db.posts.find () .sort ({ title: 1 }) .pretty () # desc db.posts.find () .sort ({ title: -1 }) .pretty () Count Rows db.posts.find () .count () db.posts.find ({ category: 'news' }) .count () Limit Rows db.posts.find () .limit ( 2 ) .pretty () Chaining db.posts.find () .limit ( 2 ) .sort ({ title: 1 }) .pretty () Foreach db.posts.find () .forEach ( function ( doc ) { print ( \"Blog Post: \" + doc.title ) }) Find One Row db.posts.findOne ({ category: 'News' }) Find Specific Fields db.posts.find ({ title: 'Post One' } , { title: 1 , author: 1 }) Update Row db.posts.update ({ title: 'Post Two' } , { title: 'Post Two' , body: 'New body for post 2' , date: Date () } , { upsert: true }) Update Specific Field db.posts.update ({ title: 'Post Two' } , { $set : { body: 'Body for post 2' , category: 'Technology' } }) Increment Field (\\$inc) db.posts.update ({ title: 'Post Two' } , { $inc : { likes: 5 } }) Rename Field db.posts.update ({ title: 'Post Two' } , { $rename : { likes: 'views' } }) Delete Row db.posts.remove ({ title: 'Post Four' }) Sub-Documents db.posts.update ({ title: 'Post One' } , { $set : { comments: [ { body: 'Comment One' , user: 'Mary Williams' , date: Date () } , { body: 'Comment Two' , user: 'Harry White' , date: Date () } ] } }) Find By Element in Array (\\$elemMatch) db.posts.find ({ comments: { $elemMatch : { user: 'Mary Williams' } } } ) List indexes in collection db.posts.getIndexes () Add Index db.posts.createIndex ({ title: 'text' }) Text Search db.posts.find ({ $text : { $search : \"\\\"Post O\\\"\" } }) Greater & Less Than db.posts.find ({ views: { $gt : 2 } }) db.posts.find ({ views: { $gte : 7 } }) db.posts.find ({ views: { $lt : 7 } }) db.posts.find ({ views: { $lte : 7 } }) Source","title":"MongoDB Cheat Sheet"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#mongodb-cheat-sheet","text":"","title":"MongoDB Cheat Sheet"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#show-all-databases","text":"show dbs","title":"Show All Databases"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#show-current-database","text":"db","title":"Show Current Database"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#create-or-switch-database","text":"use acme","title":"Create Or Switch Database"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#drop","text":"db.dropDatabase ()","title":"Drop"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#create-collection","text":"db.createCollection ( 'posts' )","title":"Create Collection"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#show-collections","text":"show collections","title":"Show Collections"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#insert-row","text":"db.posts.insert ({ title: 'Post One' , body: 'Body of post one' , category: 'News' , tags: [ 'news' , 'events' ] , user: { name: 'John Doe' , status: 'author' } , date: Date () })","title":"Insert Row"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#insert-multiple-rows","text":"db.posts.insertMany ([ { title: 'Post Two' , body: 'Body of post two' , category: 'Technology' , date: Date () } , { title: 'Post Three' , body: 'Body of post three' , category: 'News' , date: Date () } , { title: 'Post Four' , body: 'Body of post three' , category: 'Entertainment' , date: Date () } ])","title":"Insert Multiple Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#get-all-rows","text":"db.posts.find ()","title":"Get All Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#get-all-rows-formatted","text":"db.find () .pretty ()","title":"Get All Rows Formatted"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#find-rows","text":"db.posts.find ({ category: 'News' })","title":"Find Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#sort-rows","text":"# asc db.posts.find () .sort ({ title: 1 }) .pretty () # desc db.posts.find () .sort ({ title: -1 }) .pretty ()","title":"Sort Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#count-rows","text":"db.posts.find () .count () db.posts.find ({ category: 'news' }) .count ()","title":"Count Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#limit-rows","text":"db.posts.find () .limit ( 2 ) .pretty ()","title":"Limit Rows"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#chaining","text":"db.posts.find () .limit ( 2 ) .sort ({ title: 1 }) .pretty ()","title":"Chaining"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#foreach","text":"db.posts.find () .forEach ( function ( doc ) { print ( \"Blog Post: \" + doc.title ) })","title":"Foreach"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#find-one-row","text":"db.posts.findOne ({ category: 'News' })","title":"Find One Row"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#find-specific-fields","text":"db.posts.find ({ title: 'Post One' } , { title: 1 , author: 1 })","title":"Find Specific Fields"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#update-row","text":"db.posts.update ({ title: 'Post Two' } , { title: 'Post Two' , body: 'New body for post 2' , date: Date () } , { upsert: true })","title":"Update Row"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#update-specific-field","text":"db.posts.update ({ title: 'Post Two' } , { $set : { body: 'Body for post 2' , category: 'Technology' } })","title":"Update Specific Field"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#increment-field-inc","text":"db.posts.update ({ title: 'Post Two' } , { $inc : { likes: 5 } })","title":"Increment Field (\\$inc)"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#rename-field","text":"db.posts.update ({ title: 'Post Two' } , { $rename : { likes: 'views' } })","title":"Rename Field"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#delete-row","text":"db.posts.remove ({ title: 'Post Four' })","title":"Delete Row"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#sub-documents","text":"db.posts.update ({ title: 'Post One' } , { $set : { comments: [ { body: 'Comment One' , user: 'Mary Williams' , date: Date () } , { body: 'Comment Two' , user: 'Harry White' , date: Date () } ] } })","title":"Sub-Documents"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#find-by-element-in-array-elemmatch","text":"db.posts.find ({ comments: { $elemMatch : { user: 'Mary Williams' } } } )","title":"Find By Element in Array (\\$elemMatch)"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#list-indexes-in-collection","text":"db.posts.getIndexes ()","title":"List indexes in collection"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#add-index","text":"db.posts.createIndex ({ title: 'text' })","title":"Add Index"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#text-search","text":"db.posts.find ({ $text : { $search : \"\\\"Post O\\\"\" } })","title":"Text Search"},{"location":"mongodb/MongoDB%20Cheat%20Sheet/#greater-less-than","text":"db.posts.find ({ views: { $gt : 2 } }) db.posts.find ({ views: { $gte : 7 } }) db.posts.find ({ views: { $lt : 7 } }) db.posts.find ({ views: { $lte : 7 } }) Source","title":"Greater &amp; Less Than"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/","text":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Windows \u0440\u044f\u0434\u043e\u043c \u0441 Linux, \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0434\u0440\u0443\u0433\u0443\u044e. \u041f\u0440\u0438 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 Windows \u0432 Linux \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u0442\u0430\u043a \u043a\u0430\u043a Linux \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 NTFS, \u043d\u043e \u0432\u043e\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext4 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442 \u043c\u0430\u0439\u043a\u0440\u043e\u0441\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. \u0412 \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f ext4 \u0432 Windows. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u044d\u0442\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 Windows \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0451 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows 10 \u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 ext4 \u0434\u043b\u044f windows \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c ext2fsd. 1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 ext2fsd \u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u041e\u0421 \u043c\u043e\u0436\u043d\u043e \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b . \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0430\u0436\u0438\u043c\u0430\u043d\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0432 Windows. \u0418\u043d\u0442\u0435\u0440\u0435\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043e\u043a\u043d\u043e: \u0417\u0434\u0435\u0441\u044c: Make Ex2Fsd automatically started when system boots - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c. Enable write support for ext2 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext2 Enable force writing support on Ext3 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0433\u0430\u043b\u043e\u0447\u043a\u0438 \u0438 \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0414\u0430\u043b\u0435\u0435 . 2. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b, \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0449\u0435\u043b\u0447\u043e\u043a: \u0417\u0434\u0435\u0441\u044c \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Automaticly mount via Ext2Mgr - \u0440\u0430\u0437\u0434\u0435\u043b \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0441\u0435\u0439\u0447\u0430\u0441, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Mountpoint for fixed disk - \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421 \u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043f\u043e\u043b\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u0443 \u0434\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u043e\u043b\u0435 Hiding files with prefix \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438, \u043a\u0430\u043a \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Linux \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u043e\u0447\u043a\u0430. \u041a\u043e\u0433\u0434\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 Apply . \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u044b\u0432 \u041c\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0441\u043a: \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 Ext2fsd \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438 Linux \u043a\u0430\u043a \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 NTFS \u0438\u043b\u0438 FAT. \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 Ext4 \u0432 Windows \u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043a\u0440\u044b\u0442\u044c ext4 \u0432 windows 10. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b DiskInternals Linux Reader \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 Linux \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0435\u0451 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 \u044f\u0434\u0440\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 : \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 ext4 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c: \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043f\u043e \u043d\u0435\u0439 \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 Save As, \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432\u0430\u0448 \u0444\u0430\u0439\u043b: \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0430\u043f\u043e\u043a \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0444\u043b\u0430\u0436\u043e\u043a Save directory structure . \u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0432\u0441\u0435 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0443\u0436\u0435 \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435. Source","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Windows \u0440\u044f\u0434\u043e\u043c \u0441 Linux, \u0440\u0430\u043d\u043e \u0438\u043b\u0438 \u043f\u043e\u0437\u0434\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0434\u0440\u0443\u0433\u0443\u044e. \u041f\u0440\u0438 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 Windows \u0432 Linux \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u043d\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0435\u0442 \u0442\u0430\u043a \u043a\u0430\u043a Linux \u043e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0441\u0435\u043c\u0435\u0439\u0441\u0442\u0432\u0430 NTFS, \u043d\u043e \u0432\u043e\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext4 \u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442 \u043c\u0430\u0439\u043a\u0440\u043e\u0441\u043e\u0444\u0442 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. \u0412 \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u044f \u043e\u043f\u0438\u0448\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f ext4 \u0432 Windows. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u044d\u0442\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 Windows \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043d\u0435\u0451 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows-10","text":"\u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440 ext4 \u0434\u043b\u044f windows \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c ext2fsd.","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4 \u0432 Windows 10"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#1-ext2fsd","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0449\u0438\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u041e\u0421 \u043c\u043e\u0436\u043d\u043e \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b . \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0442\u0440\u0443\u0434\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0430\u0436\u0438\u043c\u0430\u043d\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 \u0432 \u043c\u0430\u0441\u0442\u0435\u0440\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0432 Windows. \u0418\u043d\u0442\u0435\u0440\u0435\u0441 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u043e\u043a\u043d\u043e: \u0417\u0434\u0435\u0441\u044c: Make Ex2Fsd automatically started when system boots - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c. Enable write support for ext2 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext2 Enable force writing support on Ext3 partitions - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 ext3 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0433\u0430\u043b\u043e\u0447\u043a\u0438 \u0438 \u0435\u0449\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0414\u0430\u043b\u0435\u0435 .","title":"1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 ext2fsd"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#2-ext4","text":"\u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u044b \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b, \u0438\u0445 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u0444\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u043c \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0449\u0435\u043b\u0447\u043e\u043a: \u0417\u0434\u0435\u0441\u044c \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Automaticly mount via Ext2Mgr - \u0440\u0430\u0437\u0434\u0435\u043b \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u0441\u0435\u0439\u0447\u0430\u0441, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 Mountpoint for fixed disk - \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421 \u043f\u0440\u0430\u0432\u0430 \u043e\u0442 \u043f\u043e\u043b\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u0443 \u0434\u0438\u0441\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043f\u043e\u043b\u0435 Hiding files with prefix \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043a\u0430\u043a\u0438\u043c\u0438 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u043d\u0443\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438, \u043a\u0430\u043a \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Linux \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u044b \u0441 \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u043e\u043c \u0442\u043e\u0447\u043a\u0430. \u041a\u043e\u0433\u0434\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 Apply . \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043a\u0440\u044b\u0432 \u041c\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b \u0443\u0432\u0438\u0434\u0438\u0442\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0438\u0441\u043a: \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 Ext2fsd \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438 Linux \u043a\u0430\u043a \u0441 \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 NTFS \u0438\u043b\u0438 FAT.","title":"2. \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 ext4"},{"location":"windows/%D0%9F%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20ext4%20%D0%B2%20Windows/#ext4-windows_1","text":"\u042d\u0442\u043e \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u043a\u0440\u044b\u0442\u044c ext4 \u0432 windows 10. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b DiskInternals Linux Reader \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 Linux \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0435\u0451 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0432 \u044f\u0434\u0440\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u044b. \u0421\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043a\u043d\u043e\u043f\u043a\u0438 \u0414\u0430\u043b\u0435\u0435 : \u0413\u043b\u0430\u0432\u043d\u043e\u0435 \u043e\u043a\u043d\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043e\u0442 \u0442\u0430\u043a: \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0441 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 ext4 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0447\u0442\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c: \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u043b\u0438 \u043f\u0430\u043f\u043a\u0443, \u043a\u043b\u0438\u043a\u043d\u0438\u0442\u0435 \u043f\u043e \u043d\u0435\u0439 \u043f\u0440\u0430\u0432\u043e\u0439 \u043a\u043d\u043e\u043f\u043a\u043e\u0439 \u043c\u044b\u0448\u0438 \u0438 \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 Save As, \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u0430\u043f\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432\u0430\u0448 \u0444\u0430\u0439\u043b: \u0427\u0442\u043e\u0431\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0430\u043f\u043e\u043a \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0444\u043b\u0430\u0436\u043e\u043a Save directory structure . \u0417\u0430\u0442\u0435\u043c \u0434\u043e\u0436\u0434\u0438\u0442\u0435\u0441\u044c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0432\u0441\u0435 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0443\u0436\u0435 \u0432 \u043f\u0440\u043e\u0432\u043e\u0434\u043d\u0438\u043a\u0435. Source","title":"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 Ext4 \u0432 Windows"}]}